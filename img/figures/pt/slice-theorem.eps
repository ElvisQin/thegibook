%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 396 191
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 396 191
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: OUUJAU+Times-Roman
%!FontType1-1.0: OUUJAU+Times-Roman 1.0000.0.0000
14 dict begin/FontName /OUUJAU+Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Omegagreek put
dup 34 /x put
dup 35 /space put
dup 36 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<






4520B003266062636820B003266165B045236544B0862344B10045455458B145406544B286408645236144592B2B2B2B4569534273737373737373737373737373737373737373737475755E73735E00
00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/space 1 def
/t 2 def
/x 3 def
/macron 4 def
/dcroat 5 def
/Omegagreek 6 def
/dong 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CAF24FF8985D12C0AFA59F1D8B277D1FC249188DA98CAE72468909D2E803C1E1900E1EF02D5E10A01AC8CC687FE2CE17EC270360ABACABBD98210089123ADD92E1D9FB6BDF4BBBE74B907201962534C663604DABA9D75DF29121B652C4F639A2269EC2DC740A9397B2234B521F6370F13A4CFB15D5CBBC048D6AB9BDBFBEE35F74A2AA037E3C6E8721DA22FF021DEFB402CC0AC0F359266EF28C5A47D3CDBC304680333A5D6D7985D2F292A373F9400CF09CD9F7CEB2FA9BBA95F66C836FD59F529E8AD8676D800BB99EB10ACA68BC3E7EEE5346DD9B1722F26A96D60B31D37F4A84D668A2DE121B336A0DC52615785CDBBDCC47EA887B211AA257E8D0E7F3A4AAC86ABA1ADAB8826AB89FBFBE6B4C2542095120295FCAAE4686C73F42C58E2DEF8FE7DBBFB309D5AE398A0F04002644B8CFED7CD391D80E0CEBEF8FD09F54543FE42A2CE2CEACB635A13BBACBC2D5603B7A81100427FCC7BE0194E1A422B969653D222AEB04DC55916E062C6DDA2C443FEEFF9F533CA3928AB078D3B7F1B152E4358BDA2EFFB9D17BC082094309173F1386AD9DD8DBC9B14CAE77B97815FB31436DC1ADEA5BE745E17D91D36853D42B345BC2B18873F26CF954FCCE74214C6785C61A77A297C8E12B2D9359D366690CC96B476EA30DCE173DA6151FC98F80C5A09B79ACE29B2F62FA845A45A19058B3FF765457128CB40A13E975A69941EEAD6E6B57D72584575A2B5FE739942E344F171809EF2820802FF7FE5F935ED3FD9364F0361D31A83175AED4A019570BF6404414F34
C9DA46F8DDF09036D9EFC2A6DBE040FA387F9250984DE2BAF244AA224B8F87B38CC9698726DA5B63C640EC83D73A28FD367ABA5F8AC7F671DE20BF5E389B4AD6642F40C06C3200D039F94DDCE0C2F129B18BDD7607BF0A2100C2F3119BEFE9D08148D04F9821BB68101C68B42C247D31D8B960B3802EECB09BC3B370383056F9FAD8FBC7EFDB57571FC5D69E8B97397E4DDCDD84B2C541587EA868E92DA59B9C293E4D18D166B17DBDC0ED07E1B0541A885D37B096C26F70F82A9807846EBF7DC7F7D4C88962BDB899143AF2325102090304AEA4C7EEDD9FE57D9915BFCD9F156B77F73AA87DE11927F4B7CCF51DBDB5EB33815D32B5EDDC344C33B7DAF142509AEB65894CB11DC64808C9099F9FB3F109DADF6C0D934BB67D9C2DB669603136AB916810BB8B6ECD590973C8D08D73C14D7D4EE6D42B55C69609FE2F5FFEF0081EEADB7249FFD442AA4AC1F9679F29CE72EE3B278512B71BEA6061680CB76BADB939E1C8B9AEAB84693553196A47A0EC71BCA0C9782791095921E1939C456DDAE63D7D5D4FF7A7F93F28B7492C8120F0544340AB5F59E97A0D00896247F7D56CAFE4676E9595DB95898A4632C5191AC8F10E02692E43A725E21049A603D87A871E40CA30B5EA0AB37ADE2F1FDE4C2E4290CABB68E576392994C65FFECD1B6A0A5FA327206510085D04A66B46592098DB0D9AEC3563F57B4715188EEEE893E55ABF8281CE6C864FEF7FA333D34154CB79F81E5859FCE4DAA52C91CF42093B529F177293642FA9CA4810331B8FF15CF89DE1D9BDD492972D11AF43EE62FF2C0FD01BCBB8B6E2FA07440C121DBC5D29040E896BB3D0CA2AE064B007EFF7EA3760BC9E4EFC150287CD0C5CEBBA5062C002E0E4E5164ACF143E94AAE35F71C66F1B91D2E7C93F374C45E712D60B15828BCD2AE23AB6C18E61DAB4F5588B98C0317AD9D763922608FDCA85F48252EC09EC60D447B89CF055D5456047835C1DADDD74837277E3990DF23518729BA5B207B006D9A3CC6D9188F9175B0C7B14954149836E403B217A1F04058A4742AA0CEB87B16435E7C4B754C066D4808A3BFBF8571CC2250A137569C973F12AF84CF599F16558BE4F55A7A194E5A1EE4DC744CBA7E17C24174D74B208683D96A501EB68B8B99070950CC59B44F2BC9AAAC3FB1AF19C13F4B74EF0DB92602302F9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/OUUJAU+Times-Roman cguidfix
/F1.1/OUUJAU+Times-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 0.68701267 0.49803922 sc
q
0 0 395.47083 190.01434 rc
158.09402 29.494469 m
159.67044 30.255203 160.8233 31.422287 161.53134 32.949791 c
162.24124 34.475952 162.50676 36.361309 162.3576 38.523388 c
162.20987 40.68483 161.64876 43.121433 160.74292 45.733555 c
159.83783 48.345757 158.58951 51.132175 157.08647 53.99572 c
155.58348 56.859859 153.82695 59.800396 151.90675 62.736572 c
149.98616 65.673561 147.90259 68.606026 145.73471 71.475449 c
143.56622 74.345665 141.31366 77.153038 139.03867 79.860878 c
136.76303 82.569382 134.46487 85.178711 132.1882 87.670143 c
129.91095 90.162056 127.65495 92.536438 125.44878 94.787605 c
123.24218 97.039093 121.08515 99.167671 118.99429 101.17616 c
116.90335 103.18461 114.66794 105.27529 112.27868 107.43848 c
109.88972 109.60128 107.34656 111.83685 104.64764 114.12492 c
101.94919 116.41248 99.094551 118.75279 96.095108 121.1114 c
93.096359 123.46938 89.952354 125.84583 86.693512 128.18896 c
83.43557 130.53145 80.062462 132.84055 76.629219 135.04631 c
73.196968 137.25156 69.704597 139.353 66.234261 141.2661 c
62.764771 143.17906 59.317921 144.90271 55.998947 146.34804 c
52.68034 147.79381 49.490917 148.95988 46.546001 149.76915 c
43.600677 150.57956 40.9016 151.03181 38.553181 151.07957 c
36.203518 151.12898 34.206062 150.77318 32.631462 150.01071 c
31.05505 149.24997 29.902184 148.08289 29.194149 146.55539 c
28.484243 145.02922 28.218729 143.14388 28.367886 140.9818 c
28.515608 138.82034 29.076731 136.38374 29.982561 133.77162 c
30.887655 131.15942 32.135971 128.373 33.639019 125.50946 c
35.142006 122.64532 36.89854 119.70479 38.818729 116.76861 c
40.739326 113.83162 42.822903 110.89915 44.990768 108.02973 c
47.15926 105.15952 49.411827 102.35214 51.686817 99.644302 c
53.962456 96.935791 56.260609 94.326469 58.537289 91.835037 c
60.814533 89.343124 63.070538 86.968742 65.276695 84.717575 c
67.483307 82.466087 69.640327 80.337509 71.731186 78.329025 c
73.822136 76.320572 76.057541 74.229889 78.4468 72.066696 c
80.83577 69.9039 83.378929 67.668327 86.07785 65.380249 c
88.776291 63.092705 91.630936 60.752388 94.630379 58.393772 c
97.62912 56.035797 100.77313 53.659348 104.03197 51.316208 c
107.28991 48.973732 110.66302 46.664635 114.09627 44.458862 c
117.52852 42.25362 121.02088 40.152191 124.49122 38.239075 c
127.96072 36.326118 131.40756 34.602478 134.72653 33.157146 c
138.04515 31.711374 141.23456 30.545298 144.17949 29.736029 c
147.1248 28.925625 149.82388 28.473362 152.1723 28.425606 c
154.52197 28.376204 156.51942 28.731995 158.09402 29.494469 c
h
158.09402 29.494469 m
f
2 J
0 0 0 sc
0.69274771 0.33487645 0.72118002 -0.69274771 -180.05455 214.81065 cm
139.45738 334.92303 m
141.73166 334.92429 144.00545 334.33875 146.21239 333.20059 c
148.41977 332.06458 150.55951 330.37738 152.57768 328.23193 c
154.59659 326.0878 156.49361 323.48752 158.23506 320.55869 c
159.97731 317.6301 161.56413 314.37491 162.98344 310.9274 c
164.4034 307.47934 165.65625 303.84024 166.7476 300.12936 c
167.83939 296.41748 168.77013 292.63434 169.5569 288.87256 c
170.34387 285.10974 170.98727 281.36826 171.50966 277.71194 c
172.03207 274.05469 172.43373 270.48221 172.73814 267.03293 c
173.0425 263.58289 173.24976 260.25562 173.3817 257.06976 c
173.51352 253.88341 173.5701 250.8381 173.57016 247.93881 c
173.5701 245.03954 173.51352 241.99423 173.3817 238.80788 c
173.24976 235.62204 173.0425 232.29474 172.73814 228.84473 c
172.43373 225.39543 172.03207 221.82295 171.50966 218.1657 c
170.98727 214.50937 170.34387 210.76788 169.5569 207.00507 c
168.77013 203.24332 167.83939 199.46014 166.7476 195.74829 c
165.65625 192.0374 164.4034 188.39828 162.98344 184.95024 c
161.56413 181.50275 159.97731 178.24754 158.23506 175.31897 c
156.49361 172.39012 154.59659 169.78984 152.57768 167.64569 c
150.55951 165.50026 148.41977 163.81305 146.21239 162.67706 c
144.00545 161.53891 141.73166 160.95334 139.45738 160.95459 c
137.18309 160.95334 134.9093 161.53891 132.70238 162.67706 c
130.49498 163.81305 128.35526 165.50026 126.33707 167.64569 c
124.31817 169.78984 122.42116 172.39012 120.6797 175.31897 c
118.93745 178.24754 117.35063 181.50275 115.93132 184.95024 c
114.51136 188.39828 113.2585 192.0374 112.16715 195.74829 c
111.07538 199.46014 110.14464 203.24332 109.35786 207.00507 c
108.57088 210.76788 107.92747 214.50937 107.4051 218.1657 c
106.88268 221.82295 106.48103 225.39543 106.17661 228.84473 c
105.87226 232.29474 105.66501 235.62204 105.53307 238.80788 c
105.40123 241.99423 105.34466 245.03954 105.3446 247.93881 c
105.34466 250.8381 105.40123 253.88341 105.53307 257.06976 c
105.66501 260.25562 105.87226 263.58289 106.17661 267.03293 c
106.48103 270.48221 106.88268 274.05469 107.4051 277.71194 c
107.92747 281.36826 108.57088 285.10974 109.35786 288.87256 c
110.14464 292.63434 111.07538 296.41748 112.16715 300.12936 c
113.2585 303.84024 114.51136 307.47934 115.93132 310.9274 c
117.35063 314.37491 118.93745 317.6301 120.6797 320.55869 c
122.42116 323.48752 124.31817 326.0878 126.33707 328.23193 c
128.35526 330.37738 130.49498 332.06458 132.70238 333.20059 c
134.9093 334.33875 137.18309 334.92429 139.45738 334.92303 c
h
139.45738 334.92303 m
S
2.1259842 w
0.14117648 0 1 sc
1 0 0 -1 -44.094639 337.69141 cm
45.16156 243.56868 m
224.1945 244.23213 l
S
CM
187.61736 93.431412 m
180.08974 90.723129 l
180.11002 96.195412 l
h
187.61736 93.431412 m
f
0.53149605 w
1 0 0 -1 -44.094639 337.69141 cm
231.71199 244.25999 m
224.18437 246.96828 l
224.20465 241.496 l
h
231.71199 244.25999 m
S
1 w
0 0 0 sc
138.75458 158.15662 m
138.09113 337.18954 l
S
CM
94.687798 187.05229 m
97.39608 179.52466 l
91.923798 179.54494 l
h
94.687798 187.05229 m
f
0.25 w
1 0 0 -1 -44.094639 337.69141 cm
138.78244 150.63913 m
141.49072 158.16675 l
136.01843 158.14647 l
h
138.78244 150.63913 m
S
0.99212599 w
251.47156 243.56868 m
430.50452 244.23213 l
S
CM
393.92737 93.431412 m
386.39972 90.723129 l
386.42001 96.195412 l
h
393.92737 93.431412 m
f
0.2480315 w
1 0 0 -1 -44.094639 337.69141 cm
438.022 244.25999 m
430.49435 246.96828 l
430.51465 241.496 l
h
438.022 244.25999 m
S
1 w
1 0.3764706 0 sc
419.76315 241.17345 m
417.91956 241.01746 416.07242 240.84467 414.23242 240.65063 c
412.38885 240.45624 410.53922 240.23914 408.70172 239.9937 c
406.85815 239.74744 405.00397 239.46957 403.17102 239.15361 c
401.32745 238.83582 399.4646 238.47218 397.64029 238.05756 c
395.79672 237.63855 393.91681 237.14912 392.10959 236.59401 c
390.23541 236.01833 388.38235 235.35719 386.57889 234.58693 c
384.66803 233.77081 382.82004 232.83577 381.04819 231.74895 c
379.06943 230.53523 377.23257 229.16176 375.51746 227.59653 c
373.43823 225.69896 371.6178 223.59335 369.98676 221.30113 c
367.80994 218.24188 366.00351 214.89633 364.45605 211.47943 c
362.25473 206.6188 360.45157 201.32825 358.92535 196.2189 c
356.84 189.23784 355.13065 182.13832 353.39462 175.06395 c
352.32745 170.71509 349.91785 160.51823 347.86392 156.4838 c
345.37561 151.59612 343.50327 155.31723 342.33322 158.25922 c
340.42465 163.05821 338.02875 173.29074 336.80252 178.28856 c
335.13535 185.08354 333.37399 192.11993 331.27179 198.79614 c
329.74985 203.62965 327.94675 208.60254 325.74109 213.16888 c
324.18369 216.39313 322.37582 219.52075 320.21039 222.3768 c
318.56625 224.54527 316.74341 226.52106 314.67969 228.29662 c
312.95462 229.78078 311.11575 231.07751 309.14896 232.22069 c
307.37128 233.25394 305.52225 234.14188 303.61826 234.9162 c
301.81171 235.65089 299.95831 236.28181 298.08755 236.83133 c
296.24399 237.37286 294.43353 237.82405 292.55682 238.23347 c
290.71326 238.63568 288.88736 238.97829 287.02612 239.28726 c
285.18256 239.59331 283.34875 239.85832 281.49542 240.0974 c
279.65186 240.33522 277.8139 240.54384 275.96472 240.73262 c
274.12115 240.92082 272.28091 241.08768 270.43399 241.23929 c
S
0 0 0 sc
346.71658 233.47136 m
346.71658 252.89058 l
S
0 i
/F1.1[ 14 0 0 -14 0 0]sf
219.32722 264.83206 m
(!)s
230.08015 265.83206 m
(")s
405.79971 264.83206 m
(!)s
416.55264 265.83206 m
(")s
147.91222 161.67706 m
(!#)[ 10.752930 0.000000 ] xS
162.16515 162.67706 m
($)s
ep
end
%%Trailer
%%EOF
