%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 489 392
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 489 392
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PCBEJL+PingFangSC-Regular
%!FontType1-1.0: AAAAAC+PingFangHK-Regular 001.003%%CreationDate: 3/3/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAC+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid54 putdup 3 /cid73 putdup 4 /cid1278 putdup 5 /cid1555 putdup 6 /cid1677 putdup 7 /cid1851 putdup 8 /cid1896 putdup 9 /cid2468 putdup 10 /cid2903 putdup 11 /cid2974 putdup 12 /cid3305 putdup 13 /cid3524 putdup 14 /cid3726 putdup 15 /cid3791 putdup 16 /cid3932 putdup 17 /cid5196 putdup 18 /cid5230 putdup 19 /cid5486 putdup 20 /cid6441 putdup 21 /cid6700 putdup 22 /cid7163 putdup 23 /cid7166 putdup 24 /cid7413 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D9075E53AC2AB7524E61DD2942AD43C860B1C18FC11EE3647C33FFA832A4659B60CE2F23D9A5F2C3E03ECBD7211DBC19C346BF7342CD03BC49AE7655F9BABCECB846BE178F38872D50D7D2EE6B73A28813D7BE64059C76E7994806AF013D1D2E3C2E7E976079E36D67129C17AEFEAB2C94775911567E36584EB45BAE60D8DB6968DE8BA74157ACA686FAD82C7691E17150BAE8CA3B4770AD513C6F1C63A31688C6D75A1C9D9E4A3D461E06B7BDD76BA21E08D42CD9453925DDD67FED614815FD4A21FCDE4FB477FA03A180D9ACE19F5187A95D19E391B14484C8283D0F796AE06FC6E2A5131BFA4C82EC68FEEC82808E272F9437799E89C9A34CD63316D99FEB6EDBB160BC875382BA7311F786009FF1DF53CD832875E87268066F70377C3BE77BD304A3913B953F0ED49723F28036AE7FF7110BFC9D5E0411A0FBFF087347865B3F7640DA9AA9CE47D605376442BB442EBC5959BF81F1442069E1DD8CFB27D936BA078B5567CDB5B61C9F2D17B35E9CB83ED4FAAEA301086611034D2F1A71762DA85AD35EEE39B402687FB8AF88F94F1DC38E426811BE86AD6AB78239FD950A2051CED0AB3CF0751DE08F2B2FA557233EC000AB9BBE1A6A1AB22D2461B7337FFD325216DE3A9ABAAF72F3462C3941AB717D4AF10694FD1BC1DA1DB5A74D198D9B7AA77F2A6A77DF155126DD5305D42116FA7C9D2C7CC5C4F46266438DDEC65E1BC3F1D7B12B23476386FD1F4C495477B49BCCA5980566BEDB023776BD571896802065F94ED5C993297175F238A31483906F1D71C519F0DE57DCE1417F785F91B56E8A4D92AC71B2521BE6C7549EC08A54BD14DB3A6C4D1330A9A7CB6131B85688E33801485DEFB10D2D402EFC118D100D4E4801F68659F570B0AACF829C809E79F8C4A7A707D4039E341758FC70DA8D716BE401CFE39CD8F88CBDF9AF8C9B647F067401D8DB880F29CDFE44D7024471252A213DBEFE3DFDC6058ABFBE30918C34590394639A61B3055733140456C20CF91A6E2159379A6DF560F6591D0E3A898642E7EA7A0DA5A98FF64F4B308D6BAD06EA33E7133107D0E31F3106C3874B6B7FB06BB1274676D114CA862A1447D58D42AB2CF97889232EC1D135CED89B03E369FD7FD775DE8656AF0A06511DF6B55A86AFC3DD964699B42FDF53908B272244349B933378C67E441DA0D7E2850AE37E21417990B4684D0831BB3A730FE054806A9485BCFDC5AA35162BBE7DE35DE445EC518A08CCEAF72FDDB24A5C8964EFE63F51822D9372ECF95AFF0DCAE11D670A39101841C35C3FDC6A28E2A044728FA5F1B720E8B13C0CF17F32762BBFB1E140A35A6BEFF2670F95E329C05B1F4363A904BAD0AE617E3EC82E22301A04967618B60E215915D9565D4580BF052827A4ABCD07F1759B261D907BFAF1BFAA3590A0C2AC3FEDDFC346D24B55E7B6ACCFBFE7E3062895EF04F9BEB7CE7176379F28689C60924E1B2C6982D340AF92211B9EF9BC838375A8E9FB76BEE5470FAA0396A4DC821AB6FB3634CC67879228C62A40F295483A1B6B7FB8B3CCD3BD285DC12C5416FEDF39DDF6A6A6C5A6C5863A8E83D6CE44FBAC0092B6DDBD59CED6EEC9D34EC24B492BE7E2EE682AF66B1414854F1A7B996E36B40BEA977925D0A0AFB9A095BF7D54E4A06C05E86E40C640E30B990705E3EAB8FF586ED4A557DB2165F11523B8E9603C87FD997D7633242CC19444480283BCFB7AFB677373C3392C365758E507C1D3FB593307B759B9343AFBB7EC74436ADDA50ED6E8688D80A90F46D0888C8D342E8FD8557575397C7897B587BFAAB9D6FCDE10F40E8C0937CE8A157C583B506005D911ABE84F409BF28BAD004743ACB2DF8788120C08E8D7E601BC7B0CDE9D9EEE1A610228EE99F74EB675690CF206272438C0A638968AC06C8B8FA94C929DC7F8D6AF0DB515509E97C5EF39F5F4A9297E12B692B392446FC790052523182DE7631A1F075239E514EFACE0AA1F4F223678E231FE7AC19D738DF3D37C3EB5B6C81E553E477160E77B5B7CC1DBBD66EBF9B1AF16E7D9A0E09A0CCE76A97A57425D6658E057AADACE6E00194388CF416609806D2BE8B4F567F9FD62E8C03CCD2F3F62D1B66388CF1D6BE395DE5DD0B55FE910CC1AEA6024D3D07FC25CFD98A63991D4CDCDD7CEDE17E24E5CC980EE5CA7A5B4FDB233C332479354A781175E50D3051290D083D1B2C16A7C92C1C0BF434E6E833551AAC6DE2276FC1518E290D78E73FF1BDBAE283063C6F8ED0E20EF6830B14013F17923E8ED9F00E4F565EA1B42F39A4935E10F18B0BC84BE3634E41FE4DEFBA01744A9ABE1F46380B593593AF6788D931FB596FF2B873EF04DCA6938435FD99E9437721CEA2601F63D80856D79200CF4A4526DFF3574B6BF8F1C2BB3485A57F127EF8A0611F87EE53CBABFD66FCA1C67809DE763F3FFCAD27BE0D824C334CCB223819B4C456410867D334A1F2452F213BDF718CEDBEB00271DACD5E8968BB476C862E400D4FE01B073AE0D645AF5AB4DD957C171ED521AEBB0EBD46784F2A1A6691B6CD6FE2AC2D6B24CB751D1676AEDBAD9D3EBBE6797930927900D5BAFFCE6637570375F5860165EC48C21949C8793AC0D814BC7E54BD9AAD1FCD68C3088C975F8E509760389F66B9305301467B0178599E9BFB91FD2707B994AE4BA5B59C0DE3BD1C779A04240A180C89DA1E86530A19AEDAC7DEFE191B6A8B01255825C11CD8A2F97A3C6B66B3907ABD83079A25656A19AFEA32FB931A9C4C48EB41DD9B30F9B07A05AAC6E5C262DC601B4DB2E865AF82822E5FDED731383AFCCE5ECEFAD7DD4EBEC23E45FE9E7F97A02DBD811945722BFA471FD96797CB8E0834ECB0FBD1DB2D1878AD57FBEEFBB73BB82EC13EED4A7B694FD641145170EA958141A8ACA245DAFA774755418A7E907CB7564047857EC3D6FDD608C63AFFD6F22B4D13C2D6F3EEDFF63AD8DBA21C1DEB1912BC5BA874D757BA300E91D879739A2CD6FB1194492FD0A48D61D0E97DC2CD8DA06FE6846CECA2D6E9475CF35D487107E64141533AB9461DD2D33FC7FDB76CADC5BBEE659E62388E6F967EB68FF50F6F50BA94B51E3A2B5ADF8E10F2CE851E622BE0570F8ECCF5ABC76F9459B5F4EF0532D9C129F164CD13D445350A41CF034D1C2247A0B8F9A54B832EF320E513AAF4279B507890DFBE2037883528E15B64E4152C94732AA2F7220FE8F766CF8861F7FB60C8F833297C1CAF05EF13006A116C8261103BD9F389C558874FBDD020EFAB52EEACD4D727834F3A8A0FFCD0C014B62E449CBF524243416C96EA77B489178699B4316B0891D6F88A8BA3EA6C8306A45EC882F1F609D7FCBDB4C79D436DBAD54778BA6FBE51963DE19E04C4A993EC428784E756A59143E4F959DB2D9A3B388AD3CFDFCFFF6103AF64195D3C0C40053C619661C9E2DDC50B85CB166A2F13243AD7D3D9B5DF16B0ABEB275B9C46B8F5AB9C318618E5886DFEA4815D6C62D48AF3AD6DB1060BD5A49B5E79FE49374C6433464A1F3F8164B6EBC783EC6167D8ECE5E603AD2D40C6E2E2B495AF3CDB22F7ED67D78068D29E67E33DFA654A23175C87FF8892F5AAC2D3CD726CDAD8D9E4D4EBBB1182E8403B313DA11BC1B3AA63ED5BD4D14625FAFDB7E58B22CF8E4CBC691D55B757BB6ABF572D82E914DFB5FE5739CE9D78841E2551D69D1FA1B9D17EC9A622341A56BDB2DF4539EEE2EC3C4DF78288BB7715C70AE0AB07CD0ECA3C36F88EA6F9DD4EC1C333FC92B04F1A4419A7269355ECE27B43B9B4BD5F07154C1FDA1C680C6AA3637685D05AE401C710685F5E7EE8572DC538BDAFC3A1A992FA5F54355FB22A8919FBA7E76954EF9943134FC91D6002E23C6094D0D9F021DB26BECC5DC0AE882AFD215974B39C2B4E957D688CD4BA131B174697C9FD6A4B50A682B76F538FA83C163B5830FDCBBCA2ACFCC3AF0064A233BCC0591A1106F0BF99DF4E3996DD470E4212A715E5A3E535C1F29903AFC9338B8DEE7D35C61CAE4DFE65E4ED6DD1672E73ACA0956995AEF709F008161BC8FD83DBEB18690F30227CBEF02697F7C8662B9D0DCEDC3375A94673BB1FD968CF08EEFF0ADDD7EB5BE91F4F9123EB079EB0EE298BA120125300AB909634FA3CA98913CEC119E3E96A15EF64A914CD8CFEC3641F67609621BE961B103321A1579920573030ADD9BC66F0823814529C9EC000564A1DC055D21546DF6CF0F43692BC34C1B8D5E9F3F4207EDEC11B61242FC56A819C8D21B22565F2A02035283622DE8441C771D1331CCCBF760D5D002F1D8D86A40FE5D44E5C983DEE1D918FC3BBE784EBDE8311AA76D4AC29932354B718739681D5D2DB298F4297196B8240A8FE65B36141D74E67369060BE3C24F17A586F37482C92B89E73C5CE81332E02EB7E2633BBE12C30A77EAAC1EB30120CBC0F6B113E1AB1084AC7C5F87E67AED1F7D7D0B2E7561608D26DE911AB3325C970EEACC4E180E4D3EFFC4051A9890E06A47FC5448644E50BAD9C3412A75BCAC89C781E5E244DDB01D4E9CB6D9BC9C53117E7524EB0267BE4FC16CAA73399C70765735FB63EA7A56FF24289114A89B10772F3A793EFCF341B2088443E7A3F98B45FAE86DBFCEC07D3064C30F0C3B5BDC21E6B4A146D7B61BF4FEE31984321060B488037C590C0E1F21E8C48CEC2A020A0D15D2C55E2ABE4FD3F6347878042DAF15F399E0C10CE04F70E6C488641A2BEA7E9A3311623F6624C8AB1A6CE34E35CF14C9E24ADBF4EF49492251A3E2168B88FFC0B30C1BABE8654E17B1F0164F93FF369928C40963B86B85E2A6174679C7415B8E616F2767EC3AE188C1CB17026CA05C9EA71D4DBE632DFC66D37A7F9CFFFC819DB0FD68555E22167205B9F1C0F768193F98D926047A8CF65307A387C373EFA692A1D7EF867A8A4C7245B8C195C4E8EAB882F5EA84545B06F2B849CD083AAD964B794C7EC05DB7402B9D7DD91AD07E4228AB472C62C89247902E01F0009D747B512136EAE99816F7E515E9746C6190D80F9D8A720CBE6214CA8822C7A598E0AD9681358106C0221823C0D203A468C2298EBC9B9D1A1A57134A147C4ED146D6716390CBE85302A52F76649AA8A8851FE43FF73778F347B6DB647F4574433BF90F057792E88858132A7E7A38B44D1CA9C5AF0C5471F85DDB5559B393522C54B6188F9FF7FA5FF0D41917178063ED8FA9A08B73DC490DE08FF12AB686ABD152B57AC3544D5CBE9A20D122C1AEA9789D2A3BFF9DD37E6EAC93658A4AA15F6F28941B0C061A71C91A770C5332A33A9EFE8E4D5C7B446B30C904EDC9E627D388E66B1B8703C53747143FF3B0C7C51A4490C246A7DC70C99B7DB7A09ADBA11BB1D357B7AE6A42E0CF8B5C9ADF2037BA280AC444E1C40A8D8E626DD470CF86E39FB9DCAD761A58AD3FB438EBCD0C4E929FD55A220BB06F72BE6FDA748E5276047499E7B47F2663FD8CD43EF32049227062218A9642865C6252E3B0815EC4B3AE475308F095446E5910B4F30D4C354FD84D8407403B725788FD75CE7F2FA1F7141F025911EC041E49D9402887A658DAA56E8D2663A2B1DC6C043C802E9E549EA41BA91680838177FF5A981929283555DE493834D1B788529878C47B8AAC26E35BEBF59CB97A377AF6BCC5FA32933D651E74ADD0766561F093137CE6B5C4748A096033A8C56ABC85B72A9E614CCA383A25F7DA6404DCE15EC14A2A240AA13F64DABE9A4E7DF2139570635D661C5DE20CFED1E5235B1451D84ECFF20AC785840252BA952E5AF30235233F03F1E3618C73A2425F79CE71615D7758123D6F8E4A7B2444F0D5ABB1AF030CBFE89D6F8829CB768E9326893D01067242ECD183254C37305871833C1EA7180F51E187A09DC1FC652BF76C40924410538E1A1AF6A08EC017F1E5605D8F86AB563FA3A5AA4AF9D1DF44C459940CBA1F5272216F12079992D82A73632A3D4A49EE21E0FD8CAD52C81B858D03C0D62A86F5707B4326920A5C2434821DDFC6F2AB3F25A74E5C2F5C6A581B59BCF1316EB65112A9B5879B1A2CB2276989A1A67DC018E7E2B7BFE270FEE57A1506F2B4E2DE5C61827EF5C497A39B9115C7396E983A692EAC72812E1E5CC496C94FAC95E62276D3A212ED997D6EB87BC93BF9094564F4EA2D4B57ED13A0A3A428205534ABD348E4F2311B7817105055D7EDF61DF3924450266C28B91E9B510FE17AD9C8923E7E8EA5CD3CCC10D994A995CF34A52011A23331E49497146FE39661BE92C2C4EE4D354C9FE91CF8F52160233AAB14971F9C1EACE339EBE52EA26FD733458CBC9DA5EB2B374920C1DD37D2504C1FD03DB0D5C7D78FBEC1F8FDF09B8B1BB2CBC482C124D9BE247A192A3FE9F8FEBCBC14E46A648D20308C0DE6F5DFFC45A957CE656D49929F72F075910EB10092B0221FACE90DFFF5C1DBAF4B006AF2562C0446DBFBE310819B56217FC7592C559C98729605E1DC2C6E63376E8310A657976CF45D04F1D7560C4BD7E2DEE43A096CA21EBFCCA46E53AFB43B2C6E0D9186B069AFF9CF1F75B6A7148BA92E1AD15D3182F4B42F3BD24EEAC4D37512E988D3DF88A37F85826A5EE267F320044B1DD4F2EDF687010CFD40C9145F45168FBB3AA807E9D59FEB42144D654A6BD669D7AD82BA3F2E3D77F4F91FB6F4ACA89C65758520C43CFB153553975616172121F52EC6BDFD5DF1AD36D46B26C0DBB68E4B75A9A125F1F5C5321B7219DF491C898FF0098E935EDD2048F685FA134279EF6E8479011D5784E59DB2B84E424910E73FDE1B9A8175F7FCAD03BCB16BDCECB86DF7E7E14C952312AABDD2CA17A77BA8456DBB31D8F237AB5BD41C7E54E73DB5A76B511A5EFBE48474CABCC2895D323D0691E5A2E4412A476369233EE12DDCAF6751D42E29485AA0CEE31BF86B03DC27EB2FF1C3E742A63F10C6691471B2D383FF757EB0C8DCFE1C8EE3D55434754B5A80A483E2309CC50A65FD065648CDDDC58D6C02C4C7F83BF1A7D35389A6112652A3366B67D098362EBE37F5FD07D2CC115CD269FE7309970BA38A9F24F1464EC9B483782CB51AD8A59DC0E486FA6B78C951445E06FF68D093B61C10D5D040AC7AA1CBCFF74722E9FB0348FB248E987B8CF6584E2698BB82BE34992E8C8805C9149CEC5D0A83DE33CF93AA84D3FD0BDC9B3F666A24F650D68B4CF7E0BCF222AB2A3F0EE733BEEC3C9169A23BB4AF92DD3E2A335AB2A29492DBF941394FD96B5D94333F4527ACBC2ADD000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PCBEJL+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PCBEJL+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid6441 putdup 34 /cid5196 putdup 35 /cid1677 putdup 36 /cid3524 putdup 37 /cid3 putdup 38 /cid73 putdup 39 /cid1851 putdup 40 /cid2468 putdup 41 /cid5230 putdup 42 /cid7413 putdup 43 /cid1555 putdup 44 /cid7166 putdup 45 /cid1896 putdup 46 /cid7163 putdup 47 /cid3791 putdup 48 /cid3932 putdup 49 /cid2903 putdup 50 /cid54 putdup 51 /cid5486 putdup 52 /cid3726 putdup 53 /cid1278 putdup 54 /cid2974 putdup 55 /cid3305 putdup 56 /cid6700 putreadonly def/$SubFontArray [/AAAAAC+PingFangHK-Regular findfont ] def/CharProcs 26 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid54 {(\002) 0 $SP} putdup /cid73 {(\003) 0 $SP} putdup /cid1278 {(\004) 0 $SP} putdup /cid1555 {(\005) 0 $SP} putdup /cid1677 {(\006) 0 $SP} putdup /cid1851 {(\007) 0 $SP} putdup /cid1896 {(\010) 0 $SP} putdup /cid2468 {(\011) 0 $SP} putdup /cid2903 {(\012) 0 $SP} putdup /cid2974 {(\013) 0 $SP} putdup /cid3305 {(\014) 0 $SP} putdup /cid3524 {(\015) 0 $SP} putdup /cid3726 {(\016) 0 $SP} putdup /cid3791 {(\017) 0 $SP} putdup /cid3932 {(\020) 0 $SP} putdup /cid5196 {(\021) 0 $SP} putdup /cid5230 {(\022) 0 $SP} putdup /cid5486 {(\023) 0 $SP} putdup /cid6441 {(\024) 0 $SP} putdup /cid6700 {(\025) 0 $SP} putdup /cid7163 {(\026) 0 $SP} putdup /cid7166 {(\027) 0 $SP} putdup /cid7413 {(\030) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PCBEJL+PingFangSC-Regular cguidfix
/F1.1/PCBEJL+PingFangSC-Regular renmfont
%RBIBeginFontSubset: CGWWUH+Helvetica
%!FontType1-1.0: CGWWUH+Helvetica 1.0000.0.0000
14 dict begin/FontName /CGWWUH+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /asciicircum put
dup 34 /a put
dup 35 /l put
dup 36 /i put
dup 37 /s put
dup 38 /e put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




1D1721011521172101002B2B2B01103C2B2B2B2B818181005D015D2416333237363D010E010F0106070615013637363534262322070607233E01333217161511141633323637150E0123222726270E012322263534363713010E724E5F59962168326D62315301B43E150C837A8D3B210AA805F7A3BD767517250C1E112A2C265D2A160937CE7C95BDBA978ACF5A2C49A691151C060E0D1C2F67016C082C182D5C534C2A53C69B484898FD971C220303850C06422340486AB58895A41301E40000030048FFDA041A0449001C00240025010C40799708991AA71F03050E020F0514150E120F1514400C401408291A014B0BB603C701C603C71BD808D909D61FD823E817E8230BC711C712025C080521240F9A161D243906070716211D1C070A1D160B2507971CA71CB71CD71C0425160F251C05190A0C07110E270F1D27051A27242E072719192627D421A65D182B2B4EF44DFDE44E10F64DEDD4FD391239391112393912392F5D003F3FED3FED12392F3CFD3C10ED1112393130437940460023040503050205010504061F26111012101310141004060C25221B24260020001D26011E1D09170726000B150E26010D0E231A2126011E0521260108180A26000D100A2600002B2B2B2B01103C2B2B103C2B2B2B2A2B2A8101715D00715D5D00161716171615211E013332373637330E01070607062322001110003301262726232206070102B4D638361210FCEF0590978D543014B1074F3152794152C8FEEA0118E2011F0B284AAD7CA805012304476B55516C4AA2A3C55D36473B912E501C100123010601020142FE26754682B38A01DC000000000200840000013B05BD000300070036401C07E50400010006030A0917171A06010229070300190809AA216242182B2B4EF43C4DC4FD3CC44E456544E6003F3F3C3F4DED3130133311231133152384B7B7B7B7042AFBD605BDCC0000000100890000013D05BD0003002940150000030A0517171A0102290003190405AA216242182B2B4EF43C4DFD3C4E456544E6003F3F31301333112389B4B405BDFA43000000020042FFD703B6044B002E002F012E408F38099805961299149815982A062824252736214621472447275624572766246726790C790D790E7623742474257426A61EA82C1303000B15052D042E13001A151B171C18152D142E280F0B6908262536250225220D0A042B1318C61C1D1307041D2E9A2B0B2F07090E100207002F212F1A1F18161827173E28260727281A310E1F27103E00272E193031B221A65D182B2B4EF44DEDF4FD394E10F64DFD3910F4FD3911123939392F111239113939003F3FEDED3FEDED111217397131304379404C012D022615251A26210E1F21000926072101032C002100052A0721011D121F21001B14182101200F22210021220E0D08270A21012625090A01
2D04210006290421001E111C210119161C2101002B2B2B2B103C103C2B103C103C2B012B2B2B2B2B2B2B2B2B81005D5D015D13161716333236353427262F01262726353436333217160723262726232206151417161F011617161514062322262701EF082544A864983D27738F894174DBB9F26B4302AA05263E99666945284E77C24269D9DEEFC70701B701505A3057575B4524161D24222A498198BC8E5A683D32474E40462A19131D2F2C45948FD0D9A002F90002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000006F400C9E5F0F3CF500110800000000005F4D8F0000000000D383C768F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B910001000000000000000000000000000000080512004203C10078047300520473004801C7008401C70089040000420473002F000000360082014C02160244026603460360000000010000000800920009006B0007000200100010005D000007E80A1D00040001B800532BB800492BB8003F2BB800352BB8002B2B4118008001A6009001A600A001A600030069018B0079018B0089018B0099018B00040089018B0099018B00A9018B00B9018BB2040840BA0179001A014A400B041F5414191F180A0B1FD2B80106B49E1FD918E3BB0119000D00E10119B20D0009410A01A0019F0064001F01A50025017A00480028019AB3296C1F60410A01A9007001A9008001A90003008001A9000101A9B21E321FBE012C00250401001F0126001E0401B61FE7312D1FE531B80201B21FC227B80401B21FC11EB80201400F1FC01D9E1FBF1D671FBE1D671FAB27B80401B21FAA29B80401B61FA91D6C1F931EB8019AB21F921DB80101B21F911DB80101B21F751DB80201B61F6D29961F6431B8019AB21F4C96B802ABB21F391DB80156400B1F3638211F351DE41F2F27B80801400B1F2D1D4C1F2A31CD1F241DB802ABB21F201EB8012540111F1C1D931F3A1D4C1F1E1D45273A1D4527BB01AA019B002A019BB2254A1FBA019B0025017AB349293896B8017BB348283125B8017A403648289629482725294C1F252946272729482756C80784075B07410732072B072807260721071B071408120810080E080C080A08080807B801ACB23F1F06BB01AB003F001F01ABB308060805B801AEB23F1F04BB01AD003F001F01ADB70804080208000814B8FFE0B40000010014B801ABB41000000100B801ABB606100000010006B801ADB300000100B801AD401F04000001000410000001001002000001000200000001000002010802004A00B0018DB806008516763F183F123E113946443E113946443E113946443E113946443E113946443E11394660443E11394660443E113946

00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/asciicircum 1 def
/a 2 def
/e 3 def
/i 4 def
/l 5 def
/s 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00C87591079A7824DA227CC348E2AAE1541AB6DD7F51BB27319671BEA0C7E17F047D05EFD0E541FE0AE39C16EA65355A91D7D42A613046832EFA93B995441076B6745354B9A985E72749027236EF012344F1AB8E7C84B9E5CEA6C5008603505A2656F49D8726B03FFDE42B8E8CC3908A864A644C8A09818F29A941F35C9A63644CB6FB0EC539FD8501AA5DD85AF09F287BD286F7102A662595A46FDAA06536EFC912EC1E210E520877D578FEA6E2C0A1B5867BA4A82229E7BDA13468FF924875347589B870AFE43CD3D2440C94909FF4FBF29B17B70C501D79B1D62BBCAD348B670312EF2BC4F19E8CFF3F2A94068C611E9FA2F5AE218B69CB181A12E3A450A66A7E49EF82B6994122DAB624E86A00DE9F797EACCD2B73BABB85A76E4B4FA20EEE6E7B8A8829AA40FF4640D3607E26F1674985BED4860B316F89D0992BACD70C9AE454A50A9FB4B36CE805D07CE7E98353C14EB0BFD34069E994E92C9B0BBAE67EE1D3B96C63118A6067DF54C66D8809D4E641B0DA073DEFF018A8C9879DC1215DF2BF9A2CEE92B987EFD24199A08185E620B1EE96A8BC462A674D6D24EB94CF3A0F574DC8E9707F3D32B76A9061518B36374478E033C701498C446214A991FD6085E805124B40
E482DBEBC7ABD81B0EE4D937C25D306B19B42965939DFCE971091A0171F5C9CA5762088609825D2DB6095F17ECFFA2DD98B0680F6494A89693BB187CE36276839E8CE5216C1BAE3727BAABF980744914288E1E498B5EA2EBC78F9DEBCB18CB99B4D1C345A935B97F2D6A8FDE4A5FF02EE4EE960AE2EA22722F9402E263431CB89BD07EA07BE9C2E6259E4096B4FF29B5918073D89DC9B550798D204932F394EDCA91084305062CD73CD913FBFA4AAD74F3C1D20587D9EB797419F0CEC274A5DC2A505CBD18ACE29D0909AE73D7A5F52D88D8D4B35E069BDA019B3284E44EF18B5861EA482B3BBE7741608F21B63147D092D1387D5A02A16DFD90821AC7E1CF3EC14181DF7EB4914411EF276A6B7E931F2FC8E2D6EF33489A91B01D0965AA1ADD1E49E26021E81059F41309D0A9D859690C8F2965693642B4783F2925F1797EDF1530468BFA615A9E852324358FB16BF3BE21D91FE94BE3749C79BC2A399BABA7460244576916CD72FD9FEF01B3136F34665FFE1C19927DC46C7DCC1AFAE51AC9EAD9891511D62A9C7EEE57A17734CD4ACA42784BB1D1CE0BD9E9AF3E56C7985B97928BDFB30C59A6265EEBC0EBBA4EBC80C95A679DDAA2A380FE1C67E40EFFD825CC70B0CA61DEB40E3A19E0AF86556D0F75B02E31BC1651F117105057E2AA15617D090E4A1C5961568C4D9CE884B9A0DE3FCD4842C5CE3B141877DE7107F1C0030D4236329C6DA39C5429BEC0FBDB9C5FA86A0FF3846AAB1DFEFDA84D012ADE959974A1F4104869C2F8CA3E90CCE9ADAFBC63464D3F5250
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CGWWUH+Helvetica cguidfix
/F2.1/CGWWUH+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2.1259842 w
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 488.52597 391.59125 rc
1 0 0 -1 -164.68555 652.23828 cm
376.47964 371.29272 m
355.53253 371.46539 373.90021 272.14087 326.83054 324.84958 c
305.26395 348.99988 306.24609 337.41602 293.6073 335.12805 c
276.34003 332.00223 284.5614 319.04041 275.6702 317.35135 c
261.58444 314.67551 260.52267 313.78818 256.25586 308.43753 c
247.93071 297.99768 243.77611 316.48767 237.17261 294.41946 c
227.9267 263.52054 205.10023 284.9776 195.8988 298.35641 c
S
480.11203 368.75348 m
494.00681 349.1413 499.04343 365.52557 506.6196 352.80591 c
511.55695 344.51657 523.21039 331.73257 531.55457 312.86087 c
532.87939 309.86447 539.09961 309.54803 539.927 313.55136 c
540.26324 315.17825 549.7804 325.70224 552.93823 327.96576 c
562.2774 334.66003 555.04987 350.04648 564.33228 356.89621 c
568.35199 359.86246 568.05096 350.64648 580.07935 370.29477 c
S
1 w
1 0 0.35294119 sc
216.12871 402.4133 m
216.12871 500.04813 l
S
242.00237 402.4133 m
242.00237 500.04813 l
S
259.91489 402.4133 m
259.91489 500.04813 l
S
291.7594 402.4133 m
291.7594 500.04813 l
S
317.63303 402.4133 m
317.63303 500.04813 l
S
335.54556 402.4133 m
335.54556 500.04813 l
S
343.50668 402.4133 m
343.50668 500.04813 l
S
216.24199 526.0271 m
216.24199 618.73206 l
S
241.70372 537.99902 m
241.70372 620.72235 l
S
260.69412 555.17816 m
260.69412 620.72235 l
S
291.69589 577.76086 m
291.69589 620.72235 l
S
317.85446 576.03058 m
317.85446 620.72235 l
S
335.65714 559.15875 m
335.65714 620.72235 l
S
344.38376 553.82892 m
344.38376 620.72235 l
S
472.60034 442.00519 m
472.60034 500.04813 l
S
485.99512 424.92477 m
485.99512 500.67203 l
S
497.54199 423.73441 m
497.54199 500.04813 l
S
505.92365 447.73669 m
505.92365 500.04813 l
S
513.23938 454.94101 m
513.23938 500.04813 l
S
517.37274 447.3316 m
517.37274 500.04813 l
S
547.76929 456.40521 m
547.76929 500.04813 l
S
556.48047 456.77255 m
556.48047 500.04813 l
S
574.39301 456.77255 m
574.39301 500.04813 l
S
588.32495 456.77255 m
588.32495 500.04813 l
S
584.47314 423.94724 m
584.47314 500.04813 l
S
592.43427 423.94724 m
592.43427 500.04813 l
S
599.96973 430.99533 m
599.96973 500.04813 l
S
612.10706 442.90808 m
612.10706 500.04813 l
S
4.9606299 w
537.84021 394.19968 m
537.84021 500.04813 l
S
1 w
0 0 0 sc
180.30365 288.33862 m
180.30365 385.97345 l
S
536.56396 288.33862 m
536.56396 385.97345 l
S
180.30365 535.02917 m
180.30365 632.664 l
S
180.30365 402.4133 m
180.30365 500.04813 l
S
165.18555 371.83591 m
378.96457 371.83591 l
S
431.88318 371.83591 m
645.66223 371.83591 l
S
431.88318 479.93976 m
645.66223 479.93976 l
S
165.18555 485.91058 m
378.96457 485.91058 l
S
165.18555 618.52649 m
378.96457 618.52649 l
S
431.88318 618.20148 m
645.66223 618.20148 l
S
2.1259842 w
0 0.23529412 1 sc
0.78227353 0 0 -1 -48.589497 652.23828 cm
483.2345 616.99658 m
497.12973 589.1615 502.1665 612.41528 509.74292 594.36261 c
514.68042 582.59778 526.33423 564.4538 534.67865 537.66968 c
536.00354 533.41693 542.22394 532.96783 543.05139 538.64966 c
543.38763 540.95868 552.90509 555.89508 556.06305 559.1076 c
565.40247 568.60864 558.17474 590.44623 567.45746 600.16785 c
571.47729 604.37781 571.17621 591.29779 583.20496 619.18408 c
S
1 w
0.051217899 0.36352152 0.21072429 sc
1 0 0 -1 -164.68555 652.23828 cm
487.68652 616.73694 m
495.12122 606.24304 497.81616 615.00983 501.86993 608.20392 c
504.51178 603.76849 510.74719 596.92816 515.21191 586.83044 c
515.92084 585.22717 519.24908 585.05786 519.69177 587.19989 c
519.8717 588.07043 524.96405 593.70148 526.65369 594.91266 c
531.65082 598.49457 527.78357 606.72742 532.75031 610.39246 c
534.90118 611.97961 534.74005 607.04846 541.17609 617.56165 c
S
476.74677 616.73694 m
484.18146 606.24304 486.8764 615.00983 490.93021 608.20392 c
493.57202 603.76849 499.80746 596.92816 504.27219 586.83044 c
504.98108 585.22717 508.30933 585.05786 508.75201 587.19989 c
508.93195 588.07043 514.02429 593.70148 515.71399 594.91266 c
520.71106 598.49457 516.84381 606.72742 521.81061 610.39246 c
523.96143 611.97961 523.80035 607.04846 530.23639 617.56165 c
S
489.79645 617.67017 m
495.72272 609.30536 497.87088 616.2934 501.1022 610.86835 c
503.20804 607.33289 508.17834 601.88037 511.73718 593.83142 c
512.30225 592.55341 514.95526 592.41846 515.30811 594.12592 c
515.45154 594.81982 519.51068 599.30835 520.85754 600.2738 c
524.84082 603.12897 521.75818 609.69141 525.71722 612.61292 c
527.43164 613.87805 527.30328 609.94733 532.43347 618.32751 c
S
525.41003 617.80298 m
531.04773 609.84546 533.09131 616.49329 536.16528 611.33234 c
538.16858 607.96906 542.89685 602.78204 546.28241 595.125 c
546.82001 593.90924 549.34375 593.78082 549.6795 595.40515 c
549.81592 596.06525 553.67743 600.33527 554.95868 601.25366 c
558.74799 603.96985 555.81549 610.21277 559.58173 612.99194 c
561.21271 614.1955 561.09058 610.45618 565.97095 618.42834 c
S
533.22412 617.80298 m
538.86182 609.84546 540.9054 616.49329 543.97937 611.33234 c
545.98267 607.96906 550.71094 602.78204 554.09656 595.125 c
554.63409 593.90924 557.1579 593.78082 557.49359 595.40515 c
557.63 596.06525 561.49152 600.33527 562.77277 601.25366 c
566.56207 603.96985 563.62958 610.21277 567.39581 612.99194 c
569.02679 614.1955 568.90466 610.45618 573.7851 618.42834 c
S
551.97797 617.80298 m
557.61566 609.84546 559.65924 616.49329 562.73322 611.33234 c
564.73651 607.96906 569.46478 602.78204 572.85034 595.125 c
573.38794 593.90924 575.91174 593.78082 576.24744 595.40515 c
576.38385 596.06525 580.24536 600.33527 581.52661 601.25366 c
585.31592 603.96985 582.38342 610.21277 586.14966 612.99194 c
587.78064 614.1955 587.65851 610.45618 592.53888 618.42834 c
S
566.04333 617.80298 m
571.68103 609.84546 573.72461 616.49329 576.79858 611.33234 c
578.80188 607.96906 583.53015 602.78204 586.91577 595.125 c
587.45331 593.90924 589.97711 593.78082 590.31281 595.40515 c
590.44922 596.06525 594.31073 600.33527 595.59204 601.25366 c
599.38129 603.96985 596.44879 610.21277 600.21503 612.99194 c
601.84601 614.1955 601.72388 610.45618 606.60431 618.42834 c
S
576.24695 617.14374 m
585.03094 604.74536 588.21497 615.10309 593.00439 607.06207 c
596.12567 601.82172 603.49274 593.73999 608.7677 581.80975 c
609.60522 579.91547 613.53748 579.71545 614.06055 582.24628 c
614.27313 583.27472 620.28967 589.92773 622.28595 591.3587 c
628.18994 595.59064 623.62085 605.31763 629.48901 609.64783 c
632.03015 611.52301 631.83984 605.6969 639.44391 618.1181 c
S
554.4538 617.13513 m
566.01239 600.8205 570.20215 614.44995 576.50446 603.86896 c
580.61163 596.97339 590.30573 586.33887 597.24689 570.6402 c
598.349 568.14758 603.52338 567.88434 604.21161 571.2146 c
604.49133 572.56793 612.40833 581.32245 615.03522 583.20538 c
622.80408 588.77411 616.79175 601.57349 624.51349 607.27155 c
627.85736 609.73901 627.60687 602.07263 637.61285 618.4173 c
S
542.50391 615.04761 m
555.08313 597.29242 559.64282 612.12537 566.50165 600.61005 c
570.97156 593.10559 581.52161 581.53198 589.07568 564.44714 c
590.27515 561.73444 595.90637 561.44794 596.6554 565.07227 c
596.95984 566.5451 605.57587 576.07263 608.43469 578.12183 c
616.88959 584.18225 610.34637 598.11188 618.74994 604.31305 c
622.38904 606.99841 622.11652 598.65509 633.00598 616.44299 c
S
534.68982 615.04761 m
547.26904 597.29242 551.82874 612.12537 558.68756 600.61005 c
563.15747 593.10559 573.70752 581.53198 581.2616 564.44714 c
582.461 561.73444 588.09229 561.44794 588.84131 565.07227 c
589.14569 566.5451 597.76178 576.07263 600.62061 578.12183 c
609.0755 584.18225 602.53229 598.11188 610.93585 604.31305 c
614.57495 606.99841 614.30237 598.65509 625.19189 616.44299 c
S
447.17191 615.04761 m
459.7511 597.29242 464.31082 612.12537 471.16965 600.61005 c
475.63953 593.10559 486.18958 581.53198 493.74368 564.44714 c
494.94312 561.73444 500.57434 561.44794 501.32339 565.07227 c
501.62778 566.5451 510.24387 576.07263 513.10272 578.12183 c
521.55756 584.18225 515.01434 598.11188 523.41791 604.31305 c
527.05701 606.99841 526.78448 598.65509 537.67395 616.44299 c
S
436.23218 615.04761 m
448.81134 597.29242 453.37106 612.12537 460.22992 600.61005 c
464.69977 593.10559 475.24985 581.53198 482.80396 564.44714 c
484.00336 561.73444 489.63461 561.44794 490.38364 565.07227 c
490.68805 566.5451 499.30411 576.07263 502.16296 578.12183 c
510.61786 584.18225 504.07465 598.11188 512.47815 604.31305 c
516.11731 606.99841 515.84473 598.65509 526.73419 616.44299 c
S
437.46991 616.97437 m
446.28067 604.53821 449.4744 614.92755 454.27847 606.86194 c
457.40927 601.60565 464.7988 593.49927 470.08984 581.53265 c
470.92996 579.63257 474.87421 579.43195 475.39886 581.97046 c
475.61206 583.00208 481.64697 589.67542 483.64935 591.11072 c
489.57135 595.35559 484.98834 605.11218 490.87436 609.45563 c
493.42328 611.33655 493.23239 605.49268 500.85965 617.95172 c
S
0 0 0 sc
537.63147 519.49811 m
537.63147 625.34656 l
S
4.2519684 w
1 0 0.35294119 sc
537.83771 528.77545 m
537.83771 616.50165 l
S
0 0 0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
237.95464 391.51447 m
(!"#$%&)[ 14.000000 14.000000 14.000000 14.000000 4.662000 0.000000 ] xS
594.56628 395.61823 m
(&)s
/F2.1[ 14 0 0 -14 0 0]sf
593.49921 386.64261 m
(!)s
/F1.1[ 14 0 0 -14 0 0]sf
237.95464 275.64703 m
('\(\)*)[ 14.000000 14.000000 14.000000 0.000000 ] xS
510.83493 275.64703 m
(+,-\)*)[ 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
237.95464 519.8421 m
(./01%2)[ 14.000000 14.000000 14.000000 14.000000 4.662000 0.000000 ] xS
587.83594 519.8421 m
(2)s
/F2.1[ 14 0 0 -14 0 0]sf
587.75439 512.09784 m
(!)s
/F1.1[ 14 0 0 -14 0 0]sf
237.95464 641.49341 m
(./34#$%2&)[ 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 4.662000 8.848000 0.000000 ] xS
587.83594 647.23828 m
(2&)[ 8.848000 0.000000 ] xS
/F2.1[ 18 0 0 -18 0 0]sf
591.18787 640.69 m
(!)s
0 0.23529412 1 sc
/F1.1[ 12 0 0 -12 0 0]sf
553.25275 540.84418 m
(5678)[ 12.000000 12.000000 12.000000 0.000000 ] xS
0.0092063379 0.43044889 0.27405041 sc
/F2.1[ 12 0 0 -12 0 0]sf
609.85797 562.52374 m
("#$"%&%)[ 6.673828 2.666016 2.666016 6.673828 6.000000 6.673828 0.000000 ] xS
1 w
0.60000002 i
0 0.23529412 1 sc
567.77435 543.87042 m
558.24176 554.20715 l
S
CM
388.45984 92.504791 m
391.54483 99.886047 l
395.56766 96.176186 l
h
388.45984 92.504791 m
f
0.25 w
1 0 0 -1 -164.68555 652.23828 cm
553.14539 559.73352 m
556.23035 552.35223 l
560.25317 556.06207 l
h
553.14539 559.73352 m
S
1 w
0.0092063379 0.43044889 0.27405041 sc
622.37646 565.6507 m
614.52948 574.12695 l
S
CM
444.73697 72.59481 m
447.83609 79.970131 l
451.85181 76.252556 l
h
444.73697 72.59481 m
f
0.25 w
1 0 0 -1 -164.68555 652.23828 cm
609.42249 579.64349 m
612.52167 572.26813 l
616.53735 575.98572 l
h
609.42249 579.64349 m
S
ep
end
%%Trailer
%%EOF
