%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A284a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 313 425
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 313 425
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: BRTNXC+Helvetica
%!FontType1-1.0: BRTNXC+Helvetica 1.0000.0.0000
14 dict begin/FontName /BRTNXC+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /period put
dup 34 /zero put
dup 35 /one put
dup 36 /two put
dup 37 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/period 1 def
/zero 2 def
/one 3 def
/two 4 def
/three 5 def
/u20B8 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C17F84342BE35467EF741E9B1F37702C9D7F24817640948A4FFFC3C11C57A75AC91D9DDE76BB3DC5BAFA8F4A81526C6DA7717B5A09975AD7BA83B3B1D6C6C215F833E3D70B1BC62F9F4CC099AE2CA179C259E5068983AB3122DA0A1477A9A3E7BD0795C299C3D72387E7924947986F61A14DA18413A1B29E45E6405AE75566674D5AC957A6DC7C9A07123188EA980148E6E8E1436987661C0A78F03CEC6748D4F98E741263D9FC00B67F7F07FD4A3102B10B18826DCBFCB3B81185AB3FFFD049393903E3DF7AA546F12B64B25DA702037480057C3C7B4E84BC9D2D135A561BC3CAF4808C389511C01100F070DE5EDB94292C6078668A648BE86EE3C6F12DB8940505F7FA7466181EB9119C8E0567FD8436B3EBD238B72E8CA447EFC93E2E8091FD659DB53B1EFE96BE81D76EE994F6A9EBEA4F584F4CF8AE1DCA13B51C7FD8F254CE9206DB123705ED0D8D2EF70012B226E5776457842E6BEE31D84F2DB77B51FA38FEDECB891638A4F7432EE086A7B8AED742BE687ED26DF0FBD648BB3AD230FF615901B40FFDEF05F939D1890FADA1215BDD64C363B21200755A0B82171FBF2975477D6E8A826410A00D06C1D6BF8CB3CD2CF04480DCBA43B191ABE7E3F9705965879E16998ECD83F0A0C8F0BF375C2452B6FC694F2A1870B7CFFF6272743F6A5019BFB3A24D804A193994CE8B2AD3F1C6BCB5ED56F774D403399B16C44732163E38A34F40
C6C3E7336F08C5E0D27CACCFE83DCF02EDD05D930C56FED62FFF0812AFF51955278A3F8AA252FC94B48C39BCFBF5CBB8D777C748606CC406EEC9C2CBC14CD324D1FEF3CA1C7AABBAE5243ABD4B1013653C51BB94790B976156A7284AF2DCE474A9A8B85E93E9626721675F97003A10F1614DAD2A1937F6F2FECE68123B87D74A94EBC404192C35E8F566ACC432A112C255A493EFF44DEAFC1ECD2F2F54DBDD11B6DE40585FDB458FB2BB4761A59632890753632C23FF4C1D12B6CF360EFD3EB9142E2CA25D2AFA9F7EC5A7015CCF799A6A808DE46D204B527AC28C5CCA8C42CEB4D3BE8FE6FE9FCEF0477CAD596D6C4D974335D94177D207D680D390D39B9C2409CF5C27895668AB9411030AAD37697309622522703470B1147ECBCFBB13CBC549DA63246401AD94C7960BFE1302797EB4DB1CB8FB8ED0CC5FB870F8DF28460D8BB53CDCCB56E35055A12815C89FFAE60B26784CEC87C5B26D20B4483924C1D37E9923B2C43E6E7E141BD5972BEE8870B33BCA985F749348621EB8F9339F10BA2DB9315D92E959F4DFA6C05D5D2C2ED6935443DE7CAB73DDD4F26ADBE1B7B5E16A3A192493A959F08AA4006DE2CCB7F3F8521E8196D9183641552EF6D9F7F20B36DD226D5B4A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/BRTNXC+Helvetica cguidfix
/F1.1/BRTNXC+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1882353 0.1882353 0.1882353 sc
q
0 0 312.71613 424.39746 rc
54.750988 396.20496 m
61.092094 396.20496 l
61.092094 278.8222 l
70.064339 278.8222 l
57.921543 261.13745 l
45.778744 278.8222 l
54.750988 278.8222 l
h
54.750988 396.20496 m
f
2 J
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
300.90964 345.98541 m
307.25073 345.98541 l
307.25073 463.36819 l
316.22299 463.36819 l
304.08017 481.05292 l
291.93738 463.36819 l
300.90964 463.36819 l
h
300.90964 345.98541 m
S
0.1882353 0.1882353 0.1882353 sc
CM
54.217793 87.218636 m
61.62529 87.218636 l
61.62529 17.029371 l
70.324234 17.029371 l
57.921543 0.5 l
45.518848 17.029371 l
54.217793 17.029371 l
h
54.217793 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
300.37643 654.97174 m
307.78394 654.97174 l
307.78394 725.16101 l
316.48288 725.16101 l
304.08017 741.69037 l
291.67749 725.16101 l
300.37643 725.16101 l
h
300.37643 654.97174 m
S
Q
0.24018276 w
2 M
1 1 1 sc
q
4.5256128 397.52615 m
6.9171162 397.52615 l
6.9171162 21.156654 l
10.942729 21.156654 l
5.7213645 2.052794 l
0.5 21.156654 l
4.5256128 21.156654 l
h
4.5256128 397.52615 m
W
0 0 312.71613 424.39746 rc
1 0 0 -1 -246.15863 742.19037 cm
246.71085 344.66422 m
246.71085 740.13757 l
S
246.81528 344.66422 m
246.81528 740.13757 l
S
246.91971 344.66422 m
246.91971 740.13757 l
S
247.02412 344.66422 m
247.02412 740.13757 l
S
247.12856 344.66422 m
247.12856 740.13757 l
S
247.23299 344.66422 m
247.23299 740.13757 l
S
247.33742 344.66422 m
247.33742 740.13757 l
S
247.44183 344.66422 m
247.44183 740.13757 l
S
247.54626 344.66422 m
247.54626 740.13757 l
S
247.6507 344.66422 m
247.6507 740.13757 l
S
247.75513 344.66422 m
247.75513 740.13757 l
S
247.85954 344.66422 m
247.85954 740.13757 l
S
247.96397 344.66422 m
247.96397 740.13757 l
S
248.06841 344.66422 m
248.06841 740.13757 l
S
248.17284 344.66422 m
248.17284 740.13757 l
S
248.27725 344.66422 m
248.27725 740.13757 l
S
248.38168 344.66422 m
248.38168 740.13757 l
S
248.48611 344.66422 m
248.48611 740.13757 l
S
248.59055 344.66422 m
248.59055 740.13757 l
S
248.69496 344.66422 m
248.69496 740.13757 l
S
248.79939 344.66422 m
248.79939 740.13757 l
S
248.90382 344.66422 m
248.90382 740.13757 l
S
249.00826 344.66422 m
249.00826 740.13757 l
S
249.11267 344.66422 m
249.11267 740.13757 l
S
249.2171 344.66422 m
249.2171 740.13757 l
S
249.32153 344.66422 m
249.32153 740.13757 l
S
249.42596 344.66422 m
249.42596 740.13757 l
S
249.53038 344.66422 m
249.53038 740.13757 l
S
249.63481 344.66422 m
249.63481 740.13757 l
S
249.73924 344.66422 m
249.73924 740.13757 l
S
249.84367 344.66422 m
249.84367 740.13757 l
S
249.94809 344.66422 m
249.94809 740.13757 l
S
250.05252 344.66422 m
250.05252 740.13757 l
S
250.15695 344.66422 m
250.15695 740.13757 l
S
250.26138 344.66422 m
250.26138 740.13757 l
S
250.3658 344.66422 m
250.3658 740.13757 l
S
250.47023 344.66422 m
250.47023 740.13757 l
S
250.57466 344.66422 m
250.57466 740.13757 l
S
250.67909 344.66422 m
250.67909 740.13757 l
S
250.78351 344.66422 m
250.78351 740.13757 l
S
250.88794 344.66422 m
250.88794 740.13757 l
S
250.99237 344.66422 m
250.99237 740.13757 l
S
251.0968 344.66422 m
251.0968 740.13757 l
S
251.20122 344.66422 m
251.20122 740.13757 l
S
251.30565 344.66422 m
251.30565 740.13757 l
S
251.41008 344.66422 m
251.41008 740.13757 l
S
251.51451 344.66422 m
251.51451 740.13757 l
S
251.61893 344.66422 m
251.61893 740.13757 l
S
251.72336 344.66422 m
251.72336 740.13757 l
S
251.82779 344.66422 m
251.82779 740.13757 l
S
251.93222 344.66422 m
251.93222 740.13757 l
S
252.03664 344.66422 m
252.03664 740.13757 l
S
252.14107 344.66422 m
252.14107 740.13757 l
S
252.2455 344.66422 m
252.2455 740.13757 l
S
252.34993 344.66422 m
252.34993 740.13757 l
S
252.45435 344.66422 m
252.45435 740.13757 l
S
252.55878 344.66422 m
252.55878 740.13757 l
S
252.66321 344.66422 m
252.66321 740.13757 l
S
252.76764 344.66422 m
252.76764 740.13757 l
S
252.87206 344.66422 m
252.87206 740.13757 l
S
252.97649 344.66422 m
252.97649 740.13757 l
S
253.08092 344.66422 m
253.08092 740.13757 l
S
253.18535 344.66422 m
253.18535 740.13757 l
S
253.28976 344.66422 m
253.28976 740.13757 l
S
253.3942 344.66422 m
253.3942 740.13757 l
S
253.49863 344.66422 m
253.49863 740.13757 l
S
253.60306 344.66422 m
253.60306 740.13757 l
S
253.70747 344.66422 m
253.70747 740.13757 l
S
253.8119 344.66422 m
253.8119 740.13757 l
S
253.91634 344.66422 m
253.91634 740.13757 l
S
254.02077 344.66422 m
254.02077 740.13757 l
S
254.12518 344.66422 m
254.12518 740.13757 l
S
254.22961 344.66422 m
254.22961 740.13757 l
S
254.33405 344.66422 m
254.33405 740.13757 l
S
254.43848 344.66422 m
254.43848 740.13757 l
S
254.54289 344.66422 m
254.54289 740.13757 l
S
254.64732 344.66422 m
254.64732 740.13757 l
S
254.75175 344.66422 m
254.75175 740.13757 l
S
254.85617 344.66422 m
254.85617 740.13757 l
S
254.9606 344.66422 m
254.9606 740.13757 l
S
255.06503 344.66422 m
255.06503 740.13757 l
S
255.16946 344.66422 m
255.16946 740.13757 l
S
255.27388 344.66422 m
255.27388 740.13757 l
S
255.37831 344.66422 m
255.37831 740.13757 l
S
255.48274 344.66422 m
255.48274 740.13757 l
S
255.58717 344.66422 m
255.58717 740.13757 l
S
255.69159 344.66422 m
255.69159 740.13757 l
S
255.79602 344.66422 m
255.79602 740.13757 l
S
255.90045 344.66422 m
255.90045 740.13757 l
S
256.00488 344.66422 m
256.00488 740.13757 l
S
256.10931 344.66422 m
256.10931 740.13757 l
S
256.21375 344.66422 m
256.21375 740.13757 l
S
256.31815 344.66422 m
256.31815 740.13757 l
S
256.42258 344.66422 m
256.42258 740.13757 l
S
256.52701 344.66422 m
256.52701 740.13757 l
S
256.63144 344.66422 m
256.63144 740.13757 l
S
256.73587 344.66422 m
256.73587 740.13757 l
S
256.8403 344.66422 m
256.8403 740.13757 l
S
256.94473 344.66422 m
256.94473 740.13757 l
S
257.04916 344.66422 m
257.04916 740.13757 l
S
Q
1 w
2 J
10 M
q
0 0 312.71613 424.39746 rc
1 0 0 -1 -246.15863 742.19037 cm
250.68425 344.66422 m
253.07574 344.66422 l
253.07574 721.03375 l
257.10138 721.03375 l
251.88 740.13757 l
246.65863 721.03375 l
250.68425 721.03375 l
h
250.68425 344.66422 m
S
0.1882353 0.1882353 0.1882353 sc
CM
94.425987 396.20496 m
100.7671 396.20496 l
100.7671 278.8222 l
109.73934 278.8222 l
97.596542 261.13745 l
85.453743 278.8222 l
94.425987 278.8222 l
h
94.425987 396.20496 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
340.58463 345.98541 m
346.92572 345.98541 l
346.92572 463.36819 l
355.89798 463.36819 l
343.75519 481.05292 l
331.61237 463.36819 l
340.58463 463.36819 l
h
340.58463 345.98541 m
S
1 0 0.35294119 sc
CM
94.389969 254.90637 m
100.80312 254.90637 l
100.80312 193.6255 l
108.33434 193.6255 l
97.596542 179.19405 l
86.858742 193.6255 l
94.389969 193.6255 l
h
94.389969 254.90637 m
f
0.9995597 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
340.54861 487.284 m
346.96176 487.284 l
346.96176 548.56488 l
354.49298 548.56488 l
343.75519 562.99634 l
333.0174 548.56488 l
340.54861 548.56488 l
h
340.54861 487.284 m
S
0.1882353 0.1882353 0.1882353 sc
CM
93.892792 87.218636 m
101.30029 87.218636 l
101.30029 17.029371 l
109.99924 17.029371 l
97.596542 0.5 l
85.193848 17.029371 l
93.892792 17.029371 l
h
93.892792 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
340.05142 654.97174 m
347.45892 654.97174 l
347.45892 725.16101 l
356.15787 725.16101 l
343.75519 741.69037 l
331.35248 725.16101 l
340.05142 725.16101 l
h
340.05142 654.97174 m
S
0.1882353 0.1882353 0.1882353 sc
CM
134.10098 396.20496 m
140.44209 396.20496 l
140.44209 278.8222 l
149.41434 278.8222 l
137.27155 261.13745 l
125.12875 278.8222 l
134.10098 278.8222 l
h
134.10098 396.20496 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
380.25961 345.98541 m
386.60074 345.98541 l
386.60074 463.36819 l
395.57297 463.36819 l
383.43018 481.05292 l
371.28738 463.36819 l
380.25961 463.36819 l
h
380.25961 345.98541 m
S
0.1882353 0.1882353 0.1882353 sc
CM
133.56779 87.218636 m
140.9753 87.218636 l
140.9753 17.029371 l
149.67424 17.029371 l
137.27155 0.5 l
124.86885 17.029371 l
133.56779 17.029371 l
h
133.56779 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
379.72644 654.97174 m
387.13394 654.97174 l
387.13394 725.16101 l
395.83289 725.16101 l
383.43018 741.69037 l
371.0275 725.16101 l
379.72644 725.16101 l
h
379.72644 654.97174 m
S
0.1882353 0.1882353 0.1882353 sc
CM
173.77599 396.20496 m
180.1171 396.20496 l
180.1171 278.8222 l
189.08934 278.8222 l
176.94655 261.13745 l
164.80374 278.8222 l
173.77599 278.8222 l
h
173.77599 396.20496 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
419.93463 345.98541 m
426.27573 345.98541 l
426.27573 463.36819 l
435.24799 463.36819 l
423.10516 481.05292 l
410.96237 463.36819 l
419.93463 463.36819 l
h
419.93463 345.98541 m
S
1 0 0.35294119 sc
CM
173.73997 254.90637 m
180.15311 254.90637 l
180.15311 193.6255 l
187.68434 193.6255 l
176.94655 179.19405 l
166.20874 193.6255 l
173.73997 193.6255 l
h
173.73997 254.90637 m
f
0.9995597 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
419.89862 487.284 m
426.31174 487.284 l
426.31174 548.56488 l
433.84299 548.56488 l
423.10516 562.99634 l
412.36737 548.56488 l
419.89862 548.56488 l
h
419.89862 487.284 m
S
0.1882353 0.1882353 0.1882353 sc
CM
173.2428 87.218636 m
180.6503 87.218636 l
180.6503 17.029371 l
189.34924 17.029371 l
176.94655 0.5 l
164.54385 17.029371 l
173.2428 17.029371 l
h
173.2428 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
419.40143 654.97174 m
426.80893 654.97174 l
426.80893 725.16101 l
435.50787 725.16101 l
423.10516 741.69037 l
410.70248 725.16101 l
419.40143 725.16101 l
h
419.40143 654.97174 m
S
0.1882353 0.1882353 0.1882353 sc
CM
253.12599 396.20496 m
259.4671 396.20496 l
259.4671 278.8222 l
268.43933 278.8222 l
256.29654 261.13745 l
244.15375 278.8222 l
253.12599 278.8222 l
h
253.12599 396.20496 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
499.28464 345.98541 m
505.62573 345.98541 l
505.62573 463.36819 l
514.59796 463.36819 l
502.45517 481.05292 l
490.31238 463.36819 l
499.28464 463.36819 l
h
499.28464 345.98541 m
S
1 0 0.35294119 sc
CM
253.08997 254.90637 m
259.50311 254.90637 l
259.50311 193.6255 l
267.03433 193.6255 l
256.29654 179.19405 l
245.55875 193.6255 l
253.08997 193.6255 l
h
253.08997 254.90637 m
f
0.9995597 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
499.2486 487.284 m
505.66174 487.284 l
505.66174 548.56488 l
513.19299 548.56488 l
502.45517 562.99634 l
491.71738 548.56488 l
499.2486 548.56488 l
h
499.2486 487.284 m
S
0.1882353 0.1882353 0.1882353 sc
CM
252.59279 87.218636 m
260.00031 87.218636 l
260.00031 17.029371 l
268.69925 17.029371 l
256.29654 0.5 l
243.89384 17.029371 l
252.59279 17.029371 l
h
252.59279 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
498.75143 654.97174 m
506.15894 654.97174 l
506.15894 725.16101 l
514.85785 725.16101 l
502.45517 741.69037 l
490.05249 725.16101 l
498.75143 725.16101 l
h
498.75143 654.97174 m
S
0.1882353 0.1882353 0.1882353 sc
CM
292.80099 396.20496 m
299.14209 396.20496 l
299.14209 278.8222 l
308.11435 278.8222 l
295.97156 261.13745 l
283.82874 278.8222 l
292.80099 278.8222 l
h
292.80099 396.20496 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
538.95966 345.98541 m
545.30072 345.98541 l
545.30072 463.36819 l
554.27295 463.36819 l
542.13019 481.05292 l
529.98737 463.36819 l
538.95966 463.36819 l
h
538.95966 345.98541 m
S
0.1882353 0.1882353 0.1882353 sc
CM
292.26779 87.218636 m
299.67529 87.218636 l
299.67529 17.029371 l
308.37424 17.029371 l
295.97156 0.5 l
283.56885 17.029371 l
292.26779 17.029371 l
h
292.26779 87.218636 m
f
0 0 0 sc
1 0 0 -1 -246.15863 742.19037 cm
538.42645 654.97174 m
545.83392 654.97174 l
545.83392 725.16101 l
554.5329 725.16101 l
542.13019 741.69037 l
529.72748 725.16101 l
538.42645 725.16101 l
h
538.42645 654.97174 m
S
0 i
/F1.1[ 72 0 0 -72 0 0]sf
432.28 436.64676 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
432.28 523.93176 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
432.28 691.57404 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
0.60000002 i
0.088581316 0.75294119 0 sc
CM
54.547733 170.59433 m
61.172115 170.59433 l
61.172115 109.88882 l
68.951416 109.88882 l
57.859924 95.592842 l
46.768433 109.88882 l
54.547733 109.88882 l
h
54.547733 170.59433 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -246.15863 742.19037 cm
300.70636 571.59607 m
307.33075 571.59607 l
307.33075 632.30157 l
315.11005 632.30157 l
304.01855 646.59753 l
292.92706 632.30157 l
300.70636 632.30157 l
h
300.70636 571.59607 m
S
0.088581316 0.75294119 0 sc
CM
133.89774 170.59433 m
140.52211 170.59433 l
140.52211 109.88882 l
148.30142 109.88882 l
137.20993 95.592842 l
126.11843 109.88882 l
133.89774 109.88882 l
h
133.89774 170.59433 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -246.15863 742.19037 cm
380.05637 571.59607 m
386.68076 571.59607 l
386.68076 632.30157 l
394.46005 632.30157 l
383.36856 646.59753 l
372.27707 632.30157 l
380.05637 632.30157 l
h
380.05637 571.59607 m
S
0.088581316 0.75294119 0 sc
CM
292.59772 170.59433 m
299.22211 170.59433 l
299.22211 109.88882 l
307.0014 109.88882 l
295.90991 95.592842 l
284.81842 109.88882 l
292.59772 109.88882 l
h
292.59772 170.59433 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -246.15863 742.19037 cm
538.75635 571.59607 m
545.38074 571.59607 l
545.38074 632.30157 l
553.16003 632.30157 l
542.06854 646.59753 l
530.97705 632.30157 l
538.75635 632.30157 l
h
538.75635 571.59607 m
S
0 0 0 sc
0 i
432.21835 607.24927 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
432.21835 690.56677 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
/F1.1[ 18 0 0 -18 0 0]sf
299.82886 335.79291 m
(")s
338.22427 335.79291 m
(#)s
380.13818 335.79291 m
($)s
490.83655 335.79291 m
(%")[ 10.010742 0.000000 ] xS
420.29282 335.79291 m
(%)s
532.72589 335.79291 m
(%#)[ 10.010742 0.000000 ] xS
ep
end
%%Trailer
%%EOF
