%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 328 236
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 328 236
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: DFTYLE+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 9/22/16% Copyright 2016 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid15 putdup 3 /cid36 putdup 4 /cid37 putdup 5 /cid42 putdup 6 /cid53 putdup 7 /cid68 putdup 8 /cid69 putdup 9 /cid72 putdup 10 /cid75 putdup 11 /cid76 putdup 12 /cid81 putdup 13 /cid82 putdup 14 /cid85 putdup 15 /cid86 putdup 16 /cid87 putdup 17 /cid92 putdup 18 /cid394 putdup 19 /cid1285 putdup 20 /cid1372 putdup 21 /cid1442 putdup 22 /cid1561 putdup 23 /cid1567 putdup 24 /cid1601 putdup 25 /cid1612 putdup 26 /cid2562 putdup 27 /cid2688 putdup 28 /cid2903 putdup 29 /cid3186 putdup 30 /cid3224 putdup 31 /cid3352 putdup 32 /cid3357 putdup 33 /cid3481 putdup 34 /cid3524 putdup 35 /cid3794 putdup 36 /cid4190 putdup 37 /cid4214 putdup 38 /cid4457 putdup 39 /cid4913 putdup 40 /cid5041 putdup 41 /cid5424 putdup 42 /cid5547 putdup 43 /cid6516 putdup 44 /cid6888 putdup 45 /cid6924 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6B3274E3BA4E2F21FA7ED45D92AB714FB0EB4CD121BEB52A3DAA5E56E62DCFB82C50EC9E7D2DD9FF992DC6E0083FA209B4318C274AA862B93694C1C919F818E3FC8002A00B86ADD723629F2E802299F67905A8AFA0C597D037A50F13F6E29756098511C848BEF8AC77069D6422B916BFAB106E9E54F59F81A74BD0D34E1B0CC83F112E92DFE4319A3755B422336E78CCE4A0173D0BC7399A5DB05FEDDC58B9EACCD2707D5885D127FBE7471777BFC403EAB5A66888CCC227FD105C44108A88A61839DD7E88BD2B634ED5B5E1B91E7C9FDAEA9DDD7994C11CE9499923540869278F6FF8E1A5CBE5633C644E6AC13BB34BB3791D66E108444ED58CB96B16030EFC0D987B20BD0A814CCF60671A264319AED4AC9446BE09C98CD15968EAB93368398518568CB4E8CFD3A1B17B4DCA55D01135D0962F694F72228FA3591FF05ACFD6F530923276C1F8D7B2147B02C168B91C2D33480BB7597F174CC0EE9FCBF7B174A961E1AB35BD8CC49951F00D8EC0D01AD051B2A579A9AE77969357AD2413003FB48F3806AF848F70CDE8F0C6F56E99E187C7D077DF9170D0C266F69C4199B2323E8A7492295FA5E0C17CE305C89682438C326C93FC84D58281A11E604ABE761C928E002C62D49782E5F99E196E7C76F78DA94C08665CA4791C5CAD5D6C71A8258F370887ED8611149B8C587DBC74A99E5D0AB11AA4AE125FE4B80260FC3EAFBDDF0FC73408A2C3ACDCE96E32F88080F8F3C4DBC9BDC1DA47A9318D2AFE644CBB65423462534976EBDA993BA7F22534A22EDF421832DA4CDA77AF970B941EAF46270EB1D177FC373513D80945945FEBA865AF789B847DEDA4046648B10334AB9E60DA5705BF947C2865A34D9543F3D67914E942376894A97BF812A28813BA8D3D1903D7050905184A2D0D3EF240C4CA1ED1FC7F097F5220C76723B71258DE4398B46B786AB253BEE5AE1F41CF19ADC457758015A39D0D6BDCDECF52D6B7686CB34C1C7123121A49090835E95377F5275213837B85D794C7317F501EDA4C797BA15503CF1AFB4773170E6721F31A7E2672F735645D68B640E47495849713571D2897EA60BD0BFD1554B7933F5BAD4B2E70228601FB411D5C7E0AF1893EE9DAAAE01DD438FE7363FF4DDE4DEB84B215667C81E0C1F9D748E677EB5B0E9BD6B9C46615D7C7F2AD800D5217D00595073FFED48466FE280FA505BD0A1ABC0270A7E10E50960296BDFE46D107667D53696FE7FE40F683A753872DD77683D31847DADEA39B89989A3926AD164971B12BE177A24648B61763407BED3EFBF8180E155CF20EA5E10769FABDF1F1F022B007D05688677E886AB02E0AE77719CEB03D530155BBD1D07F3A3FB8159D8B48467F50FB51EF55B67947CB31336E00CAEB767D257F840459BF309764D19938265E4472747DA7D93986549766D299E0BFFBBF1FB7F6DC65E24389B8D1AA694275A33FE0C77AF3F6EB229471DCB017470E9D9B6B25CABFF3C96AFB649D9F65CCD9492A51812ED2C21FCF8B9A1276BCEECD36F8FC81C85D821326BD1BC5BCB90037069FF55E107E8E59814A640B58B1197C9133C2DFEE000F5281F5BD2072DB050772112A25AF16F601F2E138D3058D8EBC9E33F45CE87B3024FCB7547D4FEFC048116B4A1AC792FAC560014C3A772EA961B81421DCF6EC146A1FA1996A07A59AC12866C8F6BE66BBA42AB7024E781E6EDA62995E5A56360D4A9289D876087065761ADB054B84F094CB4E24D18BD80680564EF45A95D04278DE8F372FFB5B8F5A8C1384A91EE38F927FF3344F064ED50C89AB879A51F3370231D9EF10CE8B437CC5399B7C78529745F1824F3FCB2C89967086654BCE0D5498270DF4AA7EB93DDC7C8E213E18F9EC82721BEDBFBB398A01082BBC6FEDB5F62C2488AE40800C1B58F8B73F09000271EF4B8F50D831E9B01D55C97445D8919C81EFE9055742F1A7FAE66FCCF8AE794B156F8AF672EECC8C7EC5E1FEADC692B9920FAB967600A4E4396E213969904E494A1F3861C419A334FD0D2BF90E5A4DCF9CA8B4F9443ADF29EEBC1B4E01E60115C608A85CDDE7144DCFBA4571DD7A2EA4C0EF95BB49203194AAE6A3A62D68F4E43CE4DADFCB1B2FA2EC3E48F956CADFD57A3435D9AA906CB189BC3DE0C25455CFAFD15BB2EDC35A4F470F94F247DB7CC765CB4244719FC0DCF04B47EE96B7CAA84736542DFF431B8D13E3D79F2B631E16C67CB77BF740529E7EECCC5664888F261A3524EA3A00401290C68441A13688145521E21CC47601C1075F277E7A3AB0C69344C5D499D118E89859D220A3039EE006ADD0C17CD161EA94106E3595549C0172F4A4A0E4A850D25EB81C46BC1B05DFB41FE4EAB4607812A99AD7D3B1D6D191B3E73A15AC956D8A886BFDFB0756A80B4E4183542DE4DDFFDD904687C53CF69C1FA282A9791B5C94D47503DFA7DD4D8637E8AD6962C317C1306DCAFC0CBA5948D4B721BF7C77B5B54A20764B7A3185B0ED711ED4D0437C4557D019222DBF134BDE879BD6C97DED1E21AD31984DBEA45BF04348030E0D20C859D3D9ADD312E942DE20783D5E040A329569447A1B16610253CF9A32310F336CEE28DED4BB56FFA383DDEA267E479A0C9CD631301D6FA30B1065532CAA0F6243A58A499836231941579E07253F149EFF8CB299F427D1F5FE49E153CEC9CB36C42CD8E5AC0A0CC3B49610EA8CEF4B347B1F3619049925FD26C4A08C27C2627D2B087AF92EAE6B14C82FC946A52394006393CFF81996D58749C5BB6985A65EE7871BAC3163FADDF712F9D7CB056396523F95700DAB43A4FD4723F03645B53D7A799D6D304D537DFDEAB03839B320F584D3725AF0147DA6AB1DBCB95E0E2FE9826BD26C76FAE4E1A3A3D7917FEAC2B32007932D1BC31C986524BA12C1C714BA31046A6BF34D85E68028BA34EE68651DB97AE27C8DBB9D3CA6D4FF132B44295FC63E5803388F97AE8DC81463B66BE800BC1315A46482562EEE797F43C9519549E0B0BAAC84E5C022D73A0A4A6D032F06F92E8027F1842E386EB4B77325C25844F7B013D9B83BA91C2B1EA431248B286D52FFAEB831E1807C1F0CAED7C3B403D33346CA6ABA8D12BF2F043C768DE914DD196E9D1DBE856F92BA49FE4469BE863D40C274836143026C1E20F21271881831CF747314675C9164FC7B096C0D535995AB82410961E6D0B9D7B55B990F464678859A030787645606974E8F19F31C994FB6C778B8A2BAD2350B723F0E6B037A3FFA29EF4BEB690FFEC1D9475275C27ACF0F2061D4AEB909980E5CA38D3A6C9B4340338DEA1CFACD1EB78565452D61291B3E45351C7ABBA53D54CE2F218B5EE4463C94EB05FE6F0107B9653A6B142AD46EA7ABA1FF8750514AAEB611466290715CBB3891F8304C6266821E052F2506492BA2118366EBFCB8E929FD1F87B375F570B82ADFAEE59383E1D5FB4C8A0F5616402FFA5778D14B4C4BA3D894EC2C9EA2776E1EEB1A02EF3C9E75723EE615530BA31C9E73B10D6C2C18DA0E60B3B2EB2F58D0C5F2F26376844D64C3DA0889F7B85BD2FA48F110D259C1A183C80B7C1CD53124D1D438EC8F82FB42CB07F33A27C78DCBAD9FE6A99271A0EF43649369F1FA18EF831B2FB069C0A9C3227B11A9E1674B3751B3BB8566DBD2F7BC7F7A366762BA0B50ECFDA7CDC19962984EE9576168F47CF0892D11F5DC24859E38BB7D1F5475794F206DABADD95BA6CCFFD0960CF4295F3C5C6CE775ACCADD6952CF4E080D3EABAE036E9E76CEF3C7D8F3DDA3CF5F15E41B954C758258768E7A0DEC2B1BEC45CD424AE83ABC1E634260CD1951601CAC8F4EB2F16F07C55C1891BE906B3054203859C657A989E52FDC89E74CCD4CA680695FD9A40F9BEB376E7A9B1EB8EA03EF9A2E6A44EB312AE0DC37F5561C3D3FD0102F6DAE19AB5553E13EEC9F8627F71900AC7BF70832E640CBCC1075596A54ECB51062F1DD32B49E34F18111EDAE825C1DD2C80F973ADB7E30F426FDEB3712EC04216C5A6C24EFEA88CA984D01419C06C26287E6ACED43124B42706F6394E66BD4B2947CE6F1E26D81DA04C942D5347F9D287FE1BAD2DA67498429310D98975DCB8050EE6392EF372F1E7244C307884A5E820C80C6906861CC1358962E84B5CF2A7527DA6FC8E2E93378996E2A1F4235A7D9791762653C167D5B5D3B77838F0930CC2E373A651ABF1A8198F88E95270B9E1E404570FCF695CB60B6197DE4B728659F7011DFC613CE95AA47F00EBD6770B8BA4CCB44291F9EF6ABF130D603AD775C8D99B9CC932427B80B3685FBAE40E4C142F909D2F082BB297F6A0A3F0A0D5EC89B4AD3A50730F4BB4211096F14ED7587FC4DE17719B8426CCC3ECC3422ACE31C004F7D302BBEA57D753F0C2ED12594D76ABEA6E9E466B66C277FAF19C2D91FECC239B4FC154B9338FC26335FE92541899356BAF075E1B97C04C56A495443E34A8F7002453699548992C65226C9F7CD4C26C1F850CF68CE7BF0B188FFD5FE7215B79033E3C4A394C7DB404E1C768D74FAAAABBF7472B7008CF986A0AA2584F8E5CFF741B50C13F3DFE49593DCADFC22645D1F8D245D47BADBDC79AA6276DD6357EBCB88B0A40FD13B3FA3F7A7E68515D23173CC105632FF5155291B5C6247AB1FCE35DB31378AF136CDD2EA95FAE8E7CE43104BAF158F9174752B179131E94E712E9E2CD3F76A3C78C6143E27A4B2107015438943D99FD31ECFCC486A57E9B1A71BAAA0CA8926D946995144B7D51EF9DCDB39824C5BA290B5A12D3C17B1E3519CC1EF354F4E4BEFF290A242F791BD1DCB8994FB0E3B8C4E28E0CBB9DF962F17624B48AA427882CCFA7E27E15791610503DA241177DF3E6DA8223876C7FE504B3DBEDB2D8A603B1F7524482F631330CE69FC8B120AA8AD23EFBC00A074FE43D29B0E35C860BE78E4D26F810EB5AD9B58B14E78301965121F20D3ED8850DB572EB7851FB55D28C6018D9650A3B4C6C882F8137C8F4AB758B47D648E39EEE26EDA743CE5D7BCA6DA32234FCD4FCC8DE768E680B9A31C1C15710760ED2526C374DA2184D8E09C251F74C7A204EBDBA76C2CCFEA8C787490F3DE741BD2ED2496B1DC762ABEEC378F369A9181C2A438B3FEF712EE4E4C662B4FD189CDE80C92627D6E5ED5015307B3EFE9A427390D807CAE7AAE77183C14FA5BF60C8171306B84390327BA7A406315394CF3C4F2812BEA338E61A1937A10F655D979D47B70D9E5CCF44B2E62CB4CE39652D0EB1644F4D09B2284D3C00474C87ECE97D3BFEDAF0445E39F9D68C8DC9D53C84B7C1D9810886ECFAF9C6960FB03ED4CFEB43721E011A38378C29ADE1990E16E463CB4E099F804AA99DE693D9F15D5E083086017E558D5422EF2C4C42CF196FE858C1C137B0C2297301167A2A455828906025DFB86F177A9AE015B69E623505EB930573DAA11A489B87ABC4B9C0DBD89176DFBC5630CF89679C7A681A509FAA48CD8E9A48A3EC0770589B1B72A3D02F597FC8FE74A98ADD020B54AF7A3B4B9A0904CE21F82EF2923E2D0AA14507977F17579C6116DC227F71DF1091290E84AD3CA82E4831AE6301352571758AFA2B81DAF1F1B0B87BF0A0BBBEBB717596669B6108DBFDFCB5B11E608D5D8A891B46B63151B2A8B2246FD323BA32AA2F48B58214030AAFF5FAA628B6917F966CF8EC6D7DDAFE84B19D4DCDC2F0A01F9BFDC198E8A58B65B4127AC1C43D25EBAD14A24A5D5D4222086D973D5887DD24C81AD53818A48A0BB9112286CBF5552E34B0AC845F26AA8A6F753AF50FC52569C88B7D172027A0E837B169298608931E85BB56104E11F5BA9AEA8765184D722C7EF3296526AC4440D80465DB8E761A506DC2A0195E511C585F85F1607C9D80EBCE7647D43363F309B68154AC5E7DE6A78D830D4B79C95DB41416C33AC17E5041568F4DC6BCDF2B800D482D9DD893AFA1AED3A0916FB91840297BBC3D0537FA0A525863FAFE879EEDF5AB15A63030F938B6B6C02AD9516787CD19BCA49830A1F26E4EAE2D1C290B5DA6460B3559F7386623A812CA625263E55FFF083740C18191FD17FE192F54CE07C2473B53C903AE0002DA2B114C2E04AD88D82C984D17C82F6EADA2429212B901B3C7DE251669D5C1D6154D019E994AA60E5BDFEB0DFEA47344A8D53FC492B481505A002C563729A3602F06733616BF612EEEBF52D117B21399E5FE9B8656EC27E47E9CE10AFD437746C72C33750BA360A7EC8B8F79A5FE6BB1E96202BE85B3B5885F946C1965339287E8C3A11B3A86481EB576F747C88ADDC479570E5F00920B25EAD7BAF2E651A0008AEA706D15CC397586A3A2525C0611CB6C788A2D7B2A1A29C7DD8CC6D5DBD77004BF6A377EB9252C66101A1539ECA8DB140B5D48D6A3B81F37EA57D38D2A0A97EA24AD504A4E8CDCC30E698CA756E6F8D8A031877DE94C64E095A84650DFCC220E093D7CE0B1883A955DC05A69F804C0B83518DA9581E99002E8E507D1FC78D1E4A6EB54ABEADD4ADDA46AA5A3BC0A14466F82979C703A43759EEE53872B2E42F3A3DAEC41A6BCA86E9C60DE4E64DCA320035857062718C98E98D423BD313CEC9FDCE1F2B7A9A5A828A0D87A964F814CF12D16E1EA10B97514ADB44E66050E454B1AD11D3063E56C8280A40F86DAEC9D0A0B5B8790088218F5815E8E8127F9183F3C8B0509D86B9764C46921195DD69D2ABF1348980C7C6DCED448D951466F52630D22B4D508B0BC6B5ECCC9120E31003336FFDC2B03FD4500AE46BC314D4A9715BAAAF24CCBF0D92F4138F8CE20928675A978A51EAA220E774E692E510DE39CE053E62D538D0EAF01F09EEF286CAF4567FB5C791547F5425221C73D5011E2F15F7DAFF309FDB87BC02C494F0FF2D74E24D6F5C91D0F96F77AF1E17719C9FEEC94CC7103639E88218B662FC826BE4540DEA638762BED04CCB4E389B8531FF6AFDC1B73E6809BBCDDAB42A2E71C1E392A4B520F1284E1B7CA0E3965AD7C2B6FEDA7D28C0D8FCABFD2574883B243A76D68F1A8A8AD87C1307BC1D00E7D356618D06EF0B72F285501DBF44AF2F04A728FC6D3BC9C7A6F069BD50C2EA09DDA6CE0D7C79BAA66ACE52D2CEA5F1DD6FBA5C648B8726A853B170725F3ABDE77AEA22840AA7A21BA80176F5D92CCF2A03383010CB572FFE8E596CB2D1DE42CC385192F539103ACD46135541E535181E40045C368F766B42F515B338EBBCC76CAAF947145E64E6A0D70112290DADE6FB7D264B7453479C8A45421DA7AF95B76CDA81A61A25EDA58D3149C6BC8B0055ED078A20580DEE8C6DA5C9815FC3F8F7DEC84530D394228F11EF2C3BE6481877F2F0FE9C9B8FD34F30ED5D6EF08F225D6C6001A3D288CE9A9043F7C0BC1E085120D2B2BE7BEF204EEE7DE594D128AEDA8E3A7A00D8BDA5DFC8488D139FAC339B4483C7D6A6391702BFD92DA5893B85C05CAC2413560279C69070F5DE613AF4FB8DE1BE49C54392979FF41913A4BC907634674574ACD7C612CED7789988E3291A3C3BD7BFAAD25F3744DB805D858A8BABA941C10C4E34CD916D4EAA80E9BF895FDCA3AE2E8DAE94134331E52BA4C0338958D3874D9C1C2245CCD3D4ECA1241D4E61EE1AF470889E5F0E18CB5AF45745527F4CEAC1559F09076EC60A3AAEF95F3BE7705FAD4C3E328A3381A9C9232778E9F9E0A823974E8C4C28545CE9863DBF64CCF2E0C7119E698F7205460ACDBFD4918A0EAA55ADF34BD49867950FC41AFB5C1B51E6CB6D81860FC04E171BE28553CFCBB70E29B707BA00681156859C7F5436D902005D5C3EBC3979A0C8CDBB2C6EA4B6DF1DE7F9B3D097CBD02D2DC1F251613C648FCB3367373B5DCF34CC975D09FED3C60122B125C392F8D8F3DAAC649745FE2EBC25FE27234A4D2AB19B48081434B68357FD33695B22440A25421033FBA918D460D1D092730E70D03E67F8ACD47E0E69E45990A262D206DB26DF48DCEF8C10667A04FBF45D91F77D466B44E116B02E792C5942C8F507E019CB4CA4F22881443E826DFA135CA25495917EBDAB9A5DECA40E07C94EBA89CAC41D30139AACD466B8D0ACA4C124A4B0700A298E4DE9335E6B0BCF0DB7A744E3472FB4516F7198F43F4CCF76EAEDDBC3F697089DD32C0466485247BBC0F3347EC4037563AE74F7C4F48F94F31728D3C8724C3481AF7836301AE00B4D5E6183CB4C2E61F311C2EE3444CCE160AB790E78743FC737906D4E3656B625EDD5E9059CECE5E03A7D2D59006925CA3A73CF05BA00A6CCA65C4C35E9B67F09256998D23BA9BE3D03BE11E4236114F12C9437AD3C85CB7A513E353724C63DC0805616DF1C8C03A2AFA88C72A685A0250984D68484258E2765DF3DBADB6213C87C411CBA664AB4EBC93BD4D2ED76E92DC1458EA6E854125A17025450E4AF1CCFA21C399176020E3C59936716828C3676E60F3468DB0AE633F291D1ABA4B7D7AD947F0FEBF2E46EFBB5D3D16CF5883E3F3C83C76D16B49133A05B20E71EFDA9627241BE0D80B5AB9A09052C087D4025372398CFE638431EAB1051BC8472ABBFAA2EBCF0C47F4A2250D02D86BB296664D1450D050558607D4C94B4DEABEF08D02D54215C687A80BEC82EA66416A7C8280FA474043167A4EF10F7BDF16C49C91B6CEF460DED91878DE3DD8035D622DD1ED9D3E20A37328419BF59029A0535BD7CFADE2D18E9E2AAFD847442355C8BCE3454F3A1CA53223AF67C47FD3DC748C9691E1829D52A634FF9CE585F57E8B38683254D2011C183245F1B733C1753AB52398C25AFA3804AAEACCAE6449700ED5F158AE1E57BE34CB9CCC14E045443160FE6C997808C54D7B24AF245F20C22369D040C3A49EA0682E9F2641F59FCA5F0DC96627535B30E1CD1B98D9E1AA857A8DC24567AB46FDF8919683CFE8574AA2799435CE9963CA3DC202948080BCD9A833BD1C2590BDB85EF31637DC10754F7CB6AA2C35A88604F906520029DDB2F10E559D8EE586E95592EA8D7E2D081DC9C742E075C88AA0EA9E99019744402FB74719D574F2A882574BBAA37D02B2EA1AC150814A204AA0828C365AF34949FD3584A3C77264670EB322E96D6D309F9FBCD4411292287AB35A0E4D3A5314E1628E28F0A8704CCC5927E62EC6711B78CC4E12C84989D53EB4ADAD3C686B98B4ADA6DCBED01F8149702C96F27DB496533ACE8B90475EE5AC1080683B74F8137F2D8E1C2EA81D8AA68F3E9E00DE20E91FB2ED3AF2674F485973046848AD38AC2892AD948FBB0FFCF282BC2BBB1495279AAAFA1793221BB761D9283DA4A83A018DE493B7E1F844E4A00DFF1D5D0EF2E1F04CE27BA758299025A7A40CE71270D9D779620564BB5871964E8E45C5FEE073437AAFE752C1834B93AC6E27A686D4666FBA374D3E4F3B7A564B02BE943B13DD5B23EDE2BE48CB1E87FF5F715A11D45B05A2DDC81ACF6121F3345984AA35116975121C661D238AA19710FC297C57AA95134AD3F851DD589510BEBB53E42ED17DE57578216C524904A06358F74AED4A2B575759E3971DBF62DD26472B7AD1725ED830C776287F5A4A9065761B7D2EDEB1572B300BB2941B94F227167F2B956B64482CB19C240B3AF9B12F11C6D022F2023889B41805C6423089BBA4491283B8B903FE0D3873DF01CC8495517BFA4E1093A91C381518DA0A8E804C8D5BC0258A1D4D586C5EAB9FAFB2B5A58C69B4DB933EEDB40361CCF2D8204476CDCC83BEB096D4139B02F60097F80BF1F468B905BE47DB80B3F8C81263F7B68461FBD07EDDB1C2683FEBDA9790B745EE14229D235BDE750B03ABF2621498D11B4AFFB17DFA97317FD12A2E8042196A37A1EFAF084577EDB9E868EDE96B069802FC258B9A9180A5FDF9A96F489E8C967F0E2B8ABA413558F7EF86EE7BD37B4E9F5271D3CE093855D02EEED47B9206A24629FAB26AA38E8BA1958B1A9F75C051721220B089D658AD1072F6BD5CFF538AB2ACC44796B56F4D0237150B703857BDA03B2E66BAF8EC08364D56AF982C8A678A36CBD508CF35FC50C81DCF2A66C5E49E4D82DF6A474BC95D164B0A9C8F90ED58E3806115CF24C3E0F968E70C3D2EE4338135E86E93A45B6C45C4E31FF0CB4D1FA78EE9AF7E45F19E6F44531A95B798D99B938DAC97F409FAF6B59614CF3BA38D5E5677278152EA631C7170C986F082F32304781719B52BCED6B67D23EC321056099ED415FA41FF3BA699C7164F3A566CF0E8DBB23B48954BB18F3FEE4136F890172014331220DF51E3E4971D66B07AF5280FADF55A7A6ABE661762657C4DCA7697561F48B74B423C8E49C61B3D84C1F23B16A9440AD80C64C352AC9DFBDA6B13D5A76D976C1239F4DB31BAE4CFE8C7D8AC0237099050156ABBC114722E0B94ECD4D2028394D7123796D353FD3FAFBAB2C9014FE21F972DF816B33992937CEDB825B20E4DF2DF9EF4DE6F1A4F2B02588C3DD40D88A5176637B61E3D44B27BBBCCFF8D952D32DAE8A05E09F84768E715DF4A83FA9EF32B0A62A35E07A01AB9E0C0A8BBAD345E5B0D6A899FB98EE1E2065107CF9249D23A437C01FB82A73B4D48AD5511736375B59A778FE527BEAA82C106BCB46979B0A8B6566597272BE3071B766787BCD518C6BD34EFC383FBD6E3F04EEF4DDAEF0C81B4B6D3AA2C35D1C0FF731B4B2804367FC85715FD32DD873077021C80E323B66438A846FFC532EB6C4301727A52898DEA59AF657942D31DDF67DEE8AA4178158CC3B6B8CA60C832F724DDCE3A41B24A5D4403051DE56F120E7D06CE77AB8DBF194A86DD5D32F5FC1637F9F84551852A9653D74F8A344062B2B367D94B948012B4A6C4854C5CCC106754499CA818DD073E64D60274034E25C3D1130D2CBDA9985ED00ADC9F49EFD01D1017C21A6829055F9478A88220490DD4280DF2F636C95EC4EFD5FB53997EEEB6F45C5CE664699E0AB078CED5FB3D4EC14600A7C3784E0BA55BC1DAADBA24D6E9D25D21E4B42D6A13807DF79FADF5E92060A8CE166F970B416054071885B4776E69111D296CC58DEBC613B92F9406CCBF278AF35A358CE147C9E734F29430AC95935A3ABC6D51E37615CD2BC852ADD1B411551A11AEAB4AEA7C341E20A3DFE8ED6FE3691CCCB3489DF45AC8BB42562904275C03498A6FC29F38869E2C72AC653223A7D95B9EFF618E8452EAA646028CBF98DCCF0AD325D45A26A784E7112A07A17949C7EA2BDA6BEFD5C6837CDAD45E68E1653937B7C4DABE8B4292F4D0598AF3F9CA692C770ABFDBCDFD55C2DAEAD51E58091E28C723314B53A79BD8F69699CADD3A1DFB531C89B6BF5F6A7049AA5A733D0919A10BAEFE8ECAEC6C9E56A1CC83F1313852F72D28ED5CCF036B9955634B978A37E885EF163441C51E317A1C28950507EE92E98E475BA6F42B9BA047B7FD5517749BE956CC5F333BD43512A1BAB20BBA2A84C22F3D7F056F2FB05BC6DC07F2419AF45D5357B4937C0F7FD1D0E95BA00F4262A3097D7D59A8D6CAA6BF604FEA03B9EEBDDCEFBC02E1E5FADC30C309F37F54208E1BCD3D85A6642A11F6081257369D9867241F3049E12D06F8C38BA047F6D0D7848C599CA6FC8AEDBCB2B740840F1B981D94E3A15D4BD3ED84C36494AAE0BA3F71A426C47D389BB1FF5535018BBE8B1945357A4826838B6364DB26F082D26579DE96A833D0401F1EADD5DB24A891733409315F0F88EC4B8900DA1DA48F18E6C42D720CE46125B3FF15AFB90B051569AC1A343C7759EC3FD79A86B758E1B2EB6248FEB6AD9C458B2E00D6BA947FC074B33366B9D300B2D1635CA7D77F2A4DD09669D35480E7D216BFE90C99FDA5B8DD09AC7DE81368ED22B77644CAF20698F2C088F3FF3AB98944201C878C8267C6EF126CD2393D2FEDB978D7A206469D97C974E0632A3D1DA71AFDF556ACE557B0F2B0A285601EA8B2104968EA4BC94078DC0E2A51385EB71A230AAC2D6B0CB4A923FF2918FE60A1D8A6544E19D56933A6A968CFC841C546866730C53EAE2F9594A18B95D8A33516C850741675EA68834DB8DEB2B6A2818E26BFDE2584A840A842A0840D36E9C477E5EC8EAB4B709AE5FA6FD9E49EBB0CCF59E668F3CE518309413A0B571C2135B108E29359666D00B5952B1C073672D9B9016156965FB505937E6B3BE01DA82A89A492771505EDFAB4C1026AA0616D715D4B74C865ACF5FBDDBE76AB50E79C94CA81A8290B50552A54776F059EA0B35606E31D29143C15A04937E38CE2C59CF996D7FBA704FBB65F8CA38BBB76253B05F36A5E4625E038633A2CE4797E42582A4239248199428EACA6372A3BF6CF4379003498D7D5FFE4F36319A6E64A11ADFC3263CA83A88E3A5E424A40ECE93262540C25FF4B971BBA27708DFC0C59CE8E2BA3B10BBD06CCC01C1B0DA1391C421A5922C0999D4CC73B7C65ACFF9169A34B9C92976418711690BA74B237D9BA441C82B2E703EB6CCEC79E832BB794CFC43C29C52C4CC3675C6797C61D7423FDE7CA527E3473BBB95D9AE1E7B534901D6B6C7C536548C0F0C9B940E2D445AFA14D1199D79080C48AB6FD4F157A45E5AE777307C33368D6F06481A5CD450B9EFB1CA2E1C72ABF03CA34C475A9A2C1D37897466C126E61200F951FF746746EA402AD9CDAD7C91C7ED2A349A2A8D2A0A7E4F9D1BF0FF9FEE79DA0B7A745A9A6578F24F1A85451D17828957500649AF444142E5A8226C90DF9132A098A2B8667C4D0E0156FFC63123DC2C858AB4B382303B7654BE69DA888758DB78A5BDA4A0AC39C4B71F2D62CB4508BD8E6874A2769719C74FD6BEF0E4E831A3B7F600A2E92144B07CE0F9F9DC15C25217E3BF6FD9126DB305A1095DB663E47CBB22982B3551649758F49A6F59FF472F7C4960C17E3526D06DFED8BF50761C601CDA5BEB625433603AB8656E9DB2C5F0D795CA50766C98A1DC296CD7B2BA065E051195B848CF0E29426899FAE1823E6AA4A4636FBCDD28D0C12B3132AFC2D84C268F7E8C557531E499239E8CF721E812130D9DF2F10FE01F3E678C929E0851E808DF9299A3FEA804B95D554DAA6EFD56B6DAA2CD17CE9EFBAF474388FFACD971F3807323A1945EE33691A085D25C7DD88825C58052CA068D76A930E1BA70D98A48987D837E2DE59D715CA226537E95A9E2BE95A4AB7FA7D4859E580F9D8F403AD7D79DE10957848A08745F81A125F39A6F49D469D68642CB6F817F5D59275267FE77B860FEB3A11C268F2E70D8E06BFA27504843AC124E0A9A809F22AFC2C74374007EABFDE3776A1E0F810564B03A3C4372BC6D06EAC4A4E119BBDB6AE7C9E8AA5EB7235C3277848B6661B6F991500F34347C23DB0B1D54D6391763A49239E748E3892B8A17DF8058A9DBCB8186FA6406EB2CB7622006A3F13201BCA89AE0C372D4DA58415D4D6916F018D7C3FEC4940BCAAE13542D05999B98825296C200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: DFTYLE+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /DFTYLE+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid6516 putdup 34 /cid5041 putdup 35 /cid6888 putdup 36 /cid3352 putdup 37 /cid1285 putdup 38 /cid4214 putdup 39 /cid4457 putdup 40 /cid3524 putdup 41 /cid3224 putdup 42 /cid2688 putdup 43 /cid53 putdup 44 /cid42 putdup 45 /cid37 putdup 46 /cid36 putdup 47 /cid3794 putdup 48 /cid2903 putdup 49 /cid1567 putdup 50 /cid5424 putdup 51 /cid2562 putdup 52 /cid1561 putdup 53 /cid3481 putdup 54 /cid1442 putdup 55 /cid69 putdup 56 /cid92 putdup 57 /cid87 putdup 58 /cid72 putdup 59 /cid15 putdup 60 /cid3 putdup 61 /cid86 putdup 62 /cid75 putdup 63 /cid82 putdup 64 /cid85 putdup 65 /cid76 putdup 66 /cid81 putdup 67 /cid394 putdup 68 /cid68 putdup 69 /cid3186 putdup 70 /cid1612 putdup 71 /cid1372 putdup 72 /cid5547 putdup 73 /cid4913 putdup 74 /cid3357 putdup 75 /cid4190 putdup 76 /cid6924 putdup 77 /cid1601 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 47 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid15 {(\002) 0 $SP} putdup /cid36 {(\003) 0 $SP} putdup /cid37 {(\004) 0 $SP} putdup /cid42 {(\005) 0 $SP} putdup /cid53 {(\006) 0 $SP} putdup /cid68 {(\007) 0 $SP} putdup /cid69 {(\010) 0 $SP} putdup /cid72 {(\011) 0 $SP} putdup /cid75 {(\012) 0 $SP} putdup /cid76 {(\013) 0 $SP} putdup /cid81 {(\014) 0 $SP} putdup /cid82 {(\015) 0 $SP} putdup /cid85 {(\016) 0 $SP} putdup /cid86 {(\017) 0 $SP} putdup /cid87 {(\020) 0 $SP} putdup /cid92 {(\021) 0 $SP} putdup /cid394 {(\022) 0 $SP} putdup /cid1285 {(\023) 0 $SP} putdup /cid1372 {(\024) 0 $SP} putdup /cid1442 {(\025) 0 $SP} putdup /cid1561 {(\026) 0 $SP} putdup /cid1567 {(\027) 0 $SP} putdup /cid1601 {(\030) 0 $SP} putdup /cid1612 {(\031) 0 $SP} putdup /cid2562 {(\032) 0 $SP} putdup /cid2688 {(\033) 0 $SP} putdup /cid2903 {(\034) 0 $SP} putdup /cid3186 {(\035) 0 $SP} putdup /cid3224 {(\036) 0 $SP} putdup /cid3352 {(\037) 0 $SP} putdup /cid3357 {( ) 0 $SP} putdup /cid3481 {(!) 0 $SP} putdup /cid3524 {(") 0 $SP} putdup /cid3794 {(#) 0 $SP} putdup /cid4190 {($) 0 $SP} putdup /cid4214 {(%) 0 $SP} putdup /cid4457 {(&) 0 $SP} putdup /cid4913 {(') 0 $SP} putdup /cid5041 {(\() 0 $SP} putdup /cid5424 {(\)) 0 $SP} putdup /cid5547 {(*) 0 $SP} putdup /cid6516 {(+) 0 $SP} putdup /cid6888 {(,) 0 $SP} putdup /cid6924 {(-) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/DFTYLE+PingFangSC-Regular cguidfix
/F1.1/DFTYLE+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.6901961 0.6901961 0.6901961 sc
q
0 0 327.0354 235.46164 rc
98.389664 196.71339 m
327.0354 196.71339 l
327.0354 79.491112 l
98.389664 79.491112 l
h
98.389664 196.71339 m
f
1 1 1 sc
117.06699 183.85968 m
232.94531 183.85968 l
232.94531 151.45786 l
117.06699 151.45786 l
h
117.06699 183.85968 m
f
2 J
0 0 0 sc
1 0 0 -1 -108.5108 374.4899 cm
225.57779 190.63023 m
341.45612 190.63023 l
341.45612 223.03206 l
225.57779 223.03206 l
h
225.57779 190.63023 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
271.66696 211.33115 m
(!")[ 12.000000 0.000000 ] xS
0.60000002 i
1 1 1 sc
CM
116.48411 128.27245 m
232.36244 128.27245 l
232.36244 95.870613 l
116.48411 95.870613 l
h
116.48411 128.27245 m
f
[
4
4
] 0 d
0 0 0 sc
1 0 0 -1 -108.5108 374.4899 cm
224.9949 246.21747 m
340.87323 246.21747 l
340.87323 278.61929 l
224.9949 278.61929 l
h
224.9949 246.21747 m
S
0 i
247.08408 266.9184 m
(#$%&'\()[ 12.000000 12.000000 12.000000 12.000000 12.000000 0.000000 ] xS
0.60000002 i
1 1 1 sc
CM
116.81239 66.66008 m
232.69072 66.66008 l
232.69072 34.258255 l
116.81239 34.258255 l
h
116.81239 66.66008 m
f
[] 0 d
0 0 0 sc
1 0 0 -1 -108.5108 374.4899 cm
225.3232 307.82983 m
341.20154 307.82983 l
341.20154 340.23166 l
225.3232 340.23166 l
h
225.3232 307.82983 m
S
0 i
236.86436 328.53073 m
(\)*%+,-./0)[ 12.000000 12.000000 12.000000 8.112000 8.976000 8.124000 7.884000 12.000000 0.000000 ] xS
0.60000002 i
229.61496 158.19325 m
282.96982 158.19325 l
282.96982 180.57788 l
S
CM
174.459 186.39449 m
171.72284 193.91203 l
177.19516 193.91203 l
h
174.459 186.39449 m
f
0.25 w
1 0 0 -1 -108.5108 374.4899 cm
282.96982 188.09543 m
280.23364 180.57788 l
285.70596 180.57788 l
h
282.96982 188.09543 m
S
1 w
280.22568 342.35632 m
280.22568 365.41666 l
S
CM
171.71489 1.5557238 m
168.97873 9.0732651 l
174.45105 9.0732651 l
h
171.71489 1.5557238 m
f
0.25 w
1 0 0 -1 -108.5108 374.4899 cm
280.22568 372.93417 m
277.48953 365.41666 l
282.96185 365.41666 l
h
280.22568 372.93417 m
S
1 w
280.22568 224.04401 m
280.22568 239.21477 l
S
CM
171.71489 127.7576 m
168.97873 135.27513 l
174.45105 135.27513 l
h
171.71489 127.7576 m
f
0.25 w
1 0 0 -1 -108.5108 374.4899 cm
280.22568 246.73232 m
277.48953 239.21477 l
282.96185 239.21477 l
h
280.22568 246.73232 m
S
1 w
280.22568 277.50583 m
280.22568 300.56613 l
S
CM
171.71489 66.406227 m
168.97873 73.923767 l
174.45105 73.923767 l
h
171.71489 66.406227 m
f
0.25 w
1 0 0 -1 -108.5108 374.4899 cm
280.22568 308.08368 m
277.48953 300.56613 l
282.96185 300.56613 l
h
280.22568 308.08368 m
S
0 i
353.76447 238.53563 m
(123456)[ 12.000000 12.000000 12.000000 12.000000 12.000000 0.000000 ] xS
113.5108 152.02826 m
(789:;<=>?@9;<AB9;<C?D9)[ 7.032000 5.952000 4.260000 6.660000 3.168000 3.996000 6.060000 6.672000 7.032000 4.380000 4.260000 3.168000 3.996000 3.072000 6.708000 4.260000 3.168000 3.996000 7.296000 7.032000 6.708000 0.000000 ] xS
113.5108 169.02826 m
(EFGH"I\(JK)[ 12.000000 12.000000 12.000000 12.000000 12.000000 12.000000 12.000000 12.000000 0.000000 ] xS
167.41223 368.14368 m
(LM+,-./0\(J)[ 12.000000 12.000000 8.112000 8.976000 8.124000 7.884000 12.000000 12.000000 12.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
