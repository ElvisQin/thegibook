%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.2 (Build 17C88) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 283 283
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 283 283
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 282.77686 282.77686 rc
25.706985 6.4471488 m
25.706985 276.32971 l
f
12.894298 w
4 M
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
26.214775 276.82114 m
26.214775 6.9385972 l
S
0 0 0 sc
CM
64.226662 6.4471488 m
64.226662 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
64.734451 276.82114 m
64.734451 6.9385972 l
S
0 0 0 sc
CM
102.82794 6.4471488 m
102.82794 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
103.33573 276.82114 m
103.33573 6.9385972 l
S
0 0 0 sc
CM
141.34763 6.4471488 m
141.34763 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
141.85541 276.82114 m
141.85541 6.9385972 l
S
0 0 0 sc
CM
218.46858 6.4471488 m
218.46858 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
218.97636 276.82114 m
218.97636 6.9385972 l
S
0 0 0 sc
CM
257.06985 6.4471488 m
257.06985 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
257.57764 276.82114 m
257.57764 6.9385972 l
S
0 0 0 sc
CM
179.9489 6.4471488 m
179.9489 276.32971 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
180.4567 276.82114 m
180.4567 6.9385972 l
S
0 0 0 sc
CM
6.4471488 257.06985 m
276.32971 257.06985 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 26.198435 m
276.83749 26.198435 l
S
0 0 0 sc
CM
6.4471488 218.55019 m
276.32971 218.55019 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 64.718109 m
276.83749 64.718109 l
S
0 0 0 sc
CM
6.4471488 179.9489 m
276.32971 179.9489 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 103.3194 m
276.83749 103.3194 l
S
0 0 0 sc
CM
6.4471488 141.42923 m
276.32971 141.42923 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 141.83907 m
276.83749 141.83907 l
S
0 0 0 sc
CM
6.4471488 102.82794 m
276.32971 102.82794 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 180.44035 m
276.83749 180.44035 l
S
0 0 0 sc
CM
6.4471488 64.308273 m
276.32971 64.308273 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 218.96002 m
276.83749 218.96002 l
S
0 0 0 sc
CM
6.4471488 25.706985 m
276.32971 25.706985 l
f
0.69803923 0.69803923 0.69803923 sc
1 0 0 -1 -0.50778836 283.26831 cm
6.9549375 257.56131 m
276.83749 257.56131 l
S
0 0 0 sc
CM
264.74115 257.06985 m
264.7417 258.07413 264.54202 259.07794 264.1572 260.00552 c
263.77341 260.93356 263.2048 261.78455 262.49429 262.49429 c
261.78455 263.2048 260.93356 263.77341 260.00552 264.1572 c
259.07794 264.54202 258.07413 264.7417 257.06985 264.74115 c
256.06561 264.7417 255.06178 264.54202 254.13419 264.1572 c
253.20616 263.77341 252.35516 263.2048 251.64545 262.49429 c
250.93494 261.78455 250.36632 260.93356 249.98251 260.00552 c
249.59769 259.07794 249.39801 258.07413 249.39857 257.06985 c
249.39801 256.06561 249.59769 255.06178 249.98251 254.13419 c
250.36632 253.20616 250.93494 252.35516 251.64545 251.64545 c
252.35516 250.93494 253.20616 250.36632 254.13419 249.98251 c
255.06178 249.59769 256.06561 249.39801 257.06985 249.39857 c
258.07413 249.39801 259.07794 249.59769 260.00552 249.98251 c
260.93356 250.36632 261.78455 250.93494 262.49429 251.64545 c
263.2048 252.35516 263.77341 253.20616 264.1572 254.13419 c
264.54202 255.06178 264.7417 256.06561 264.74115 257.06985 c
h
264.74115 257.06985 m
f
1.3057517 w
1 0 0 -1 -0.50778836 283.26831 cm
265.24893 26.198435 m
265.24951 25.194178 265.04984 24.190359 264.66501 23.262758 c
264.28119 22.334734 263.71259 21.483738 263.00208 20.774014 c
262.29236 20.063503 261.44135 19.494886 260.51334 19.111086 c
259.58572 18.726259 258.58191 18.526588 257.57764 18.527143 c
256.57339 18.526588 255.56958 18.726259 254.64197 19.111086 c
253.71394 19.494886 252.86296 20.063503 252.15323 20.774014 c
251.44272 21.483738 250.8741 22.334734 250.4903 23.262758 c
250.10547 24.190359 249.90581 25.194178 249.90636 26.198435 c
249.90581 27.202692 250.10547 28.206511 250.4903 29.134111 c
250.8741 30.062136 251.44272 30.913132 252.15323 31.622856 c
252.86296 32.333366 253.71394 32.901985 254.64197 33.285782 c
255.56958 33.670609 256.57339 33.870281 257.57764 33.869724 c
258.58191 33.870281 259.58572 33.670609 260.51334 33.285782 c
261.44135 32.901985 262.29236 32.333366 263.00208 31.622856 c
263.71259 30.913132 264.28119 30.062136 264.66501 29.134111 c
265.04984 28.206511 265.24951 27.202692 265.24893 26.198435 c
h
265.24893 26.198435 m
S
CM
33.378277 25.706985 m
33.378834 26.711245 33.179161 27.715061 32.794334 28.642662 c
32.410534 29.570688 31.841919 30.421684 31.131409 31.131409 c
30.421684 31.841919 29.570688 32.410534 28.642662 32.794334 c
27.715061 33.179161 26.711245 33.378834 25.706985 33.378277 c
24.702728 33.378834 23.698912 33.179161 22.771311 32.794334 c
21.843285 32.410534 20.992289 31.841919 20.282564 31.131409 c
19.572054 30.421684 19.003437 29.570688 18.619637 28.642662 c
18.234812 27.715061 18.035139 26.711245 18.035696 25.706985 c
18.035139 24.702728 18.234812 23.698912 18.619637 22.771311 c
19.003437 21.843285 19.572054 20.992289 20.282564 20.282564 c
20.992289 19.572054 21.843285 19.003437 22.771311 18.619637 c
23.698912 18.234812 24.702728 18.035139 25.706985 18.035696 c
26.711245 18.035139 27.715061 18.234812 28.642662 18.619637 c
29.570688 19.003437 30.421684 19.572054 31.131409 20.282564 c
31.841919 20.992289 32.410534 21.843285 32.794334 22.771311 c
33.179161 23.698912 33.378834 24.702728 33.378277 25.706985 c
h
33.378277 25.706985 m
f
1 0 0 -1 -0.50778836 283.26831 cm
33.886066 257.56131 m
33.88662 256.55707 33.686951 255.55324 33.302124 254.62564 c
32.918324 253.6976 32.349705 252.84662 31.639196 252.13689 c
30.929472 251.42638 30.078476 250.85776 29.15045 250.47397 c
28.222851 250.08914 27.219032 249.88947 26.214775 249.89001 c
25.210518 249.88947 24.206699 250.08914 23.279099 250.47397 c
22.351072 250.85776 21.500078 251.42638 20.790352 252.13689 c
20.079844 252.84662 19.511225 253.6976 19.127426 254.62564 c
18.742599 255.55324 18.542929 256.55707 18.543484 257.56131 c
18.542929 258.56558 18.742599 259.5694 19.127426 260.49698 c
19.511225 261.42502 20.079844 262.276 20.790352 262.98572 c
21.500078 263.69623 22.351072 264.26486 23.279099 264.64865 c
24.206699 265.03348 25.210518 265.23315 26.214775 265.2326 c
27.219032 265.23315 28.222851 265.03348 29.15045 264.64865 c
30.078476 264.26486 30.929472 263.69623 31.639196 262.98572 c
32.349705 262.276 32.918324 261.42502 33.302124 260.49698 c
33.686951 259.5694 33.88662 258.56558 33.886066 257.56131 c
h
33.886066 257.56131 m
S
2.6115034 w
1 0 0 sc
24.256147 257.56131 m
24.256147 24.239807 l
257.57764 24.239807 l
S
0 0 1 sc
26.214775 257.56131 m
26.214775 218.96002 l
64.734451 218.96002 l
64.734451 180.44035 l
103.33573 180.44035 l
103.33573 141.83907 l
141.85541 141.83907 l
141.85541 103.3194 l
180.4567 103.3194 l
180.4567 64.718109 l
218.97636 64.718109 l
218.97636 26.198435 l
257.57764 26.198435 l
S
1 0.8392157 0 sc
26.214775 257.56131 m
218.97636 257.56131 l
218.97636 180.44035 l
257.57764 180.44035 l
257.57764 26.198435 l
S
0 0.81960785 0 sc
30.050421 257.56131 m
257.57764 30.034081 l
S
ep
end
%%Trailer
%%EOF
