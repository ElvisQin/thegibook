%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 296 137
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 296 137
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FEFPTD+Helvetica
%!FontType1-1.0: FEFPTD+Helvetica 1.0000.0.0000
14 dict begin/FontName /FEFPTD+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /three put
dup 34 /one put
dup 35 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




059A003100C4401F490C532D6529632D7529752D069626014B082B0A182B140D03F93114350D20B8012340141135107F0D0D311B3524050735310D1896274411B8014A400F0A382E6F021F2920810327023347321076C418D4EDF4ED10F5EDEDF4ED003FED3FED12392FF4FDE610ED10ED111239011112393130437940362F301926000905261D2522260600032800040308300A28011C231F28001A251828010401072800092F0728001E211B280119261B2801002B2B2B2B012B2B2B103C2B2B2B2B818181005D015D0402353316171633323635342623220607351E013332373635342623220706072334373621321615140706071E01151400230116E5BC0C2846B78EACB5A11225131C26166541729865B4452605B2406E0115DBF0472C46717FFEF2F8270117C88B3F719878947601019F03022038906B7478427AA070C8C3B98452331D1FB180CDFEFE0000000002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000006F400C9E5F0F3CF500110800000000005F4D8F0000000000D383C768F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B9100010000000000000000000000000000000505120042047300C404730040047300310473002F00000036005C00E8019401AE00010000000500920009006B0007000200100010005D000007E80A1D00040001B800532BB800492BB8003F2BB800352BB8002B2B4118008001A6009001A600A001A600030069018B0079018B0089018B0099018B00040089018B0099018B00A9018B00B9018BB2040840BA0179001A014A400B041F5414191F180A0B1FD2B80106B49E1FD918E3BB0119000D00E10119B20D0009410A01A0019F0064001F01A50025017A00480028019AB3296C1F60410A01A9007001A9008001A90003008001A9000101A9B21E321FBE012C00250401001F0126001E0401B61FE7312D1FE531B80201B21FC227B80401B21FC11EB80201400F1FC01D9E1FBF1D671FBE1D671FAB27B80401B21FAA29B80401B61FA91D6C1F931EB8019AB21F921DB80101B21F911DB80101B21F751DB80201B61F6D29961F6431B8019AB21F4C96B802ABB21F391DB80156400B1F3638211F351DE41F2F27B80801400B1F2D1D4C1F2A31CD1F241DB802ABB21F201EB8012540111F1C1D931F3A1D4C1F1E1D45273A1D4527BB01AA019B002A019BB2254A1FBA019B0025017AB349293896B8017BB348283125B8017A403648289629482725294C1F252946272729482756C80784075B07410732072B072807260721071B071408120810080E080C080A08080807B801ACB23F1F06BB01AB003F001F01ABB308060805B801AEB23F1F04BB01AD003F001F01AD

00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/u20B8 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec

E591680B1E24D033551060A794CC9EF60DAAF1A8C6F359DA65E2EFD2A45720BB197FC54240D8CD5A7926E8DEDC4AAC3A1E795066D08193EB808C4DD4744BE40E16ECDC8D5B852B716FA4F143FB475725C5EF934F7ADBA0BC406AFC9397C2879F2FCD4B2C7C7BB5DF44EAEFADC138547125D4B369DC2927ACBDD2E407341A3E3153E023E07EA63B14BD1CD9F1BEBCFE3EDF830D20D1B22221C7DCED8C144C804D13A602C2DDC9ED6691CCBAE5B1DE0B900B445E1CEBB3127EA9B738E308220E198C495A4C8F9DA813454A1ED5488C067D85E98A64FF9D0ED467347BCA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FEFPTD+Helvetica cguidfix
/F1.1/FEFPTD+Helvetica renmfont
%RBIBeginFontSubset: SCRXON+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 6/23/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid11 putdup 2 /cid12 putdup 3 /cid68 putdup 4 /cid69 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA68BF5328762AF8FC5D972E419AEF3FE2DECB2C3E108827140D9CBCB7206EF286D4D70964209A94FA174632F75331A759EED4AE26385ABF6CC8AA9D868607CC6070FC54BEC128291613CFDC1A188FE10A825C38B9730D81A9FD380577F1051DCC8950661626BD0372DB9F35FDBB7358348509D3135A7E0BA1E62AFB83579687BB249B4F552CCAA27B44FA79C3C72C91B486C5B7A798211280A82BB0EE8CE9FB352FEAB7F8AECC12D4409759831BE69344685BE6B1C1D00CECA8A05CD90243C401B28F89ED69D812191194C6F83C8808384EC4317222F94A9E0C554958D5E984CEE4794BAE61DF67FF7F2C03AC8E047A000E091C87727FDC5787420B530D23EC6F90EB6EC90BB1162AF602DAAD7B0350BB4D8C6C480B8334AF269E7CA432500A312DAFFEDAFECBF5A773E9CEBCA14FCC4C80E6C8008A2AAD90BCFFD8159ABDBC3F4895514BD948C9557D79E209CE803BC10D36D77F3294C9FC6ABAE86242D0E9FB9EADC4A79CB8B313F4AFBDB78A54CECE531180DFE2E8BAF10F7AB243D043F276F3F2DBA011B9CB0DD2EBAC5DC863A00ACA1212805AB9CC8B65FC8D4D73779044BACA99CD2D8261EC043D5AE94ABD5FDA9D0385D742B2FBF7FA5DC543DF8107643EC1A42224CBBD87159431575E5B27B3468ED0102FDFF657AF4D752411965DA636DC9D05632425909CCE2AAF881B9913BAA3BA049C9136E8D3CDA095424CDA3BB8FAC02F6D7DF8A2221ACC2DCF78EA73A66C376D4557A7C2A11A63AF5482A50981D7764A1E6949E74E41B6DB74336A1B97012E21545C069AC95769105CB4544AA54B3343E53AE7BE9BDB202D75624727DF8C4F364273CC11D0B0BA4E6816C545E08943D693D1E8638D8FCB5990A998B9C201F3934F5BD0CAAF3AF962DD2FE2F5458BDAB29D304BA77179DDADC2A5235401916980DCF86FE306696B0DE35ED64D99A6824A7AE3DDB4A47370DF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: SCRXON+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /SCRXON+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid11 putdup 34 /cid68 putdup 35 /cid12 putdup 36 /cid69 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 6 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid11 {(\001) 0 $SP} putdup /cid12 {(\002) 0 $SP} putdup /cid68 {(\003) 0 $SP} putdup /cid69 {(\004) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/SCRXON+PingFangSC-Regular cguidfix
/F2.1/SCRXON+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.81568629 0.81568629 0.81568629 sc
q
0 0 295.09531 136.94209 rc
0 34.581291 m
138.21643 34.581291 l
138.21643 20.184818 l
0 20.184818 l
h
0 34.581291 m
f
2 J
0 0 0 sc
1 0 0 -1 -75.623367 236.93425 cm
76.188103 202.70038 m
213.20412 202.70038 l
S
0 0.61176473 1 sc
CM
97.392159 34.233875 m
97.392464 34.785023 97.282883 35.33593 97.071686 35.845005 c
96.861053 36.354317 96.548988 36.821354 96.15905 37.210857 c
95.769547 37.600792 95.302513 37.912853 94.793205 38.123489 c
94.284126 38.334686 93.733223 38.444267 93.182076 38.443962 c
92.630928 38.444267 92.080017 38.334686 91.570946 38.123489 c
91.06163 37.912853 90.594597 37.600792 90.205093 37.210857 c
89.815155 36.821354 89.503098 36.354317 89.292458 35.845005 c
89.081261 35.33593 88.97168 34.785023 88.971985 34.233875 c
88.97168 33.682732 89.081261 33.131824 89.292458 32.622746 c
89.503098 32.113438 89.815155 31.646402 90.205093 31.256897 c
90.594597 30.866962 91.06163 30.554899 91.570946 30.344265 c
92.080017 30.13307 92.630928 30.023487 93.182076 30.023792 c
93.733223 30.023487 94.284126 30.13307 94.793205 30.344265 c
95.302513 30.554899 95.769547 30.866962 96.15905 31.256897 c
96.548988 31.646402 96.861053 32.113438 97.071686 32.622746 c
97.282883 33.131824 97.392464 33.682732 97.392159 34.233875 c
h
97.392159 34.233875 m
f
0 0 0 sc
69.601028 34.233875 m
69.601212 34.567608 69.534859 34.901196 69.406975 35.209454 c
69.279427 35.517849 69.090469 35.800652 68.854355 36.036503 c
68.6185 36.272617 68.335701 36.461578 68.027298 36.589123 c
67.71904 36.717007 67.38546 36.78336 67.051727 36.783176 c
66.717995 36.78336 66.384407 36.717007 66.076149 36.589123 c
65.767754 36.461578 65.484955 36.272617 65.2491 36.036503 c
65.012985 35.800652 64.82402 35.517849 64.69648 35.209454 c
64.568596 34.901196 64.502243 34.567608 64.502426 34.233875 c
64.502243 33.900146 64.568596 33.566559 64.69648 33.258301 c
64.82402 32.949905 65.012985 32.667103 65.2491 32.431252 c
65.484955 32.195137 65.767754 32.006176 66.076149 31.878632 c
66.384407 31.750748 66.717995 31.684393 67.051727 31.684578 c
67.38546 31.684393 67.71904 31.750748 68.027298 31.878632 c
68.335701 32.006176 68.6185 32.195137 68.854355 32.431252 c
69.090469 32.667103 69.279427 32.949905 69.406975 33.258301 c
69.534859 33.566559 69.601212 33.900146 69.601028 34.233875 c
h
69.601028 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
145.2244 202.70038 m
145.22458 202.36665 145.15822 202.03307 145.03033 201.72481 c
144.9028 201.41641 144.71384 201.13361 144.47772 200.89775 c
144.24187 200.66164 143.95906 200.47267 143.65067 200.34514 c
143.34241 200.21725 143.00882 200.15089 142.67509 200.15108 c
142.34135 200.15089 142.00778 200.21725 141.69952 200.34514 c
141.39111 200.47267 141.10832 200.66164 140.87247 200.89775 c
140.63635 201.13361 140.44739 201.41641 140.31984 201.72481 c
140.19196 202.03307 140.12561 202.36665 140.12579 202.70038 c
140.12561 203.0341 140.19196 203.36769 140.31984 203.67595 c
140.44739 203.98434 140.63635 204.26715 140.87247 204.50301 c
141.10832 204.73912 141.39111 204.92809 141.69952 205.05562 c
142.00778 205.1835 142.34135 205.24986 142.67509 205.24968 c
143.00882 205.24986 143.34241 205.1835 143.65067 205.05562 c
143.95906 204.92809 144.24187 204.73912 144.47772 204.50301 c
144.71384 204.26715 144.9028 203.98434 145.03033 203.67595 c
145.15822 203.36769 145.22458 203.0341 145.2244 202.70038 c
h
145.2244 202.70038 m
S
CM
116.35581 34.233875 m
116.356 34.567608 116.28964 34.901196 116.16176 35.209454 c
116.03421 35.517849 115.84525 35.800652 115.60914 36.036503 c
115.37328 36.272617 115.09048 36.461578 114.78208 36.589123 c
114.47382 36.717007 114.14024 36.78336 113.80651 36.783176 c
113.47278 36.78336 113.13919 36.717007 112.83093 36.589123 c
112.52254 36.461578 112.23974 36.272617 112.00388 36.036503 c
111.76777 35.800652 111.5788 35.517849 111.45126 35.209454 c
111.32338 34.901196 111.25703 34.567608 111.25721 34.233875 c
111.25703 33.900146 111.32338 33.566559 111.45126 33.258301 c
111.5788 32.949905 111.76777 32.667103 112.00388 32.431252 c
112.23974 32.195137 112.52254 32.006176 112.83093 31.878632 c
113.13919 31.750748 113.47278 31.684393 113.80651 31.684578 c
114.14024 31.684393 114.47382 31.750748 114.78208 31.878632 c
115.09048 32.006176 115.37328 32.195137 115.60914 32.431252 c
115.84525 32.667103 116.03421 32.949905 116.16176 33.258301 c
116.28964 33.566559 116.356 33.900146 116.35581 34.233875 c
h
116.35581 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
191.97917 202.70038 m
191.97935 202.36665 191.91301 202.03307 191.78513 201.72481 c
191.65758 201.41641 191.46861 201.13361 191.2325 200.89775 c
190.99664 200.66164 190.71385 200.47267 190.40546 200.34514 c
190.0972 200.21725 189.76361 200.15089 189.42987 200.15108 c
189.09615 200.15089 188.76256 200.21725 188.4543 200.34514 c
188.1459 200.47267 187.8631 200.66164 187.62724 200.89775 c
187.39113 201.13361 187.20218 201.41641 187.07463 201.72481 c
186.94675 202.03307 186.88039 202.36665 186.88057 202.70038 c
186.88039 203.0341 186.94675 203.36769 187.07463 203.67595 c
187.20218 203.98434 187.39113 204.26715 187.62724 204.50301 c
187.8631 204.73912 188.1459 204.92809 188.4543 205.05562 c
188.76256 205.1835 189.09615 205.24986 189.42987 205.24968 c
189.76361 205.24986 190.0972 205.1835 190.40546 205.05562 c
190.71385 204.92809 190.99664 204.73912 191.2325 204.50301 c
191.46861 204.26715 191.65758 203.98434 191.78513 203.67595 c
191.91301 203.36769 191.97935 203.0341 191.97917 202.70038 c
h
191.97917 202.70038 m
S
CM
44.735584 34.233875 m
44.735767 34.567608 44.669415 34.901196 44.541531 35.209454 c
44.413986 35.517849 44.225025 35.800652 43.988911 36.036503 c
43.753056 36.272617 43.470257 36.461578 43.161858 36.589123 c
42.8536 36.717007 42.520016 36.78336 42.186283 36.783176 c
41.852551 36.78336 41.518967 36.717007 41.210709 36.589123 c
40.902309 36.461578 40.619511 36.272617 40.383656 36.036503 c
40.147541 35.800652 39.95858 35.517849 39.831039 35.209454 c
39.703156 34.901196 39.636799 34.567608 39.636986 34.233875 c
39.636799 33.900146 39.703156 33.566559 39.831039 33.258301 c
39.95858 32.949905 40.147541 32.667103 40.383656 32.431252 c
40.619511 32.195137 40.902309 32.006176 41.210709 31.878632 c
41.518967 31.750748 41.852551 31.684393 42.186283 31.684578 c
42.520016 31.684393 42.8536 31.750748 43.161858 31.878632 c
43.470257 32.006176 43.753056 32.195137 43.988911 32.431252 c
44.225025 32.667103 44.413986 32.949905 44.541531 33.258301 c
44.669415 33.566559 44.735767 33.900146 44.735584 34.233875 c
h
44.735584 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
120.35895 202.70038 m
120.35913 202.36665 120.29278 202.03307 120.16489 201.72481 c
120.03735 201.41641 119.84839 201.13361 119.61227 200.89775 c
119.37643 200.66164 119.09362 200.47267 118.78522 200.34514 c
118.47697 200.21725 118.14338 200.15089 117.80965 200.15108 c
117.47592 200.15089 117.14233 200.21725 116.83408 200.34514 c
116.52568 200.47267 116.24287 200.66164 116.00703 200.89775 c
115.77091 201.13361 115.58195 201.41641 115.45441 201.72481 c
115.32652 202.03307 115.26017 202.36665 115.26035 202.70038 c
115.26017 203.0341 115.32652 203.36769 115.45441 203.67595 c
115.58195 203.98434 115.77091 204.26715 116.00703 204.50301 c
116.24287 204.73912 116.52568 204.92809 116.83408 205.05562 c
117.14233 205.1835 117.47592 205.24986 117.80965 205.24968 c
118.14338 205.24986 118.47697 205.1835 118.78522 205.05562 c
119.09362 204.92809 119.37643 204.73912 119.61227 204.50301 c
119.84839 204.26715 120.03735 203.98434 120.16489 203.67595 c
120.29278 203.36769 120.35913 203.0341 120.35895 202.70038 c
h
120.35895 202.70038 m
S
CM
17.174688 34.233875 m
17.174873 34.567608 17.108519 34.901196 16.980635 35.209454 c
16.853092 35.517849 16.664129 35.800652 16.428017 36.036503 c
16.192162 36.272617 15.909362 36.461578 15.600964 36.589123 c
15.292706 36.717007 14.959121 36.78336 14.625389 36.783176 c
14.291657 36.78336 13.958072 36.717007 13.649814 36.589123 c
13.341415 36.461578 13.058616 36.272617 12.822762 36.036503 c
12.586647 35.800652 12.397686 35.517849 12.270144 35.209454 c
12.142259 34.901196 12.075905 34.567608 12.076089 34.233875 c
12.075905 33.900146 12.142259 33.566559 12.270144 33.258301 c
12.397686 32.949905 12.586647 32.667103 12.822762 32.431252 c
13.058616 32.195137 13.341415 32.006176 13.649814 31.878632 c
13.958072 31.750748 14.291657 31.684393 14.625389 31.684578 c
14.959121 31.684393 15.292706 31.750748 15.600964 31.878632 c
15.909362 32.006176 16.192162 32.195137 16.428017 32.431252 c
16.664129 32.667103 16.853092 32.949905 16.980635 33.258301 c
17.108519 33.566559 17.174873 33.900146 17.174688 34.233875 c
h
17.174688 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
92.798058 202.70038 m
92.798241 202.36665 92.731888 202.03307 92.604004 201.72481 c
92.476456 201.41641 92.287498 201.13361 92.051384 200.89775 c
91.815529 200.66164 91.53273 200.47267 91.224327 200.34514 c
90.916069 200.21725 90.582489 200.15089 90.248756 200.15108 c
89.915024 200.15089 89.581436 200.21725 89.273178 200.34514 c
88.964783 200.47267 88.681984 200.66164 88.446129 200.89775 c
88.210014 201.13361 88.021049 201.41641 87.893509 201.72481 c
87.765625 202.03307 87.699272 202.36665 87.699455 202.70038 c
87.699272 203.0341 87.765625 203.36769 87.893509 203.67595 c
88.021049 203.98434 88.210014 204.26715 88.446129 204.50301 c
88.681984 204.73912 88.964783 204.92809 89.273178 205.05562 c
89.581436 205.1835 89.915024 205.24986 90.248756 205.24968 c
90.582489 205.24986 90.916069 205.1835 91.224327 205.05562 c
91.53273 204.92809 91.815529 204.73912 92.051384 204.50301 c
92.287498 204.26715 92.476456 203.98434 92.604004 203.67595 c
92.731888 203.36769 92.798241 203.0341 92.798058 202.70038 c
h
92.798058 202.70038 m
S
0.1882353 0.1882353 0.1882353 sc
117.61321 100.49216 m
117.61321 201.57819 l
S
90.007622 201.90784 m
93.493233 199.94557 l
S
96.978851 197.98331 m
100.46447 196.02106 l
S
103.95009 194.05879 m
107.4357 192.09653 l
S
110.92132 190.13426 m
114.40694 188.172 l
S
117.89256 186.20973 m
121.37817 184.24747 l
S
124.86378 182.28522 m
128.34941 180.32295 l
S
131.83502 178.36069 m
135.32063 176.39842 l
S
138.80626 174.43616 m
142.29187 172.47389 l
S
145.77748 170.51163 m
149.26311 168.54936 l
S
152.74872 166.58711 m
156.23434 164.62485 l
S
159.71996 162.66258 m
163.20557 160.70032 l
S
166.69119 158.73805 m
170.1768 156.77579 l
S
173.66241 154.81352 m
177.14804 152.85127 l
S
180.63365 150.88901 m
184.11928 148.92674 l
S
187.60489 146.96448 m
191.0905 145.00221 l
S
194.57613 143.03995 m
198.06174 141.07768 l
S
142.71194 201.65872 m
185.1573 101.28734 l
S
189.0963 202.1947 m
124.2453 110.44701 l
S
0 0 0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
121.91512 155.63655 m
(!)s
139.80495 122.79076 m
(")s
186.08107 117.10672 m
(#)s
0.60000002 i
0.81568629 0.81568629 0.81568629 sc
CM
156.87889 34.581291 m
295.09531 34.581291 l
295.09531 20.184818 l
156.87889 20.184818 l
h
156.87889 34.581291 m
f
0 0 0 sc
1 0 0 -1 -75.623367 236.93425 cm
233.06699 202.70038 m
370.08301 202.70038 l
S
0 0.61176473 1 sc
CM
254.27104 34.233875 m
254.27135 34.785023 254.16177 35.33593 253.95058 35.845005 c
253.73994 36.354317 253.42787 36.821354 253.03793 37.210857 c
252.64844 37.600792 252.1814 37.912853 251.67209 38.123489 c
251.16301 38.334686 250.61211 38.444267 250.06096 38.443962 c
249.50981 38.444267 248.95891 38.334686 248.44983 38.123489 c
247.94052 37.912853 247.47348 37.600792 247.08398 37.210857 c
246.69405 36.821354 246.38199 36.354317 246.17134 35.845005 c
245.96014 35.33593 245.85057 34.785023 245.85088 34.233875 c
245.85057 33.682732 245.96014 33.131824 246.17134 32.622746 c
246.38199 32.113438 246.69405 31.646402 247.08398 31.256897 c
247.47348 30.866962 247.94052 30.554899 248.44983 30.344265 c
248.95891 30.13307 249.50981 30.023487 250.06096 30.023792 c
250.61211 30.023487 251.16301 30.13307 251.67209 30.344265 c
252.1814 30.554899 252.64844 30.866962 253.03793 31.256897 c
253.42787 31.646402 253.73994 32.113438 253.95058 32.622746 c
254.16177 33.131824 254.27135 33.682732 254.27104 34.233875 c
h
254.27104 34.233875 m
f
0 0 0 sc
226.47992 34.233875 m
226.4801 34.567608 226.41374 34.901196 226.28586 35.209454 c
226.15831 35.517849 225.96936 35.800652 225.73325 36.036503 c
225.49739 36.272617 225.21458 36.461578 224.90619 36.589123 c
224.59793 36.717007 224.26434 36.78336 223.93062 36.783176 c
223.59688 36.78336 223.26329 36.717007 222.95503 36.589123 c
222.64664 36.461578 222.36385 36.272617 222.12799 36.036503 c
221.89188 35.800652 221.70291 35.517849 221.57536 35.209454 c
221.44748 34.901196 221.38113 34.567608 221.38132 34.233875 c
221.38113 33.900146 221.44748 33.566559 221.57536 33.258301 c
221.70291 32.949905 221.89188 32.667103 222.12799 32.431252 c
222.36385 32.195137 222.64664 32.006176 222.95503 31.878632 c
223.26329 31.750748 223.59688 31.684393 223.93062 31.684578 c
224.26434 31.684393 224.59793 31.750748 224.90619 31.878632 c
225.21458 32.006176 225.49739 32.195137 225.73325 32.431252 c
225.96936 32.667103 226.15831 32.949905 226.28586 33.258301 c
226.41374 33.566559 226.4801 33.900146 226.47992 34.233875 c
h
226.47992 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
302.10327 202.70038 m
302.10345 202.36665 302.03711 202.03307 301.90924 201.72481 c
301.78168 201.41641 301.59271 201.13361 301.3566 200.89775 c
301.12076 200.66164 300.83795 200.47267 300.52954 200.34514 c
300.22128 200.21725 299.88773 200.15089 299.55399 200.15108 c
299.22025 200.15089 298.88666 200.21725 298.5784 200.34514 c
298.27002 200.47267 297.98721 200.66164 297.75134 200.89775 c
297.51523 201.13361 297.32626 201.41641 297.19873 201.72481 c
297.07086 202.03307 297.00449 202.36665 297.00467 202.70038 c
297.00449 203.0341 297.07086 203.36769 297.19873 203.67595 c
297.32626 203.98434 297.51523 204.26715 297.75134 204.50301 c
297.98721 204.73912 298.27002 204.92809 298.5784 205.05562 c
298.88666 205.1835 299.22025 205.24986 299.55399 205.24968 c
299.88773 205.24986 300.22128 205.1835 300.52954 205.05562 c
300.83795 204.92809 301.12076 204.73912 301.3566 204.50301 c
301.59271 204.26715 301.78168 203.98434 301.90924 203.67595 c
302.03711 203.36769 302.10345 203.0341 302.10327 202.70038 c
h
302.10327 202.70038 m
S
CM
273.23471 34.233875 m
273.23489 34.567608 273.16852 34.901196 273.04065 35.209454 c
272.91309 35.517849 272.72415 35.800652 272.48804 36.036503 c
272.25217 36.272617 271.96936 36.461578 271.66098 36.589123 c
271.35272 36.717007 271.01913 36.78336 270.68539 36.783176 c
270.35165 36.78336 270.01807 36.717007 269.70981 36.589123 c
269.40143 36.461578 269.11862 36.272617 268.88278 36.036503 c
268.64667 35.800652 268.4577 35.517849 268.33014 35.209454 c
268.20227 34.901196 268.13593 34.567608 268.13611 34.233875 c
268.13593 33.900146 268.20227 33.566559 268.33014 33.258301 c
268.4577 32.949905 268.64667 32.667103 268.88278 32.431252 c
269.11862 32.195137 269.40143 32.006176 269.70981 31.878632 c
270.01807 31.750748 270.35165 31.684393 270.68539 31.684578 c
271.01913 31.684393 271.35272 31.750748 271.66098 31.878632 c
271.96936 32.006176 272.25217 32.195137 272.48804 32.431252 c
272.72415 32.667103 272.91309 32.949905 273.04065 33.258301 c
273.16852 33.566559 273.23489 33.900146 273.23471 34.233875 c
h
273.23471 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
348.85806 202.70038 m
348.85825 202.36665 348.7919 202.03307 348.664 201.72481 c
348.53647 201.41641 348.3475 201.13361 348.11139 200.89775 c
347.87555 200.66164 347.59274 200.47267 347.28433 200.34514 c
346.97607 200.21725 346.64249 200.15089 346.30878 200.15108 c
345.97504 200.15089 345.64145 200.21725 345.33319 200.34514 c
345.02478 200.47267 344.742 200.66164 344.50613 200.89775 c
344.27002 201.13361 344.08105 201.41641 343.95352 201.72481 c
343.82562 202.03307 343.75928 202.36665 343.75946 202.70038 c
343.75928 203.0341 343.82562 203.36769 343.95352 203.67595 c
344.08105 203.98434 344.27002 204.26715 344.50613 204.50301 c
344.742 204.73912 345.02478 204.92809 345.33319 205.05562 c
345.64145 205.1835 345.97504 205.24986 346.30878 205.24968 c
346.64249 205.24986 346.97607 205.1835 347.28433 205.05562 c
347.59274 204.92809 347.87555 204.73912 348.11139 204.50301 c
348.3475 204.26715 348.53647 203.98434 348.664 203.67595 c
348.7919 203.36769 348.85825 203.0341 348.85806 202.70038 c
h
348.85806 202.70038 m
S
CM
201.61447 34.233875 m
201.61465 34.567608 201.54829 34.901196 201.42041 35.209454 c
201.29288 35.517849 201.10391 35.800652 200.8678 36.036503 c
200.63194 36.272617 200.34915 36.461578 200.04074 36.589123 c
199.73248 36.717007 199.3989 36.78336 199.06517 36.783176 c
198.73145 36.78336 198.39786 36.717007 198.0896 36.589123 c
197.7812 36.461578 197.4984 36.272617 197.26254 36.036503 c
197.02643 35.800652 196.83746 35.517849 196.70993 35.209454 c
196.58205 34.901196 196.51569 34.567608 196.51587 34.233875 c
196.51569 33.900146 196.58205 33.566559 196.70993 33.258301 c
196.83746 32.949905 197.02643 32.667103 197.26254 32.431252 c
197.4984 32.195137 197.7812 32.006176 198.0896 31.878632 c
198.39786 31.750748 198.73145 31.684393 199.06517 31.684578 c
199.3989 31.684393 199.73248 31.750748 200.04074 31.878632 c
200.34915 32.006176 200.63194 32.195137 200.8678 32.431252 c
201.10391 32.667103 201.29288 32.949905 201.42041 33.258301 c
201.54829 33.566559 201.61465 33.900146 201.61447 34.233875 c
h
201.61447 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
277.23782 202.70038 m
277.23801 202.36665 277.17166 202.03307 277.04379 201.72481 c
276.91623 201.41641 276.72726 201.13361 276.49115 200.89775 c
276.25531 200.66164 275.9725 200.47267 275.66412 200.34514 c
275.35587 200.21725 275.02228 200.15089 274.68854 200.15108 c
274.3548 200.15089 274.02121 200.21725 273.71295 200.34514 c
273.40457 200.47267 273.12177 200.66164 272.88593 200.89775 c
272.64981 201.13361 272.46085 201.41641 272.33328 201.72481 c
272.20541 202.03307 272.13907 202.36665 272.13925 202.70038 c
272.13907 203.0341 272.20541 203.36769 272.33328 203.67595 c
272.46085 203.98434 272.64981 204.26715 272.88593 204.50301 c
273.12177 204.73912 273.40457 204.92809 273.71295 205.05562 c
274.02121 205.1835 274.3548 205.24986 274.68854 205.24968 c
275.02228 205.24986 275.35587 205.1835 275.66412 205.05562 c
275.9725 204.92809 276.25531 204.73912 276.49115 204.50301 c
276.72726 204.26715 276.91623 203.98434 277.04379 203.67595 c
277.17166 203.36769 277.23801 203.0341 277.23782 202.70038 c
h
277.23782 202.70038 m
S
CM
174.05357 34.233875 m
174.05376 34.567608 173.98741 34.901196 173.85953 35.209454 c
173.73198 35.517849 173.54301 35.800652 173.3069 36.036503 c
173.07104 36.272617 172.78825 36.461578 172.47986 36.589123 c
172.1716 36.717007 171.83801 36.78336 171.50427 36.783176 c
171.17055 36.78336 170.83696 36.717007 170.5287 36.589123 c
170.22031 36.461578 169.9375 36.272617 169.70164 36.036503 c
169.46553 35.800652 169.27658 35.517849 169.14903 35.209454 c
169.02115 34.901196 168.95479 34.567608 168.95497 34.233875 c
168.95479 33.900146 169.02115 33.566559 169.14903 33.258301 c
169.27658 32.949905 169.46553 32.667103 169.70164 32.431252 c
169.9375 32.195137 170.22031 32.006176 170.5287 31.878632 c
170.83696 31.750748 171.17055 31.684393 171.50427 31.684578 c
171.83801 31.684393 172.1716 31.750748 172.47986 31.878632 c
172.78825 32.006176 173.07104 32.195137 173.3069 32.431252 c
173.54301 32.667103 173.73198 32.949905 173.85953 33.258301 c
173.98741 33.566559 174.05376 33.900146 174.05357 34.233875 c
h
174.05357 34.233875 m
f
1 0 0 -1 -75.623367 236.93425 cm
249.67694 202.70038 m
249.67712 202.36665 249.61078 202.03307 249.48289 201.72481 c
249.35535 201.41641 249.16638 201.13361 248.93027 200.89775 c
248.69441 200.66164 248.41162 200.47267 248.10321 200.34514 c
247.79497 200.21725 247.46138 200.15089 247.12764 200.15108 c
246.79391 200.15089 246.46033 200.21725 246.15207 200.34514 c
245.84367 200.47267 245.56087 200.66164 245.32501 200.89775 c
245.0889 201.13361 244.89993 201.41641 244.7724 201.72481 c
244.64452 202.03307 244.57816 202.36665 244.57834 202.70038 c
244.57816 203.0341 244.64452 203.36769 244.7724 203.67595 c
244.89993 203.98434 245.0889 204.26715 245.32501 204.50301 c
245.56087 204.73912 245.84367 204.92809 246.15207 205.05562 c
246.46033 205.1835 246.79391 205.24986 247.12764 205.24968 c
247.46138 205.24986 247.79497 205.1835 248.10321 205.05562 c
248.41162 204.92809 248.69441 204.73912 248.93027 204.50301 c
249.16638 204.26715 249.35535 203.98434 249.48289 203.67595 c
249.61078 203.36769 249.67712 203.0341 249.67694 202.70038 c
h
249.67694 202.70038 m
S
[
4
4
] 0 d
0.1882353 0.1882353 0.1882353 sc
274.4921 100.49216 m
274.4921 201.57819 l
S
[] 0 d
246.88651 201.90784 m
357.89279 139.41573 l
S
299.59085 201.65872 m
342.03619 101.28734 l
S
345.97519 202.1947 m
281.12418 110.44701 l
S
0 0 0 sc
0 i
344.85379 159.39684 m
(!)s
296.68384 122.79076 m
(")s
342.95996 117.10672 m
(#)s
1.4173229 w
0.60000002 i
1 0 0.35294119 sc
117.80965 206.36929 m
117.80965 232.84178 l
S
142.67509 206.36929 m
142.67509 224.5209 l
S
168.80544 207.45734 m
168.80544 233.73679 l
S
189.42987 206.36929 m
189.42987 223.74486 l
S
170.75055 233.20074 m
115.8565 233.20074 l
S
191.31789 224.39401 m
140.40251 224.39401 l
S
145.68239 221.91901 m
139.65196 227.34801 l
S
170.79095 221.91901 m
164.76051 227.34801 l
S
192.44661 221.91901 m
186.41617 227.34801 l
S
170.99162 230.50443 m
164.96118 235.93344 l
S
120.37317 230.50443 m
114.34273 235.93344 l
S
337.94476 192.04597 m
328.98624 198.98779 l
S
322.38535 199.25838 m
305.2486 191.13518 l
S
324.02744 198.38205 m
307.48358 168.37889 l
S
1 w
0.50196081 0.50196081 0.50196081 sc
-0.86149579 -0.5077647 -0.5077647 0.86149579 580.646 70.825356 cm
302.83939 170.30583 m
308.12006 170.18959 l
308.10391 174.93149 l
S
0.91065359 -0.41317075 -0.41317075 -0.91065359 29.980984 347.65762 cm
306.17462 186.5603 m
311.45529 186.44406 l
311.43915 191.18594 l
S
-0.59172505 0.80613989 0.80613989 0.59172505 301.71661 -335.45593 cm
330.97507 188.38721 m
336.25574 188.27097 l
336.23959 193.01285 l
S
0 0 0 sc
0 i
1 0 0 -1 -75.623367 236.93425 cm
/F2.1[ 14 0 0 -14 0 0]sf
80.623367 116.52699 m
(!"#)[ 4.662000 7.826000 0.000000 ] xS
237.50226 116.52699 m
(!$#)[ 4.662000 8.204000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
