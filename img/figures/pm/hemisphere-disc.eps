%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 384 291
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 384 291
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: RJITVD+Helvetica
%!FontType1-1.0: RJITVD+Helvetica 1.0000.0.0000
14 dict begin/FontName /RJITVD+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /one put
dup 34 /two put
dup 35 /three put
dup 36 /four put
dup 37 /five put
dup 38 /six put
dup 39 /seven put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






3E113946443E113946443E113946443E113946443E11394660443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B18011DB0964B5358B0AA1D59B0324B5358B0FF1D592B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B74752B2B2B65422B2B4B5279B376706A66456523456023456560234560B08B766818B080622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 9 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/four 4 def
/five 5 def
/six 6 def
/seven 7 def
/u20B8 8 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C99D7B912F94734180BCB0A2B426ACDB993C61FD2485EFF51D552B79ED2E120C8C3A17A67DCF03E7412FCDB8DA0EBD8CAD34A1FBFAF2D47EFCA53DD53E2967F67FCD4065236863224C550BE9D0C09E6D9B421FD7EF2EA8B0086475838B4CA67F16CB6F629D92A7626D14247FA839F6DD849155B5AE52B6B54171F61654FA270A840ECA7DD036DF03C42FE9D5E28BE8E49001B8E59D897193FF3300A9F4AA78EA6E9AA80009875A0E4AF2873385BB7DFA4A291E0794E3C3F27E20430003E7BCEA6F24564167150855314F57C437D243C9B2EBBBA8A8D920E07D797F794AE26DF82388EFE08D13704005293DC6C0A558B67E9F9205021D909B36FBA7186106716FC7924B539185D4DF6E095FF97508169959573C725CCBE56ADB9C189854C28E9E83B0D7AC615F284F0AF7530BD38FA2041000928E4F782F2A30195351239FF64FC9D2B156DFC86855791B23DBB59139E0F0A961A1EDB8E5E416BA0A5F44B94E28B2986994B77658748D944F8E6B29B3FC1BB256BF153424D092FEB3D124DBFF63A98A46C35980CDEDFAF2984989CC0762E3BF5F342AC22F547C09B794A6F04FEEC29F82A3837BC6A6A39694C97AE7AE7C7AD16F32EBD1914C96E105E14ACCBDEA6B08A5873EAFF9B93F090441DA7086BD7EB68082B5303B3A09B24C1FCF1536BAC25E38D760B79657E976711B1073CD489C4CB2EFE2E0E7F965F5D38D2EF57CF2786EE39223D376DE2949A893DB2434F6486D756D2764D1066707491FDE8777636B0
7251D3EECFE240E440DFC1535FC1F8673BD0FB82F62998D589A6DB26A6D842A24A52FDF5CC93D907C27C886F186F407A7325E66BE712CA824BE6E39667155EEF7171DBD3226C1C54A7CD0E862F881790E9D15B934DACA4BC03149734B450530611437041F5372D14999796059DCD284C89877B9F1D75D29AA2A835D050075250B53FA7DAF9FEC9AE17B0F246FC99C77DDFED294DC6BD3FDEAAC52C84999ED2F4E2C188E356ABC6E98BC0326F4169DF7B6D5F1896DF169E5F58491FBC55C174F5499B9B16F0862231AE64799E5F673D7A5D7234B1A7CC4FE74E504C1B51C796B0568D6ED93C550575AD2B8D6CC533DF9E14FB3DA4E1A0AFCADF579889FCCB8D409277FC25B1D8D8D7BD38FA40ACEF980392D77895C3FFA90A61236983364327B0DD893BAADE04E048FEFDEF805E6779DE65C5B51BF90C3D723E3AE97EFA10E158D90E8828455179F3E29BD3957CEA95C94072D383643DD5816CED37F4294ABA0EFACE0BC2CF99ED7DB0AA8FF0107538D5EDF75F36493AEB8E0E6C34F83B056B0509563FC45AFDE0DC3EA83FE824698A6801377B889F700C117809A0430D74A22E3EC692B13E1D205E0083A75693872ED9DC5B3EC8C8C91E238552062C92807D2A1844DB2FF512431A0AE4893E0C7D44EAFB4E6D3F34FDCB90D85EF7E087D81E008FF9282F78D9323DEB6469AF6DB5F350F0647303A8D157057446A373E7F084963BE2DDE44684F6E49292FBB7A3909227FDC3DC904CFA2F8CA03C8EFFCE8150865D3B95CA9BCF12FCCF95E68F8D1D62B71BBE3177D2C08DE64CE31630524C78A4FE353BB31E25B10B6F1690FBEF7C558BBAD73DCB96487E0E2CB7AC27BFA537FF3EA1A957DDE2543B46C152830A4F105DE19291BFAAAE251A1A5357C98313AF9A63D33B9E4AF18D9034C1BD66EF94543F1CDB72B794EBD3800C5BEAEFD3804D3E18FD0908955DC825B5C77496FC2C29A5FC86BC4B55FCF683B599F8ABAB48029232858F00197046ECB419819736432013B4F136F1BB6E958B3D88174A25F55906C4964F2325067BCA074674C7B6FF21DE0AE22802644A55E521A11185A2CF3026E5286035EDADEC0758F5FC4FE3BF050DBEEFCEEB4BBC34E9430DE4A4721B779A586CE1CA43BD5F82C287C09ED1AEED465DC39ADAFA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/RJITVD+Helvetica cguidfix
/F1.1/RJITVD+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2.8346457 w
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 383.79037 290.94193 rc
1 0 0 -1 -11.075867 454.63202 cm
248.95009 376.99631 m
248.95009 388.6936 l
S
285.54865 377.26007 m
285.54865 388.46063 l
S
2.8346457 w
220.4332 235.15492 m
220.4332 384.98462 l
S
CM
209.35733 237.97305 m
216.08932 219.47708 l
202.62535 219.47708 l
h
209.35733 237.97305 m
f
0.70866144 w
1 0 0 -1 -11.075867 454.63202 cm
220.4332 216.65895 m
227.16519 235.15492 l
213.70122 235.15492 l
h
220.4332 216.65895 m
S
0.81568629 0.81568629 0.81568629 sc
CM
147.74017 288.7236 m
161.70518 289.45505 l
179.22293 68.76226 l
165.25792 68.030815 l
h
147.74017 288.7236 m
f
2.8346457 w
0 0 0 sc
0.9968645 0.052212831 0.079127282 -0.9968645 -32.358898 444.65283 cm
167.55295 165.1956 m
181.56187 165.1956 l
181.56187 386.58255 l
167.55295 386.58255 l
h
167.55295 165.1956 m
S
1.4173229 w
1 0 0 -1 -11.075867 454.63202 cm
76.819458 286.25723 m
80.732536 285.42792 l
S
84.645622 284.5986 m
88.558708 283.76929 l
S
92.471794 282.93997 m
96.38488 282.11063 l
S
100.29796 281.28131 m
104.21104 280.452 l
S
108.12413 279.62268 m
112.03722 278.79337 l
S
115.9503 277.96405 m
119.86339 277.13474 l
S
123.77647 276.30542 m
127.68955 275.4761 l
S
131.60265 274.64676 m
135.51572 273.81744 l
S
139.4288 272.98813 m
143.34189 272.15881 l
S
147.25497 271.3295 m
151.16806 270.50018 l
S
155.08115 269.67087 m
158.99423 268.84155 l
S
162.90732 268.01224 m
166.8204 267.18289 l
S
170.73349 266.35358 m
174.64658 265.52426 l
S
178.55965 264.69495 m
182.47273 263.86563 l
S
CM
57.460068 166.61922 m
69.829201 174.33807 l
65.743591 168.37477 l
71.896965 164.58148 l
h
57.460068 166.61922 m
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
68.535934 288.01279 m
80.905067 280.29395 l
76.819458 286.25723 l
82.972832 290.05054 l
h
68.535934 288.01279 m
S
2.8346457 w
90.237511 384.1604 m
352.39404 385.47708 l
S
Q
1 w
q
76.179337 225.53064 m
346.93097 225.53064 l
346.93097 20.042339 l
76.179337 20.042339 l
h
76.179337 225.53064 m
W
0 0 383.79037 290.94193 rc
1 0 0 -1 -11.075867 454.63202 cm
352.62869 364.00186 m
352.63815 346.914 349.24063 329.83359 342.69266 314.05005 c
336.16214 298.25931 326.48688 283.77924 314.39725 271.70294 c
302.32095 259.61331 287.84088 249.93805 272.05014 243.40752 c
256.2666 236.85954 239.18619 233.46205 222.09831 233.4715 c
205.01042 233.46205 187.93002 236.85954 172.1465 243.40752 c
156.35573 249.93805 141.87567 259.61331 129.79939 271.70294 c
117.70975 283.77924 108.03448 298.25931 101.50396 314.05005 c
94.955986 329.83359 91.558479 346.914 91.567924 364.00186 c
91.558479 381.08975 94.955986 398.17017 101.50396 413.9537 c
108.03448 429.74445 117.70975 444.22452 129.79939 456.30081 c
141.87567 468.39044 156.35573 478.0657 172.1465 484.59622 c
187.93002 491.1442 205.01042 494.54172 222.09831 494.53226 c
239.18619 494.54172 256.2666 491.1442 272.05014 484.59622 c
287.84088 478.0657 302.32095 468.39044 314.39725 456.30081 c
326.48688 444.22452 336.16214 429.74445 342.69266 413.9537 c
349.24063 398.17017 352.63815 381.08975 352.62869 364.00186 c
h
352.62869 364.00186 m
S
Q
0.75285834 0.75298899 0.75285 sc
q
0 0 383.79037 290.94193 rc
381.7865 2.0038464 m
289.44742 90.112343 144.80775 92.171074 49.99839 6.7263589 c
f
2.8346457 w
0 0 0 sc
1 0 0 -1 -11.075867 454.63202 cm
392.86237 452.62817 m
300.52328 364.51965 155.88362 362.46094 61.074257 447.90564 c
S
1.4173229 w
11.813823 220.74144 m
162.32982 227.10329 l
S
1 0.3764706 0 sc
198.77354 167.21205 m
348.27045 411.96475 l
S
CM
343.89655 41.76469 m
346.00537 39.655857 346.00537 36.236767 343.89655 34.127937 c
341.78772 32.019104 338.36862 32.019104 336.2598 34.127937 c
334.15097 36.236767 334.15097 39.655857 336.2598 41.76469 c
338.36862 43.87352 341.78772 43.87352 343.89655 41.76469 c
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
354.97241 412.86731 m
357.08124 414.97614 357.08124 418.39523 354.97241 420.50406 c
352.86359 422.61292 349.44449 422.61292 347.33566 420.50406 c
345.22684 418.39523 345.22684 414.97614 347.33566 412.86731 c
349.44449 410.75848 352.86359 410.75848 354.97241 412.86731 c
S
1.4173229 w
192.14085 325.84018 m
334.0827 193.89317 l
S
285.20999 386.88028 m
362.23441 196.33583 l
S
CM
275.87927 66.441322 m
277.9881 64.332497 277.9881 60.913403 275.87927 58.804573 c
273.77045 56.69574 270.35135 56.69574 268.24252 58.804573 c
266.1337 60.913403 266.1337 64.332497 268.24252 66.441322 c
270.35135 68.550156 273.77045 68.550156 275.87927 66.441322 c
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
286.95514 388.19067 m
289.06396 390.2995 289.06396 393.7186 286.95514 395.82742 c
284.84631 397.93628 281.42722 397.93628 279.31839 395.82742 c
277.20956 393.7186 277.20956 390.2995 279.31839 388.19067 c
281.42722 386.08185 284.84631 386.08185 286.95514 388.19067 c
S
1.4173229 w
0 0 0 sc
182.25424 263.57001 m
385.53195 220.85344 l
S
106.36087 402.46689 m
109.33008 399.78662 l
S
112.29929 397.10638 m
115.26849 394.42612 l
S
118.2377 391.74585 m
121.20692 389.06558 l
S
124.17612 386.38531 m
127.14533 383.70508 l
S
130.11455 381.02481 m
133.08376 378.34454 l
S
136.05296 375.66428 m
139.02217 372.98404 l
S
141.99138 370.30377 m
144.96059 367.6235 l
S
147.92979 364.94324 m
150.899 362.263 l
S
153.86821 359.58273 m
156.83743 356.90247 l
S
159.80664 354.2222 m
162.77585 351.54193 l
S
165.74506 348.86169 m
168.71426 346.18143 l
S
171.68347 343.50116 m
174.65268 340.82089 l
S
177.62189 338.14066 m
180.59109 335.46039 l
S
183.56032 332.78012 m
186.52953 330.09985 l
S
189.49873 327.41962 m
192.46794 324.73935 l
S
CM
88.99955 46.491333 m
95.828239 59.37331 l
95.285004 52.165115 l
102.51101 51.9701 l
h
88.99955 46.491333 m
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
100.07542 408.14069 m
106.90411 395.2587 l
106.36087 402.46689 l
113.58688 402.6619 l
h
100.07542 408.14069 m
S
1.4173229 w
1 0.3764706 0 sc
185.05566 269.90005 m
246.82561 380.07422 l
S
CM
175.09282 193.37564 m
177.20164 191.2668 177.20164 187.84772 175.09282 185.73889 c
172.98399 183.63005 169.5649 183.63005 167.45607 185.73889 c
165.34724 187.84772 165.34724 191.2668 167.45607 193.37564 c
169.5649 195.48447 172.98399 195.48447 175.09282 193.37564 c
242.27347 73.55085 m
244.38229 71.442017 244.38229 68.022926 242.27347 65.914093 c
240.16463 63.805264 236.74554 63.805264 234.6367 65.914093 c
232.52788 68.022926 232.52788 71.442017 234.6367 73.55085 c
236.74554 75.659676 240.16463 75.659676 242.27347 73.55085 c
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
186.16869 261.25638 m
188.27751 263.3652 188.27751 266.7843 186.16869 268.89313 c
184.05986 271.00195 180.64076 271.00195 178.53194 268.89313 c
176.42311 266.7843 176.42311 263.3652 178.53194 261.25638 c
180.64076 259.14755 184.05986 259.14755 186.16869 261.25638 c
253.34933 381.08115 m
255.45816 383.19 255.45816 386.60907 253.34933 388.71793 c
251.24049 390.82675 247.82141 390.82675 245.71257 388.71793 c
243.60374 386.60907 243.60374 383.19 245.71257 381.08115 c
247.82141 378.97232 251.24049 378.97232 253.34933 381.08115 c
S
2.8346457 w
0 0 0 sc
332.29529 378.60004 m
332.29529 389.01624 l
S
128.22624 377.07056 m
128.22624 389.01624 l
S
1.4173229 w
1 0.3764706 0 sc
90.41851 194.67377 m
130.81931 395.63635 l
S
CM
124.65213 57.390591 m
126.76096 55.281757 126.76096 51.862667 124.65213 49.753838 c
122.5433 47.645004 119.12421 47.645004 117.01537 49.753838 c
114.90655 51.862667 114.90655 55.281757 117.01537 57.390591 c
119.12421 59.49942 122.5433 59.49942 124.65213 57.390591 c
f
0.35433072 w
1 0 0 -1 -11.075867 454.63202 cm
135.728 397.24142 m
137.83682 399.35025 137.83682 402.76935 135.728 404.87817 c
133.61917 406.987 130.20007 406.987 128.09125 404.87817 c
125.98241 402.76935 125.98241 399.35025 128.09125 397.24142 c
130.20007 395.1326 133.61917 395.1326 135.728 397.24142 c
S
CM
157.25243 228.15137 m
157.25282 228.86165 157.1116 229.57161 156.83942 230.22768 c
156.56798 230.88403 156.16582 231.48592 155.66328 231.98788 c
155.16133 232.4904 154.55945 232.89256 153.90308 233.16402 c
153.24702 233.43619 152.53705 233.57742 151.82677 233.57703 c
151.11649 233.57742 150.40652 233.43619 149.75046 233.16402 c
149.0941 232.89256 148.49222 232.4904 147.99025 231.98788 c
147.48773 231.48592 147.08557 230.88403 146.81412 230.22768 c
146.54195 229.57161 146.40073 228.86165 146.40111 228.15137 c
146.40073 227.44109 146.54195 226.73112 146.81412 226.07506 c
147.08557 225.4187 147.48773 224.81682 147.99025 224.31485 c
148.49222 223.81233 149.0941 223.41016 149.75046 223.13872 c
150.40652 222.86653 151.11649 222.72531 151.82677 222.72571 c
152.53705 222.72531 153.24702 222.86653 153.90308 223.13872 c
154.55945 223.41016 155.16133 223.81233 155.66328 224.31485 c
156.16582 224.81682 156.56798 225.4187 156.83942 226.07506 c
157.1116 226.73112 157.25282 227.44109 157.25243 228.15137 c
h
157.25243 228.15137 m
f
0 0 0 sc
0 i
1 0 0 -1 -11.075867 454.63202 cm
/F1.1[ 18 0 0 -18 0 0]sf
345.88275 267.21335 m
(!)s
271.96017 293.51816 m
(")s
309.31146 210.13289 m
(#)s
195.90746 262.58194 m
($)s
230.98207 354.91794 m
(%)s
49.500397 221.9465 m
(&)s
110.4976 333.34473 m
(')s
ep
end
%%Trailer
%%EOF
