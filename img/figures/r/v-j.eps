%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 309 158
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 309 158
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: DRULCP+Helvetica
%!FontType1-1.0: DRULCP+Helvetica 1.0000.0.0000
14 dict begin/FontName /DRULCP+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /V put
dup 34 /j put
dup 35 /plus put
dup 36 /one put
dup 37 /hyphen put
dup 38 /period put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/plus 1 def
/hyphen 2 def
/period 3 def
/one 4 def
/V 5 def
/j 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00D9D74DCE33D0207CFE6240A0BA2EE7E9AE2670B6E99D09C4F7753A98ECA29BD0C42A9D83BF3B64496109F9F8A4EFCC577A0616B4ED53C866E2854D02EDF9FB51174C32C97391AABB11D8094C6C0EC02B0447CF1C740ACC808668CDD650FC382F74FC19A525C3EB5E622EE518E44D8D27619B73E35BFF8F053DF74D60873BDEE7F514B04AB7A49EC34796C470F82D6A77075128026E30E38C573686829CF252340EBF2F6226F88494B622AC0DEBC6EEF79A681981DF1D8B95DB7F176FB982E489E39FEC24DA05358999D47AF6D742EB07DFAA953CD3F4A1185E9D9CCFE7C872F21DC09710B57927ACEE11E5440B2C298793891C08ADF9586E3F0588722B058D306046AB7CC745193B2F94824E86D64BFE1DFDCA889B39BD862F85FE42011CF7861B4DF9543BDEF0F66EC2E41297EFA0FA5694A8244852850E65ED7D0B4635B0F5AC82C76DA467E88194E811789D20E4586B865290B079CE432894F4E38755461C44D526E82FAA81D1AFE247E9A7D2A7EB3E53DD0DC1D1396B1D1908B68A3F1B1899709E34581E1CCB59F4AB6FC0CAA78013366BE7D4851ADED034E6AA8E6E685A6E9816DC21E6524CFA79F46A8AF14CEC06BF9A64E1CFE86528900489B5C38C28B300567702DB
93EF02270520A6B0F9749147F8986EC07105C3A055A15F58DA9F474219E9BC7DC0DC38BB990328ED354FD1A30CC91F4E280C70D5EEDE827B95D76CE047F7B4E8429B7D311CAA33E666C1508FB6209A8DA0E6C2E50E5054A586A19FF2D54D6B7845B17E7CED0E6FC361C5B49128B23BAE8DC9E2C6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/DRULCP+Helvetica cguidfix
/F1.1/DRULCP+Helvetica renmfont
%RBIBeginFontSubset: WNUKKH+AppleSymbols
%!FontType1-1.0: WNUKKH+AppleSymbols 1.0000.5.0000
14 dict begin/FontName /WNUKKH+AppleSymbols def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /uni22A5 put
dup 34 /uni2282 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -658 1 index div -743 2 index div 6283 3 index div 1966 5 -1 roll div]cvx def
/sfnts [<

00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/uni2282 1 def
/uni22A5 2 def
/uni16F0 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-658 -743 6283 1966}def
/UniqueID 4059904 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C99A1EB5A3F66344A17D2F5847AE611537239524A7C92DD74D59EF3B2D75B0F2B1426702723E8311AAC47F2333354A2672646E1DAF61DDE503E95A11AD14F554F0F84DF67C7D4FC175B8AADAA649026F4512296294C2BD18A6E2EB01F118C381D205B5B394C7F106BC217DA15C236E46F50FD1E8612E82457525EEEE7DAA483D97119FA05DFC2EB072A5846991AAABE085E08058083CCACBDB39909D0AAC2EF6C43863E6477E5F97E432DD24CE375D7AF765158C9E0FABCD257EBCDFF42CE221D6CEC35D96CE4CD11C98879F7CDA74B23211CB8E80E43F78103507B8671C033515C12037456FC49666A2BBA95373897119C6222D5DF70C188DD730E178CECA2AFF4F80342A4D4BC67B15D16A542F728C08EDC8523659F42F1DF4E78115C7EDB83B476CB811700D201652CF88F0AAF5303B1131BB5093B02D8BCA36C2E82249D2EF8D2B6112EE9E58BFEED267439FB96E43A0F0A5E50A1348C24E17ABDFF7F33D240B12CD2A3B19D3338F48DB62F516E3C1266F8E568FB564EE985FF52894DBEC9DD0E0E3A56B42454F822BB2522CC1C26D7603AF469FF892DF7FE79ED96F9D458A144F779C8009FD9B3E2BA17B9514B0F6D44B2A6CF94ECED2E3C53DA119B3FF6E0D7B3FC7BED9CE9863BC8886D9DEB57E52B6D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/WNUKKH+AppleSymbols cguidfix
/F2.1/WNUKKH+AppleSymbols renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.81568629 0.81568629 0.81568629 sc
q
0 0 308.85336 157.22133 rc
308.35336 65.584869 m
308.35559 69.924049 307.31937 74.262283 305.3053 78.472961 c
303.29504 82.684509 300.30939 86.766975 296.51285 90.617508 c
292.71857 94.469452 288.11713 98.088821 282.93427 101.4114 c
277.75189 104.73549 271.99152 107.76304 265.89084 110.47099 c
259.78918 113.18017 253.34946 115.57054 246.78268 117.65276 c
240.2142 119.73579 233.51953 121.51158 226.86276 123.0127 c
220.20412 124.51419 213.58319 125.74177 207.11299 126.73843 c
200.64113 127.73517 194.31931 128.5015 188.21547 129.08231 c
182.11034 129.66298 176.22237 130.05841 170.58473 130.31015 c
164.94618 130.56168 159.55722 130.66962 154.42668 130.66974 c
149.29614 130.66962 143.90718 130.56168 138.26863 130.31015 c
132.63098 130.05841 126.74303 129.66298 120.63789 129.08231 c
114.53405 128.5015 108.21223 127.73517 101.74036 126.73843 c
95.270164 125.74177 88.649246 124.51419 81.990593 123.0127 c
75.333824 121.51158 68.639153 119.73579 62.070671 117.65276 c
55.50391 115.57054 49.064171 113.18017 42.962532 110.47099 c
36.861851 107.76304 31.101479 104.73549 25.919085 101.4114 c
20.736233 98.088821 16.13479 94.469452 12.340514 90.617508 c
8.5439787 86.766975 5.5583057 82.684509 3.548053 78.472961 c
1.5339854 74.262283 0.49778211 69.924049 0.5 65.584869 c
0.49778211 61.245686 1.5339854 56.907455 3.548053 52.696774 c
5.5583057 48.485229 8.5439787 44.40276 12.340514 40.552227 c
16.13479 36.700279 20.736233 33.080914 25.919085 29.758335 c
31.101479 26.434246 36.861851 23.406696 42.962532 20.698751 c
49.064171 17.989565 55.50391 15.599192 62.070671 13.516973 c
68.639153 11.433943 75.333824 9.6581526 81.990593 8.1570435 c
88.649246 6.6555424 95.270164 5.4279633 101.74036 4.4313006 c
108.21223 3.4345636 114.53405 2.6682374 120.63789 2.0874357 c
126.74303 1.5067534 132.63098 1.1113238 138.26863 0.85958493 c
143.90718 0.60805815 149.29614 0.50011861 154.42668 0.5 c
159.55722 0.50011861 164.94618 0.60805815 170.58473 0.85958493 c
176.22237 1.1113238 182.11034 1.5067534 188.21547 2.0874357 c
194.31931 2.6682374 200.64113 3.4345636 207.11299 4.4313006 c
213.58319 5.4279633 220.20412 6.6555424 226.86276 8.1570435 c
233.51953 9.6581526 240.2142 11.433943 246.78268 13.516973 c
253.34946 15.599192 259.78918 17.989565 265.89084 20.698751 c
271.99152 23.406696 277.75189 26.434246 282.93427 29.758335 c
288.11713 33.080914 292.71857 36.700279 296.51285 40.552227 c
300.30939 44.40276 303.29504 48.485229 305.3053 52.696774 c
307.31937 56.907455 308.35559 61.245686 308.35336 65.584869 c
h
308.35336 65.584869 m
f
2 J
0 0 0 sc
1 0 0 -1 -143.77536 439.49933 cm
452.12872 373.91446 m
452.13095 369.57529 451.09473 365.23706 449.08066 361.02637 c
447.0704 356.81482 444.08475 352.73236 440.28821 348.88181 c
436.49393 345.02988 431.89249 341.41049 426.70963 338.08792 c
421.52725 334.76382 415.76688 331.7363 409.6662 329.02835 c
403.56454 326.31915 397.12482 323.92877 390.55804 321.84656 c
383.98956 319.76352 377.29489 317.98773 370.63812 316.48663 c
363.97946 314.98514 357.35855 313.75757 350.88837 312.76089 c
344.4165 311.76416 338.09467 310.99783 331.99081 310.41702 c
325.88568 309.83633 319.99774 309.44092 314.36011 309.18918 c
308.72156 308.93765 303.33258 308.82971 298.20206 308.82959 c
293.0715 308.82971 287.68253 308.93765 282.04401 309.18918 c
276.40634 309.44092 270.5184 309.83633 264.41327 310.41702 c
258.30942 310.99783 251.98759 311.76416 245.51573 312.76089 c
239.04553 313.75757 232.42461 314.98514 225.76596 316.48663 c
219.10919 317.98773 212.41452 319.76352 205.84604 321.84656 c
199.27927 323.92877 192.83954 326.31915 186.7379 329.02835 c
180.63722 331.7363 174.87685 334.76382 169.69444 338.08792 c
164.5116 341.41049 159.91016 345.02988 156.11588 348.88181 c
152.31934 352.73236 149.33366 356.81482 147.32341 361.02637 c
145.30934 365.23706 144.27315 369.57529 144.27536 373.91446 c
144.27315 378.25363 145.30934 382.59186 147.32341 386.80255 c
149.33366 391.0141 152.31934 395.09656 156.11588 398.94711 c
159.91016 402.79904 164.5116 406.41843 169.69444 409.741 c
174.87685 413.06506 180.63722 416.09262 186.7379 418.80057 c
192.83954 421.50977 199.27927 423.90015 205.84604 425.98236 c
212.41452 428.06537 219.10919 429.84119 225.76596 431.34229 c
232.42461 432.84378 239.04553 434.07135 245.51573 435.06802 c
251.98759 436.06476 258.30942 436.83109 264.41327 437.4119 c
270.5184 437.99258 276.40634 438.388 282.04401 438.63974 c
287.68253 438.89127 293.0715 438.99921 298.20206 438.99933 c
303.33258 438.99921 308.72156 438.89127 314.36011 438.63974 c
319.99774 438.388 325.88568 437.99258 331.99081 437.4119 c
338.09467 436.83109 344.4165 436.06476 350.88837 435.06802 c
357.35855 434.07135 363.97946 432.84378 370.63812 431.34229 c
377.29489 429.84119 383.98956 428.06537 390.55804 425.98236 c
397.12482 423.90015 403.56454 421.50977 409.6662 418.80057 c
415.76688 416.09262 421.52725 413.06506 426.70963 409.741 c
431.89249 406.41843 436.49393 402.79904 440.28821 398.94711 c
444.08475 395.09656 447.0704 391.0141 449.08066 386.80255 c
451.09473 382.59186 452.13095 378.25363 452.12872 373.91446 c
h
452.12872 373.91446 m
S
0.627451 0.627451 0.627451 sc
CM
253.48984 65.584869 m
253.49159 68.377419 252.67184 71.169357 251.07852 73.879204 c
249.48822 76.589615 247.12625 79.216949 244.12282 81.695023 c
241.12117 84.174004 237.48099 86.503311 233.38084 88.641609 c
229.28105 90.780876 224.72403 92.729301 219.8978 94.472046 c
215.0708 96.215584 209.97633 97.753952 204.78137 99.093994 c
199.58507 100.43456 194.28893 101.5774 189.02275 102.54346 c
183.75511 103.50978 178.5173 104.2998 173.39874 104.94122 c
168.27887 105.58269 163.27768 106.07587 158.44894 106.44965 c
153.61917 106.82336 148.96123 107.07785 144.5013 107.23986 c
140.04065 107.40173 135.77745 107.4712 131.71869 107.47128 c
127.65992 107.4712 123.39673 107.40173 118.93608 107.23986 c
114.47615 107.07785 109.81819 106.82336 104.98843 106.44965 c
100.15969 106.07587 95.158508 105.58269 90.038628 104.94122 c
84.920059 104.2998 79.682266 103.50978 74.414619 102.54346 c
69.148453 101.5774 63.852314 100.43456 58.655998 99.093994 c
53.46104 97.753952 48.366577 96.215584 43.539577 94.472046 c
38.713341 92.729301 34.156319 90.780876 30.056536 88.641609 c
25.95639 86.503311 22.316196 84.174004 19.31455 81.695023 c
16.311117 79.216949 13.949156 76.589615 12.358849 73.879204 c
10.765523 71.169357 9.9457836 68.377419 9.9475384 65.584869 c
9.9457836 62.792316 10.765523 60.000381 12.358849 57.290527 c
13.949156 54.58012 16.311117 51.952782 19.31455 49.474709 c
22.316196 46.995728 25.95639 44.666428 30.056536 42.52813 c
34.156319 40.388859 38.713341 38.44043 43.539577 36.697689 c
48.366577 34.954147 53.46104 33.415787 58.655998 32.075741 c
63.852314 30.735172 69.148453 29.592335 74.414619 28.626272 c
79.682266 27.659956 84.920059 26.869928 90.038628 26.22851 c
95.158508 25.587044 100.15969 25.093863 104.98843 24.720078 c
109.81819 24.346371 114.47615 24.091887 118.93608 23.929874 c
123.39673 23.768002 127.65992 23.698534 131.71869 23.698458 c
135.77745 23.698534 140.04065 23.768002 144.5013 23.929874 c
148.96123 24.091887 153.61917 24.346371 158.44894 24.720078 c
163.27768 25.093863 168.27887 25.587044 173.39874 26.22851 c
178.5173 26.869928 183.75511 27.659956 189.02275 28.626272 c
194.28893 29.592335 199.58507 30.735172 204.78137 32.075741 c
209.97633 33.415787 215.0708 34.954147 219.8978 36.697689 c
224.72403 38.44043 229.28105 40.388859 233.38084 42.52813 c
237.48099 44.666428 241.12117 46.995728 244.12282 49.474709 c
247.12625 51.952782 249.48822 54.58012 251.07852 57.290527 c
252.67184 60.000381 253.49159 62.792316 253.48984 65.584869 c
h
253.48984 65.584869 m
f
0 0 0 sc
1 0 0 -1 -143.77536 439.49933 cm
397.2652 373.91446 m
397.26694 371.12192 396.4472 368.32996 394.85388 365.62012 c
393.26358 362.9097 390.90161 360.28238 387.89819 357.80429 c
384.89655 355.32532 381.25635 352.99603 377.15619 350.85773 c
373.05643 348.71844 368.49939 346.77002 363.67316 345.02728 c
358.84616 343.28375 353.75171 341.74536 348.55673 340.40533 c
343.36041 339.06476 338.06427 337.92194 332.79813 336.95587 c
327.53046 335.98953 322.29266 335.19952 317.1741 334.55811 c
312.05423 333.91663 307.05304 333.42346 302.2243 333.04968 c
297.39453 332.67596 292.73657 332.42148 288.27664 332.25946 c
283.81601 332.0976 279.55283 332.02814 275.49405 332.02805 c
271.43527 332.02814 267.17209 332.0976 262.71146 332.25946 c
258.25153 332.42148 253.59355 332.67596 248.76379 333.04968 c
243.93506 333.42346 238.93387 333.91663 233.814 334.55811 c
228.69542 335.19952 223.45763 335.98953 218.18999 336.95587 c
212.92381 337.92194 207.62767 339.06476 202.43137 340.40533 c
197.2364 341.74536 192.14194 343.28375 187.31494 345.02728 c
182.48871 346.77002 177.93169 348.71844 173.83189 350.85773 c
169.73175 352.99603 166.09155 355.32532 163.08992 357.80429 c
160.08649 360.28238 157.72452 362.9097 156.13422 365.62012 c
154.54088 368.32996 153.72115 371.12192 153.7229 373.91446 c
153.72115 376.707 154.54088 379.49893 156.13422 382.2088 c
157.72452 384.91919 160.08649 387.54654 163.08992 390.02463 c
166.09155 392.5036 169.73175 394.83289 173.83189 396.97119 c
177.93169 399.11047 182.48871 401.0589 187.31494 402.80164 c
192.14194 404.54517 197.2364 406.08353 202.43137 407.42358 c
207.62767 408.76416 212.92381 409.90698 218.18999 410.87305 c
223.45763 411.83936 228.69542 412.62939 233.814 413.27081 c
238.93387 413.91229 243.93506 414.40546 248.76379 414.77924 c
253.59355 415.15295 258.25153 415.40744 262.71146 415.56946 c
267.17209 415.73132 271.43527 415.80078 275.49405 415.80087 c
279.55283 415.80078 283.81601 415.73132 288.27664 415.56946 c
292.73657 415.40744 297.39453 415.15295 302.2243 414.77924 c
307.05304 414.40546 312.05423 413.91229 317.1741 413.27081 c
322.29266 412.62939 327.53046 411.83936 332.79813 410.87305 c
338.06427 409.90698 343.36041 408.76416 348.55673 407.42358 c
353.75171 406.08353 358.84616 404.54517 363.67316 402.80164 c
368.49939 401.0589 373.05643 399.11047 377.15619 396.97119 c
381.25635 394.83289 384.89655 392.5036 387.89819 390.02463 c
390.90161 387.54654 393.26358 384.91919 394.85388 382.2088 c
396.4472 379.49893 397.26694 376.707 397.2652 373.91446 c
h
397.2652 373.91446 m
S
0 i
/F1.1[ 14 0 0 -14 0 0]sf
411.62656 296.27798 m
(!)s
420.96445 302.27798 m
("#$)[ 3.110352 8.175781 0.000000 ] xS
373.38574 296.27798 m
(!)s
382.72363 302.27798 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
407.9057 378.25119 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
419.91156 385.25119 m
(")s
/F2.1[ 14 0 0 -14 0 0]sf
419.39005 367.7457 m
(!)s
0.60000002 i
1 1 1 sc
CM
188.6246 65.584869 m
188.62579 67.524055 188.07471 69.462822 187.00356 71.344589 c
185.93443 73.226738 184.34656 75.051208 182.32744 76.772018 c
180.30951 78.493462 177.8623 80.11097 175.1059 81.595833 c
172.34973 83.081383 169.28618 84.434402 166.04163 85.644585 c
162.79657 86.855331 159.3717 87.923592 155.87929 88.854141 c
152.38596 89.785057 148.8255 90.578659 145.28522 91.249512 c
141.74393 91.920532 138.2227 92.469139 134.78163 92.914551 c
131.33969 93.359993 127.97753 93.702469 124.73131 93.962029 c
121.48439 94.221542 118.35298 94.398262 115.3547 94.510765 c
112.35593 94.623169 109.48991 94.67141 106.76131 94.671463 c
104.03272 94.67141 101.16669 94.623169 98.167931 94.510765 c
95.169647 94.398262 92.038231 94.221542 88.791321 93.962029 c
85.545097 93.702469 82.182945 93.359993 78.74099 92.914551 c
75.299927 92.469139 71.778702 91.920532 68.237411 91.249512 c
64.697121 90.578659 61.136673 89.785057 57.643337 88.854141 c
54.150913 87.923592 50.726048 86.855331 47.480995 85.644585 c
44.236454 84.434402 41.172897 83.081383 38.416729 81.595833 c
35.660316 80.11097 33.213116 78.493462 31.195194 76.772018 c
29.176073 75.051208 27.588192 73.226738 26.519073 71.344589 c
25.447926 69.462822 24.896839 67.524055 24.898018 65.584869 c
24.896839 63.645676 25.447926 61.706909 26.519073 59.825146 c
27.588192 57.942993 29.176073 56.11853 31.195194 54.397717 c
33.213116 52.67627 35.660316 51.058769 38.416729 49.573898 c
41.172897 48.088356 44.236454 46.735336 47.480995 45.525146 c
50.726048 44.314404 54.150913 43.246143 57.643337 42.315594 c
61.136673 41.384682 64.697121 40.591076 68.237411 39.920227 c
71.778702 39.249203 75.299927 38.700592 78.74099 38.255184 c
82.182945 37.809738 85.545097 37.467266 88.791321 37.207703 c
92.038231 36.948196 95.169647 36.771477 98.167931 36.658974 c
101.16669 36.546566 104.03272 36.498325 106.76131 36.498276 c
109.48991 36.498325 112.35593 36.546566 115.3547 36.658974 c
118.35298 36.771477 121.48439 36.948196 124.73131 37.207703 c
127.97753 37.467266 131.33969 37.809738 134.78163 38.255184 c
138.2227 38.700592 141.74393 39.249203 145.28522 39.920227 c
148.8255 40.591076 152.38596 41.384682 155.87929 42.315594 c
159.3717 43.246143 162.79657 44.314404 166.04163 45.525146 c
169.28618 46.735336 172.34973 48.088356 175.1059 49.573898 c
177.8623 51.058769 180.30951 52.67627 182.32744 54.397717 c
184.34656 56.11853 185.93443 57.942993 187.00356 59.825146 c
188.07471 61.706909 188.62579 63.645676 188.6246 65.584869 c
h
188.6246 65.584869 m
f
0 0 0 sc
1 0 0 -1 -143.77536 439.49933 cm
332.39996 373.91446 m
332.40115 371.97528 331.85007 370.0365 330.7789 368.15472 c
329.70981 366.27258 328.12192 364.44812 326.10278 362.72729 c
324.08487 361.00586 321.63766 359.38837 318.88126 357.9035 c
316.12509 356.41794 313.06152 355.06491 309.81699 353.85474 c
306.57193 352.64398 303.14706 351.57574 299.65466 350.64517 c
296.16132 349.71426 292.60086 348.92065 289.06058 348.24982 c
285.51929 347.5788 281.99808 347.03018 278.55701 346.58478 c
275.11505 346.13934 271.7529 345.79684 268.50665 345.53729 c
265.25977 345.27777 262.12836 345.10107 259.13007 344.98856 c
256.13129 344.87616 253.26527 344.82791 250.53668 344.82785 c
247.80809 344.82791 244.94206 344.87616 241.9433 344.98856 c
238.94501 345.10107 235.8136 345.27777 232.56668 345.53729 c
229.32047 345.79684 225.9583 346.13934 222.51636 346.58478 c
219.07529 347.03018 215.55406 347.5788 212.01277 348.24982 c
208.47249 348.92065 204.91203 349.71426 201.4187 350.64517 c
197.92628 351.57574 194.50142 352.64398 191.25636 353.85474 c
188.01181 355.06491 184.94826 356.41794 182.19209 357.9035 c
179.43568 359.38837 176.98848 361.00586 174.97055 362.72729 c
172.95143 364.44812 171.36356 366.27258 170.29443 368.15472 c
169.22328 370.0365 168.6722 371.97528 168.67339 373.91446 c
168.6722 375.85364 169.22328 377.79242 170.29443 379.67419 c
171.36356 381.55634 172.95143 383.3808 174.97055 385.10162 c
176.98848 386.82306 179.43568 388.44055 182.19209 389.92542 c
184.94826 391.41098 188.01181 392.76398 191.25636 393.97418 c
194.50142 395.18491 197.92628 396.25317 201.4187 397.18375 c
204.91203 398.11465 208.47249 398.90826 212.01277 399.5791 c
215.55406 400.25012 219.07529 400.79874 222.51636 401.24414 c
225.9583 401.68958 229.32047 402.03207 232.56668 402.29163 c
235.8136 402.55112 238.94501 402.72784 241.9433 402.84036 c
244.94206 402.95276 247.80809 403.00101 250.53668 403.00104 c
253.26527 403.00101 256.13129 402.95276 259.13007 402.84036 c
262.12836 402.72784 265.25977 402.55112 268.50665 402.29163 c
271.7529 402.03207 275.11505 401.68958 278.55701 401.24414 c
281.99808 400.79874 285.51929 400.25012 289.06058 399.5791 c
292.60086 398.90826 296.16132 398.11465 299.65466 397.18375 c
303.14706 396.25317 306.57193 395.18491 309.81699 393.97418 c
313.06152 392.76398 316.12509 391.41098 318.88126 389.92542 c
321.63766 388.44055 324.08487 386.82306 326.10278 385.10162 c
328.12192 383.3808 329.70981 381.55634 330.7789 379.67419 c
331.85007 377.79242 332.40115 375.85364 332.39996 373.91446 c
h
332.39996 373.91446 m
S
0 i
/F1.1[ 14 0 0 -14 0 0]sf
323.97485 296.27798 m
(!)s
333.31274 302.27798 m
("%$)[ 3.110352 4.662109 0.000000 ] xS
/F1.1[ 18 0 0 -18 0 0]sf
345.89996 375.9921 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
357.90582 382.9921 m
("%$)[ 3.554688 5.328125 0.000000 ] xS
/F2.1[ 14 0 0 -14 0 0]sf
359.44876 364.90924 m
(!)s
/F1.1[ 18 0 0 -18 0 0]sf
208.89334 377.99469 m
(&&&&&&)[ 5.000977 5.000977 5.000977 5.000977 5.000977 0.000000 ] xS
0.15055998 0.15055998 0.15055998 sc
/F2.1[ 18 0 0 -18 0 0]sf
352.80191 295.74515 m
(")s
390.15909 295.10196 m
(")s
0.60000002 i
0 0 0 sc
415.81003 303.20673 m
406.26993 326.78778 l
S
377.5661 301.47168 m
357.5188 342.43146 l
S
326.22089 302.67984 m
302.48697 350.56296 l
S
ep
end
%%Trailer
%%EOF
