%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 292 187
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 292 187
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CEGDCB+Helvetica-Bold
%!FontType1-1.0: CEGDCB+Helvetica-Bold 1.0000.1.0000
14 dict begin/FontName /CEGDCB+Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
dup 34 /o put
dup 35 /i put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/i 1 def
/o 2 def
/x 3 def
/u20B8 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2084 -985 2942 2374}def
/UniqueID 4330650 def
currentdict currentfile eexec

E2C7B53D94E2C323F06FB306E6AEA4D175EADD77601E4540F2FA469AEB1D413946B934
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CEGDCB+Helvetica-Bold cguidfix
/F1.1/CEGDCB+Helvetica-Bold renmfont
%RBIBeginFontSubset: HVKUYN+Helvetica
%!FontType1-1.0: HVKUYN+Helvetica 1.0000.0.0000
14 dict begin/FontName /HVKUYN+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /four put
dup 34 /three put
dup 35 /zero put
dup 36 /quotesingle put
dup 37 /two put
dup 38 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/quotesingle 1 def
/zero 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00D898BEEB4B0F2A6D1F2A5EFF0D07AC6DA64015526D2A5FA7F803B24ED154B27A088DE57F9FAE6770871018AAFE17175C965446B97E253FBBAB6570706E51CB9680E39142580D5588BFF9C2FF072564761CC01CD9C662FEE05B34BC39D3928FD30CC7CB25851B032C828D40C6DB3ECA44211B9EB3D281EAD2626E7BCF5680BC04BE32EA0F393DD514F653B68C7581C9A8E362DB2B2D23AF7E982B66A4671D2477EF29C18D55EAD5F6366EBB72F1D825B455B6BCC77B233F81EE0240D60495074089599C7E0804D49118B2A3F8DE87CFF38721231BAC7D6F3E37AC5A1148C91134241F63A3D765301FDBD83CC9B17F9065ACA110CAEF09A67BAB58163036B69585DCBB62AD355A9051985040C8535AB75E08BCA30C72174FB66C5F135E053D2EBA82FEE5D149BE57456EDBEBEE32EFF7297A8C45D389E218E0ECEF54241B803EBC1C83C7321144C533B49F35C237EF0EF7550B5BB272EF760F428AFD02E83BB35F921575BBE4927471325F72291046E46325946A59E9C8B356066E41D3EF5BF0824F7158E3263EB34254C5A1E1A8B98D25FDA4F96455632B1687B1DFCC31153DE5077D6F38F9E4F8C240DAE589BF6FB0E030BD2D7A665500FB4437753A03DC497F4419F6CDE84C
12BC1EEF469E327E1D51E3377FF8E82D11EB7039AAB066DC85524E8BE32FC1548FC196A8AC79472E1A0F48884D992580B2EA777B490C1F72C51CEC95AD5670F34E9A54234016123BF4EB98C7B5C45312A50162F4350174C2165D153958D5A922B66A4177B11C9F5660D88D6E694381E68281A988C444E53D4329498A4B635CF13E9A59045D71DC53AA5E5A2D1C472E396195905B585D5B023DB2622551BAA33D36AC4B357E94A55652E163075FED5C8CD1FF72CB751A1119A4CE47F3BA49B476562CCAF367CD41EA88CF8365D5FFA0C1A64555D4CC9A318B7FAEAA6894100A8BEA3012A0A603AD7F37110EFC9DB14179F87547714ADCA1567AFF87C6ECB054528002F6BE53A63D396482E7D7DE8A5C7782EB4039DDDB0E2AD8E9E179E5D0798C914ECB151B6907A9B739B09E18F4022B3A3F4E7B77B37ED9BE10FE77B8E97F305C76E99AF91FC9F3EC12142883D46D29B1A218F1D74CF95050CEB19C92065FB80A89BA2C88EAE56E604B2E940DCAA8514BD8FDE32910B2282C46D5E2DF0605BE16EE466024F65D1C999DFD10028764BD1D690C447DEF0E7221AC05F54EE36E21D8C321E4EC1E0E02EA210419325E6FCB8342A179E72C1DADD33C741842A361433D06F559A3DFBC2D806E5409DF4ADD4190D590B35F930E28A46292B27D673A0CD930D15CD66B1F9C68FAE5C670767B11BB0096B2544B537F7C360B762D7B77C302F2DD3E242A572679D85B895BDBA6CC959C36F674B6EBA67724B298203F601CB697
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HVKUYN+Helvetica cguidfix
/F2.1/HVKUYN+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 291.99454 186.6936 rc
37.274429 136.23679 m
37.049351 136.43657 36.864052 136.68103 36.722778 136.96173 c
36.581314 137.24229 36.483864 137.55893 36.429462 137.89981 c
36.374897 138.24065 36.363277 138.60555 36.38929 138.9818 c
36.415207 139.35811 36.478611 139.74565 36.571609 140.13312 c
36.664581 140.52069 36.787014 140.90814 36.93029 141.28687 c
37.073589 141.6657 37.237644 142.03581 37.414494 142.39165 c
37.591396 142.74759 37.781055 143.08928 37.976925 143.41383 c
38.172852 143.73846 38.374985 144.04604 38.5784 144.33566 c
38.781868 144.62534 38.986633 144.89713 39.189274 145.15152 c
39.39196 145.40594 39.592541 145.64301 39.788826 145.86397 c
39.985123 146.08492 40.196899 146.31203 40.425667 146.54327 c
40.654415 146.77448 40.900185 147.00984 41.163876 147.24602 c
41.427521 147.48215 41.709122 147.7191 42.008415 147.95192 c
42.30764 148.18466 42.624603 148.41325 42.957214 148.63086 c
43.289734 148.8484 43.637943 149.05492 43.997257 149.24185 c
44.356464 149.42874 44.726788 149.59598 45.100708 149.73396 c
45.474529 149.87196 45.851898 149.98059 46.222534 150.05066 c
46.593105 150.12082 46.956825 150.15227 47.30172 150.13824 c
47.646629 150.12439 47.972538 150.06491 48.267826 149.95749 c
48.563213 149.85028 48.827801 149.69507 49.052708 149.4951 c
49.277786 149.29532 49.463085 149.05086 49.604355 148.77016 c
49.745819 148.48959 49.843273 148.17296 49.897675 147.83208 c
49.952236 147.49124 49.96386 147.12634 49.937847 146.75009 c
49.91193 146.37378 49.848522 145.98624 49.755527 145.59877 c
49.662556 145.2112 49.540119 144.82375 49.396847 144.44502 c
49.253548 144.06618 49.089493 143.69606 48.912643 143.34024 c
48.735741 142.9843 48.546082 142.64261 48.350212 142.31805 c
48.154285 141.99341 47.952152 141.68585 47.748737 141.39622 c
47.545269 141.10655 47.340504 140.83476 47.137863 140.58037 c
46.935177 140.32594 46.734596 140.08888 46.538311 139.86792 c
46.342014 139.64697 46.130238 139.41986 45.90147 139.18861 c
45.672722 138.95741 45.426949 138.72205 45.163261 138.48587 c
44.899616 138.24974 44.618011 138.01279 44.318722 137.77997 c
44.019497 137.54723 43.702534 137.31863 43.369923 137.10103 c
43.037403 136.88348 42.689194 136.67697 42.32988 136.49004 c
41.970673 136.30313 41.600346 136.13591 41.226425 135.99792 c
40.852608 135.85992 40.475239 135.7513 40.104603 135.68123 c
39.734032 135.61107 39.370312 135.57962 39.025417 135.59364 c
38.680508 135.6075 38.354595 135.66698 38.059311 135.7744 c
37.763924 135.88161 37.499336 136.03682 37.274429 136.23679 c
f
2 J
-0.8233875 -0.061398018 -0.061398018 0.8233875 610.83783 -38.690399 cm
676.98389 262.92923 m
677.23773 263.1908 677.43951 263.50275 677.5849 263.85449 c
677.73047 264.20612 677.81964 264.59729 677.85468 265.01392 c
677.88983 265.43048 677.87103 265.87222 677.80573 266.32431 c
677.74054 266.77649 677.62903 267.23883 677.48181 267.69846 c
677.33466 268.15817 677.15186 268.61511 676.9447 269.0596 c
676.73755 269.50427 676.50604 269.93649 676.26044 270.35034 c
676.01471 270.76431 675.75488 271.15991 675.48907 271.53427 c
675.22321 271.90872 674.95135 272.26196 674.67957 272.59344 c
674.40778 272.92499 674.13599 273.23483 673.86829 273.52383 c
673.60059 273.81284 673.33698 274.08109 673.08002 274.33029 c
672.82306 274.57947 672.54681 274.83472 672.24969 275.09341 c
671.95258 275.35205 671.63452 275.61417 671.2948 275.87567 c
670.95514 276.13712 670.59363 276.39795 670.21118 276.65219 c
669.82886 276.90634 669.42542 277.15387 669.00415 277.38675 c
668.58295 277.61954 668.14374 277.83762 667.69293 278.03104 c
667.24225 278.2244 666.77997 278.39304 666.31592 278.526 c
665.85199 278.65903 665.38641 278.75623 664.9325 278.80746 c
664.47858 278.85883 664.03644 278.86407 663.62115 278.81607 c
663.20581 278.76825 662.81757 278.66708 662.47058 278.51074 c
662.12347 278.35464 661.81793 278.14337 661.56427 277.88159 c
661.31042 277.62003 661.10864 277.30807 660.96332 276.95633 c
660.81769 276.60474 660.72852 276.21353 660.69354 275.79694 c
660.65833 275.38037 660.67712 274.9386 660.74243 274.48651 c
660.80762 274.03433 660.91913 273.57199 661.06635 273.1124 c
661.2135 272.65265 661.3963 272.19574 661.60345 271.75122 c
661.81067 271.30658 662.04211 270.87433 662.28778 270.46048 c
662.53345 270.04654 662.79333 269.65094 663.05908 269.27658 c
663.32501 268.90213 663.5968 268.54886 663.86859 268.21738 c
664.14044 267.88583 664.41223 267.57602 664.67987 267.28702 c
664.94757 266.99799 665.21118 266.72974 665.46814 266.48053 c
665.72516 266.23135 666.00134 265.97614 666.29852 265.71744 c
666.59558 265.4588 666.91364 265.19666 667.25336 264.93515 c
667.59308 264.67371 667.95453 264.41287 668.33698 264.15866 c
668.7193 263.90451 669.12274 263.65695 669.54407 263.4241 c
669.96527 263.19128 670.40442 262.97324 670.85522 262.77982 c
671.30591 262.58643 671.76825 262.41782 672.23224 262.28482 c
672.69617 262.15182 673.16174 262.0546 673.61572 262.00336 c
674.06958 261.952 674.51172 261.94678 674.927 261.99475 c
675.34235 262.04257 675.73059 262.14374 676.07758 262.30008 c
676.42468 262.45618 676.73029 262.66748 676.98389 262.92923 c
S
657.45148 277.06436 m
692.36566 293.92441 l
675.22278 257.42328 l
S
0 i
1 0 0 -1 -655.065 438.89148 cm
/F1.1[ 18 0 0 -18 0 0]sf
711.1803 291.56342 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
721.19104 296.56342 m
(!)s
0.60000002 i
0.96538597 0.94218725 0.8794046 sc
CM
26.673885 36.222713 m
291.49454 36.222713 l
291.49454 12.595092 l
26.673885 12.595092 l
h
26.673885 36.222713 m
f
0 0 0 sc
1 0 0 -1 -655.065 438.89148 cm
681.73889 402.66876 m
946.55951 402.66876 l
946.55951 426.29639 l
681.73889 426.29639 l
h
681.73889 402.66876 m
S
0.76257128 0.82619178 0.90943533 sc
CM
224.17012 120.89416 m
224.17297 126.05984 223.1459 131.22325 221.16644 135.99463 c
219.19226 140.76819 216.26743 145.14552 212.61272 148.79619 c
208.96204 152.4509 204.5847 155.37573 199.81116 157.34991 c
195.03978 159.32938 189.87636 160.35645 184.71068 160.35359 c
179.545 160.35645 174.38158 159.32938 169.6102 157.34991 c
164.83664 155.37573 160.4593 152.4509 156.80864 148.79619 c
153.15393 145.14552 150.2291 140.76819 148.25491 135.99463 c
146.27545 131.22325 145.24838 126.05984 145.25124 120.89416 c
145.24838 115.72848 146.27545 110.56506 148.25491 105.79369 c
150.2291 101.02013 153.15393 96.642792 156.80864 92.992119 c
160.4593 89.337418 164.83664 86.412575 169.6102 84.438393 c
174.38158 82.458931 179.545 81.431862 184.71068 81.434723 c
189.87636 81.431862 195.03978 82.458931 199.81116 84.438393 c
204.5847 86.412575 208.96204 89.337418 212.61272 92.992119 c
216.26743 96.642792 219.19226 101.02013 221.16644 105.79369 c
223.1459 110.56506 224.17297 115.72848 224.17012 120.89416 c
h
224.17012 120.89416 m
f
0 0 0 sc
1 0 0 -1 -655.065 438.89148 cm
879.23511 317.99731 m
879.23798 312.83163 878.21088 307.66821 876.23145 302.89685 c
874.25726 298.12329 871.3324 293.74597 867.67767 290.09528 c
864.02704 286.44058 859.64972 283.51575 854.87616 281.54156 c
850.10474 279.5621 844.94135 278.53503 839.7757 278.5379 c
834.60999 278.53503 829.44659 279.5621 824.67517 281.54156 c
819.90161 283.51575 815.52429 286.44058 811.87366 290.09528 c
808.21893 293.74597 805.29407 298.12329 803.31989 302.89685 c
801.34045 307.66821 800.31335 312.83163 800.31622 317.99731 c
800.31335 323.16299 801.34045 328.32642 803.31989 333.09781 c
805.29407 337.87137 808.21893 342.24869 811.87366 345.89935 c
815.52429 349.55408 819.90161 352.47891 824.67517 354.45309 c
829.44659 356.43256 834.60999 357.45963 839.7757 357.45676 c
844.94135 357.45963 850.10474 356.43256 854.87616 354.45309 c
859.64972 352.47891 864.02704 349.55408 867.67767 345.89935 c
871.3324 342.24869 874.25726 337.87137 876.23145 333.09781 c
878.21088 328.32642 879.23798 323.16299 879.23511 317.99731 c
h
879.23511 317.99731 m
S
2.1259842 w
701.7395 301.0386 m
777.26862 400.34198 l
S
701.49677 300.65814 m
754.84399 401.62296 l
S
815.40375 347.87915 m
777.59131 401.86328 l
S
801.4184 329.21545 m
755.64203 401.86203 l
S
858.47375 283.78317 m
802.10651 328.90421 l
S
871.92694 299.03235 m
815.54132 348.1662 l
S
928.60651 253.59677 m
857.43274 284.57434 l
S
931.93402 265.50101 m
873.17773 297.28915 l
S
0 i
/F1.1[ 18 0 0 -18 0 0]sf
771.65753 417.93713 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
781.66827 422.93713 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
914.21912 287.82297 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
924.22986 292.82297 m
(#)s
/F1.1[ 18 0 0 -18 0 0]sf
747.4585 417.93713 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
757.46924 422.93713 m
(")s
/F2.1[ 18 0 0 -18 0 0]sf
783.30396 417.44022 m
($)s
/F1.1[ 18 0 0 -18 0 0]sf
829.61438 348.97635 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
839.62512 353.97635 m
(%)s
/F1.1[ 18 0 0 -18 0 0]sf
849.61322 273.64822 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
859.62396 278.64822 m
(&)s
/F1.1[ 18 0 0 -18 0 0]sf
721.23499 391.47186 m
(")s
/F2.1[ 12 0 0 -12 0 0]sf
732.2301 396.47186 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
765.41138 356.85715 m
(#)s
/F2.1[ 12 0 0 -12 0 0]sf
770.41235 361.85715 m
(")s
1.4173229 w
0.60000002 i
0 0.23529412 1 sc
709.00958 334.16489 m
717.56555 332.39026 721.81152 328.97345 725.07428 325.55005 c
S
CM
75.156059 118.81721 m
71.436676 111.7344 l
67.754105 115.78223 l
h
75.156059 118.81721 m
f
0.35433072 w
1 0 0 -1 -655.065 438.89148 cm
730.22107 320.07428 m
726.50165 327.15707 l
722.81909 323.10925 l
h
730.22107 320.07428 m
S
2.1259842 w
0.31772566 0.31772566 0.31772566 sc
755.22803 401.99518 m
764.46027 387.92819 l
S
CM
113.52005 57.248142 m
111.68275 49.461979 l
107.10775 52.464584 l
h
113.52005 57.248142 m
f
0.53149605 w
1 0 0 -1 -655.065 438.89148 cm
768.58502 381.64334 m
766.74774 389.4295 l
762.17273 386.42691 l
h
768.58502 381.64334 m
S
2.1259842 w
754.66467 401.58893 m
747.37683 387.41666 l
S
CM
88.873955 58.160229 m
94.745102 52.726112 l
89.878532 50.223553 l
h
88.873955 58.160229 m
f
0.53149605 w
1 0 0 -1 -655.065 438.89148 cm
743.93896 380.73126 m
749.81012 386.16537 l
744.94354 388.66794 l
h
743.93896 380.73126 m
S
2.1259842 w
0 0 0 sc
755.37604 386.5228 m
755.37604 401.50925 l
S
CM
100.31107 59.886227 m
103.04723 52.368687 l
97.574905 52.368687 l
h
100.31107 59.886227 m
f
0.53149605 w
1 0 0 -1 -655.065 438.89148 cm
755.37604 379.00525 m
758.11224 386.5228 l
752.63989 386.5228 l
h
755.37604 379.00525 m
S
1.4173229 w
0 0.23529412 1 sc
783.82129 361.01245 m
783.65228 360.55957 791.67999 360.88199 796.98206 370.10059 c
S
CM
144.76727 61.832798 m
140.1107 68.337898 l
145.38153 69.809181 l
h
144.76727 61.832798 m
f
0.35433072 w
1 0 0 -1 -655.065 438.89148 cm
799.83228 377.05869 m
795.17572 370.55359 l
800.44653 369.08231 l
h
799.83228 377.05869 m
S
1.4173229 w
836.203 303.93893 m
836.0282 303.47064 845.16351 303.99365 850.73163 316.09586 c
S
CM
198.10548 115.6834 m
193.65083 122.32841 l
198.96436 123.63717 l
h
198.10548 115.6834 m
f
0.35433072 w
1 0 0 -1 -655.065 438.89148 cm
853.17047 323.20807 m
848.71582 316.56308 l
854.02936 315.2543 l
h
853.17047 323.20807 m
S
1.4173229 w
872.74786 279.38513 m
872.58093 278.93784 880.9071 279.39487 886.6051 287.6799 c
S
CM
234.83075 144.44237 m
229.88539 150.73073 l
235.08447 152.43834 l
h
234.83075 144.44237 m
f
0.35433072 w
1 0 0 -1 -655.065 438.89148 cm
889.89575 294.44913 m
884.95038 288.16074 l
890.14948 286.45312 l
h
889.89575 294.44913 m
S
1.4173229 w
928.82458 254.66977 m
931.33386 263.51468 l
S
CM
278.32056 168.14465 m
273.63657 174.63004 l
278.90112 176.12357 l
h
278.32056 168.14465 m
f
0.35433072 w
1 0 0 -1 -655.065 438.89148 cm
933.38556 270.74683 m
928.70154 264.26144 l
933.96613 262.76791 l
h
933.38556 270.74683 m
S
2.1259842 w
0 0 0 sc
802.09192 328.77313 m
788.17938 332.78946 l
S
CM
125.89179 104.01698 m
132.3555 108.73084 l
133.87329 103.47321 l
h
125.89179 104.01698 m
f
0.53149605 w
1 0 0 -1 -655.065 438.89148 cm
780.95679 334.87451 m
787.42047 330.16064 l
788.93829 335.41827 l
h
780.95679 334.87451 m
S
CM
148.29831 110.09219 m
148.29845 110.34888 148.24741 110.60544 148.14906 110.84252 c
148.05096 111.07972 147.90562 111.29723 147.72403 111.47862 c
147.54263 111.66022 147.32512 111.80556 147.08794 111.90365 c
146.85085 112.00201 146.59428 112.05304 146.3376 112.0529 c
146.08092 112.05304 145.82436 112.00201 145.58727 111.90365 c
145.35008 111.80556 145.13257 111.66022 144.95117 111.47862 c
144.76958 111.29723 144.62424 111.07972 144.52614 110.84252 c
144.42778 110.60544 144.37675 110.34888 144.37689 110.09219 c
144.37675 109.83552 144.42778 109.57895 144.52614 109.34187 c
144.62424 109.10468 144.76958 108.88717 144.95117 108.70576 c
145.13257 108.52417 145.35008 108.37884 145.58727 108.28074 c
145.82436 108.18238 146.08092 108.13135 146.3376 108.13149 c
146.59428 108.13135 146.85085 108.18238 147.08794 108.28074 c
147.32512 108.37884 147.54263 108.52417 147.72403 108.70576 c
147.90562 108.88717 148.05096 109.10468 148.14906 109.34187 c
148.24741 109.57895 148.29845 109.83552 148.29831 110.09219 c
h
148.29831 110.09219 m
f
1 w
1 0 0 -1 -655.065 438.89148 cm
803.36328 328.79929 m
803.36346 328.5426 803.31238 328.28604 803.21405 328.04895 c
803.11597 327.81177 802.97064 327.59427 802.789 327.41287 c
802.6076 327.23126 802.39014 327.08594 802.15289 326.98782 c
801.91583 326.88947 801.65924 326.83844 801.40259 326.83859 c
801.14594 326.83844 800.88934 326.88947 800.65228 326.98782 c
800.41504 327.08594 800.19757 327.23126 800.01617 327.41287 c
799.83453 327.59427 799.68921 327.81177 799.59113 328.04895 c
799.4928 328.28604 799.44171 328.5426 799.44189 328.79929 c
799.44171 329.05597 799.4928 329.31253 799.59113 329.54962 c
799.68921 329.7868 799.83453 330.0043 800.01617 330.1857 c
800.19757 330.36731 800.41504 330.51263 800.65228 330.61075 c
800.88934 330.70911 801.14594 330.76013 801.40259 330.75998 c
801.65924 330.76013 801.91583 330.70911 802.15289 330.61075 c
802.39014 330.51263 802.6076 330.36731 802.789 330.1857 c
802.97064 330.0043 803.11597 329.7868 803.21405 329.54962 c
803.31238 329.31253 803.36346 329.05597 803.36328 328.79929 c
h
803.36328 328.79929 m
S
0.31772566 0.31772566 0.31772566 sc
CM
102.10895 36.91433 m
102.10909 37.171009 102.05805 37.427574 101.95969 37.664661 c
101.8616 37.901855 101.71626 38.119362 101.53467 38.300758 c
101.35327 38.482357 101.13577 38.627693 100.89857 38.725788 c
100.66148 38.824146 100.40491 38.875179 100.14824 38.875038 c
99.891563 38.875179 99.634995 38.824146 99.397911 38.725788 c
99.160713 38.627693 98.943207 38.482357 98.76181 38.300758 c
98.580208 38.119362 98.434875 37.901855 98.336784 37.664661 c
98.238426 37.427574 98.187393 37.171009 98.187531 36.91433 c
98.187393 36.657654 98.238426 36.401089 98.336784 36.164001 c
98.434875 35.926807 98.580208 35.709301 98.76181 35.527905 c
98.943207 35.346306 99.160713 35.20097 99.397911 35.102875 c
99.634995 35.004517 99.891563 34.953484 100.14824 34.953625 c
100.40491 34.953484 100.66148 35.004517 100.89857 35.102875 c
101.13577 35.20097 101.35327 35.346306 101.53467 35.527905 c
101.71626 35.709301 101.8616 35.926807 101.95969 36.164001 c
102.05805 36.401089 102.10909 36.657654 102.10895 36.91433 c
h
102.10895 36.91433 m
f
0 0.23529412 1 sc
1 0 0 -1 -655.065 438.89148 cm
757.17395 401.97714 m
757.17407 401.72046 757.12305 401.4639 757.02466 401.22681 c
756.92657 400.98962 756.78125 400.77213 756.59967 400.59073 c
756.41827 400.40912 756.20074 400.26379 755.96356 400.16568 c
755.7265 400.06732 755.46991 400.0163 755.21326 400.01645 c
754.95654 400.0163 754.70001 400.06732 754.46289 400.16568 c
754.22571 400.26379 754.00818 400.40912 753.82678 400.59073 c
753.6452 400.77213 753.49988 400.98962 753.40179 401.22681 c
753.30341 401.4639 753.25238 401.72046 753.2525 401.97714 c
753.25238 402.23383 753.30341 402.49039 753.40179 402.72748 c
753.49988 402.96466 753.6452 403.18219 753.82678 403.36359 c
754.00818 403.54517 754.22571 403.69052 754.46289 403.7886 c
754.70001 403.88696 754.95654 403.93799 755.21326 403.93787 c
755.46991 403.93799 755.7265 403.88696 755.96356 403.7886 c
756.20074 403.69052 756.41827 403.54517 756.59967 403.36359 c
756.78125 403.18219 756.92657 402.96466 757.02466 402.72748 c
757.12305 402.49039 757.17407 402.23383 757.17395 401.97714 c
h
757.17395 401.97714 m
S
ep
end
%%Trailer
%%EOF
