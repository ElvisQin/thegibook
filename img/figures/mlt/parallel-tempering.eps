%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 894 236
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 894 236
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: IQCYYU+Helvetica
%!FontType1-1.0: IQCYYU+Helvetica 1.0000.0.0000
14 dict begin/FontName /IQCYYU+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /V put
dup 34 /parenleft put
dup 35 /x put
dup 36 /parenright put
dup 37 /f put
dup 38 /i put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C0000036C6670676D000000000000040800000A1D676C79660000000000000E28000003C46865616400000000000011EC0000003668686561000000000000122400000024686D74780000000000001248000000206C6F63610000000000001268000000126D617870000000000000127C0000002070726570000000000000129C000003CF05C0001005BD00280580001A042F001F0000FFD90000FFDA0000FFD9FE55FFE605C70010FE6DFFF1033B000000B9000000B902FE3F3C00C0008D009B00AF000600A800C00028005E009800C9016A00B9015C00B400D6011E002E0080000400B8004C00CC01FFFFD1006600A400AF007400C2009500B1000C0028006D0015004C008E0125FF7A000C0040004C00620084FFA200240038008600BD0039005E008E00EDFFA9FFB300400052005500AA00AB00C200CB012302B10413FFAEFFE4000800510074008400AA00D1FF4CFFAF0012002C004200500051008400BE012503DAFF680018003B0098009C009F00A100C100EC018201B4FF68FF76FFD0FFE100020018001C00530053007D01B401E103AF0486FF9CFFEAFFFE001F0028002A00520060009300A300AA00AF00AF00C001000145016B0174019301950240028202B404850517FEFD00060029004700470048006F008800B400B900C400F200F901EF02180310037403C5FF35FFF3000B004B004C0052005500650076007600870087008E00AB00BB0106013001430150017D0194019501D3022A025502580277027802E6034E035C037903D3047304B2058C0598060BFEF5FFBBFFC7FFD50017001D005B0072007E009C00C200D000F400FA01030106011C0125013B0142015E015E0180019B02B901A101B9025001C001D002AA01DF01E301EF01FB0205020C0215022B0274029302AB02C202CE03690395039903DF03F5043E050205A105E5062507DBFE62FE89FECEFF3BFFE1FFF800030008002100390042004E005F0061006F00700034007F008E00AD00AD00AF00BD00C400C500C900C900C900E3011C00ED00F800F901000112011A0132014D014D014E014F01660169019E01BA01BA01BE01E301EF01F602000200020902110217021C02530262026D028002D50280031B032A034A035A03AF03AF03C803D603FB03FB04050413041504470449008C046D049A049A04A604A804B204CF0539053E054E055605800589058C036305D105D6067E068E06B206EF06F00728074C076F078C00B400C900C000C10000000000000000000000000004012400AF0032006E0063014401620096014301A10161008A00740064018801EF01700028FF5D037E0347023000AA00BE007B0062009A007D0089035C00A1FFD803AA00D70093006C0000008000A70442001D0597001D00820030002A
002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020
20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158



00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/V 3 def
/f 4 def
/i 5 def
/x 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00D9DAD660D7A89A71A5F8220716CB2D7A4797916B3BE419B738DB42FE5C21E2137DA0C338D40869B4832754E7CD44428108A4BCA2EC6359275563E8B0ECD71B4184AE4C6C6CC2C65240E565D53818C069E92311674BEA1814238BAF1B532EFBCDF31EF9AEB2B2030DF22B454E9B5FAECD1C7607BA43762C85C938E569E75702F5B929CADDDFDAD71A0E4513B0E0575C85FE081059096C65139059D966128248C013CBC80143591195598ABA000ABE884A2684F4F6132B79E7158D843B50795E21838692D5711D0386725749E723571ECFA86285104F40840BEF1EF89DED30CAD117BAE3F5529C2279166EBF153F8F0D7F83A6B6659AF393285227BEEC4DA147AA3140133E0F2D75622E8F5263EE6373BC18DDDDAB83ED48A93FB5380FEBAD7120F9865778C98D02D8A16E6F34D0FEE4BC970EE513301622F350454023A9689E595D69DFBB4D8AC3B41BD2861C4E0238795573AD540B3001E3FF224FB703586AD408EF5DB37ADABD6641923C8218582F3ABA3F57449FAA8BA25EDE8E303242A2ECFFDD60D06811785FA4F68B064D4C17ED4A8D29ADDFAFFAADF9B86A760A5082F36A2748869DE415091941DF80DE83BBD01DF07C1E2A680D0FDFB4DF0F7CC20ACE5150D43EA194
1EDD08CEBCA6C62788EB6D00EE14F36D5B6ED3138EE83AD623394E4A8A5389E417F0E020300B4045935864960BB5A47A3F1BC3862D69778FD6D327788B09733A45865BBD6F7493FCDFEA4681C34B0F7A89B6F3F4853700C16345151B05D589F2CFD3EAFF0DF526A4A3319BC2EAB83B12B56A1ABB469D7072F17289B5E5A8462F879D377F901BCF4BEAB154DFAACB961E7165576BE743CC4495EFC4C0B19D1005E605E64EC9216571902B4104E9B842E1B02EECFC35096EFF119CF1FF10CA106171196D91DD2F968DA9702FC5FD0DA970D4C5C7F97A620B95A70543F13420AEB3CF0E4A99FE13B9DB21791056C2EBDDA17F32C06219BEDB2A6393AFF101B0538574E531CAE2929B3165A8DAA83FBA797E56E2D9EB61D8AB2CAE03815B4247F64E04E640A55D97E0643D5E5DDA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/IQCYYU+Helvetica cguidfix
/F1.1/IQCYYU+Helvetica renmfont
%RBIBeginFontSubset: GTFFQR+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 8/15/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid11 putdup 3 /cid12 putdup 4 /cid68 putdup 5 /cid69 putdup 6 /cid70 putdup 7 /cid1153 putdup 8 /cid1154 putdup 9 /cid1431 putdup 10 /cid1683 putdup 11 /cid1851 putdup 12 /cid1890 putdup 13 /cid2468 putdup 14 /cid2802 putdup 15 /cid3028 putdup 16 /cid3773 putdup 17 /cid4293 putdup 18 /cid4947 putdup 19 /cid6496 putdup 20 /cid7771 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D94AFD4E452880C5EFE6485A66C8B4272DD4D587D46A70E3AB75729A583A918D339C1DF393C1BDDB297EBD42C2FF7B1F595865C58F3455FA101565F267DB671FF5D3891E350DCBEA8750C5036965090789DCFA721E77DBD12FCCFF7FF7F3B16AD9F01083489A14C8EAE44E1F2ED7A9DD4BF56410C61E7D41E340CC5B9ED0D92F22B58104140F61E59298EA3C6B6F6A7E4B5A1EC58299EAC754A2800F11AF8DEBEF1BBEB36A2EBF0A7A89FD9078175E4DC9F5EA76F1E59A6E805F98E001A85C8CE3D5F6EB1C5D752CCAE29968CE52691738EC8C53DB4307B20440E7466BBF10329699CCDA33688E5C44CE09227F36AE7F777087676FEB191CC053762427DC0A3FFCA24C8BC10CE07B37CAB797265BF1B05EC19F9A0C77F35CA6A1FF02E3EFC4BC51F799CE277C3202605CD2765F7638D39A18CCE6822942235CD3498988CE22865B535DC3182CEE8152BDF9FBC561C988D401950FBD12BFD91BAB10413244AAA4AC5900DF72F7DBE13B4120ED8AF8F1DC520405F3868922B8B5BEE00C60032F5CFA5E7853AFAB161525C6B347D1411626D7EEC9690371574BD365251441CFDFBCE21D38F51FB669B157D3D8509D85BCE448CC78DE8A29AC61064F6BE66DD4C0BDB7C76C37273493E71DE28DF808D5511E5B9460EA50B3F10080C12CC74EB0CF31D91608A0D2419C8DF0E2883550E0D38E15E6264F9B84870CCE59DDF15E0238A5114800BBB171988318C5D729B61EF979A2017E0672EAEB2C52291316C3D0A61B679B6BB2DD948AA8328A84A167CB46BCB61CA394764133CCBF03ECDBF8C79D8E2E961527008EDC9A5F2C099AD5899FAF3F40FEEC2D3CCAF2155819D3A3A7495BBB00B99F45D0E55CF9954D822BEAE31D1239719F64A7237807781AC75F0AF670BEBAAA9E7AB3EC535727EFF439AEF0C254E95A2EEF30124105E77C52ACE977A84F4BD9D031B0B0A60F2CA5908EC2F677A12B152F88A877E23203AD2B31E70F7A05D3257FA9F7DCB07E2768F7FE21782D4316A34A886794DF7A997F1A27450523E871D03D05E850843E340AA2C9BDB48AD7DD60371872237F8131306FB82B973E48468BDDB49995511FE04DABBEE5B8330C7A88C38763855EECEBA77E79035A1C21BE1FAAE17CF18E2D03E850CCA2935D7E7B2964B89EBDEDB12DF2E8A80B927D171A576A06E3F8DC55FAA118168EA6F549DA07495D852770C0A2019680A7B179FFEB33698959305F26D09035B0D09D6138B55181293DF02BF7BD3D53BBEB90A9B16BD1F6C611C2E4595DB6B214C60027578C7E9E417BBB9CD145D1EBB5619C1535AB6D29E9C41E0A6E6BFBE6D1010171C3272C7FBFA2558C750110A03208A017F2E9858454F2BC39AF7458B3A7E07720192225FE7BC49F5B80059C2B001B0F138CE37E893F623DC990D38687FEC4641F5B26C90643BD30DCAEC2D3FCBEC1CFF75C35F1C1BC088F92DB32F0EC1454778BBAC5FD72A0528DA1E8E967B73DDCF681475538357F02B9C95DEF5E5BA8DB2257F2122938C462AF91351D677286194ABC7D79C4DECB63D8B6790F3A8F0FE6F1DBFA2CB53D1CD3F422603BDB77698A23E18BE9214035815BBC26AFFE0E24E19BD80842A24CF7EF99C6AE9127D62947FF58802DF0914798CF1AA68F9BDF4CCC9674111126D1C5EEA7EB35A978F9E0A5367CFE493A422E101A384637D4DA6809007E16D59B3BF830A06F3ED903DFF09D4487EF7882666D7F8E17818416E0BD713EE992E20264C58D9703E3F39AE698F713F8B0956A354626F5229F389DC0738FDCCD931F40A59684306009E9AE71F7C70567A31C19E632AAAB29EBA92EE85AE3E7F2D49401C124664920CA90D4C236F41703FD5C5AA30BEAFBD3C3AD8FCCE86507F17CAEB4C01D3ED5FBC99DF38339FC175FE6F5A4E53FA48A7765DD5B3AF4EDADF8CA1846BA18584123BEB23D66DA96D658939064C46E7570C3386962181CA4B05838EADE6E6CE1EE1A26A2BFAEC2CE874BA1A1753FE315EE4C1EA704A15C6514A8ACD363AA5EF75BC16E92F88703029DEFED424D04BD0F3A7BFA9B39733E6007D7D0A44FB1E020AACF54EAA6CE9DBC2B95B334669F875DBD1F2B260DFF6F0451E29F1EB1D690B61C8284C2BC5F953398DBECEF1A810638DBC852DAA78832B9A642847B315227166FDD632DC86EB6E7DB63536175EFF382BFE3C6B437B360F0A0C17ABD7E163E4120FACA1240EECE7FEAE1195247B156CBC213A5B9969344A5433618638F42F76557A71BBA5AFF7933665DC9A770D885F54F58C22A94F42ABDC63CF796C5216C529C35FC318C5908AEFCAFC2C9DDF5DA5809040F2039042F69FDAE73A90DCED852D6F1BE5CB1D605039049EC60E6B5779F6FA26E5268EF6B2D29206E2D1BE6FFD8DDFDEF7FDB60F74447CD6CE775A3EF24E24464DCFFBC485026BAE0B8152C06BB3F1E39EECCCC17A65323A31CE71947DA2D580596E3EF1F4031B51B749CA4B950A1A5395FDEDD6E6489D437FF0BD7E2D902C3A93B906E0D62201F573936593D5CF4E5BB412EEEF358037476D116FF4B625CAD3D08A367D68A46639CD092081D42FAEB14112268D9CED032939B55C7174D9188CBC47C112072E795A7383642D9D396ADDB618092E39150E734F06700921D27365D9A055CE73A3933C8DA48ACA1337E2E12FA49607682FA18022F257CDFDEFD4056FA1A960E02DB3BE12F2983C64A6DACB872BDFFC84A5F4B73E2C30C450A887E6D40BAA5B1E5DCDCEAC3AB4272C49E730E3EB1290863C8922928E009FC89AC8564841E688FB16A394BDD1685FC42EE460867F35F36BE9596D1F2852F872D411F2EFFCD821DD0B804F893E44B5F89E1044A716334CFFFCBF4181A86F0ACBE215A5D41EA85A13BFD2B4864EC035F35262D97C1810DD9E8B8C287D863D308DC588F692DBB9D670E1CEB13402927E8DB3AEB019341AAA278B558DAA0B6147C72296A7696F1A4B97946B1CCEFE49971937B8AEBE40F6383AE605AFAFA4D68D56A833D27BD9F7039FA83B1F455A604454DBCCB48C4CF5A61CC9A14653C0D793652556A5E7736763468760571CB1255D8A7C59ECB9ED4D16EFFB4C624D8D33538299BFB5048485559369CB0D1F05F48EF3F887D45881DFF57459C07F91CBAAD26C078AB0445804010C25704FB2BE17EE8725AEA579200ED2D93AC4E90761CEE4FAB279F9E744942CE8C2344A04CE7D6770706E3265D6F824A39749B2448DD1A8AED3344F61DA94367D781AAEC40CB45C5A0E49024B1EADFCFE312E0DF950E96530BF359ACB247478A782717B9F88AA33713AE6B1452F1D870164504380F344F466731C6DC9E54F57B19171164DCE72978539F14A0F012805FAA45E122D3EA5E39E0A17AADF9883F1B614C83678C79D104FA741AFB0A5F47F810E2B35E691D627C00643E65B056DB93F8BE20E78B375E6CDF90E707E8AB95CAB433BCD15315703BCEECC39D03E9DC89F1FA3C978EDD6ADF0FDEB715AA7B4651DB27B01CADA0080E9F61F6263A7B1CEC6665561041E0D6A22646F7FE52F2F9F215D8B687BBF90AFA32A08F885EABEABCA161316A42F58C252B7809B9ADB5515D56B6DF177532B28A0D3378AE8ADD523A1FBE1DB0832A10B7197BB6464AEDED42AEB2863195C5B07D629F24D86A325B72FA961148520BA9F24916446E9539AC6624EF65EEEFE027C40BB90484074113835057068B300F1F5BE5B1CCF0EFAD70973FA3EDB755C53E01D5457CC403E1070117FDD1172730D93D27CC0D0212F3E3A9E8FC8A3C4A9605B102A2BBF3516CB326EA42B7AC131B33BC33FC70577EA3BC8892EB2B39AE5D2B069EB7C90CA02920D5D3248E4E52167C874F02AE961E4DE06E78AA38740F4B5F9561989F5AD06E096EC0E5974E9ABA04DE3B320E2111A6853BD7CBEE26FBF7DADDE7D151049913797A947B2DDDED673F32E9BBDA05FFF4F67E868222F17D9D6F51D1D5B86946806F6D8194A161B9FE8790C35B5900266DD8DBB30B3E48FBFF9AACE0299E84F021F56614211D4B67C19AFEC54EC24D4E2257B2E2AB4D6A60F4718E8156A1D84B5C7655BEE0489B20C7B808C935B2D1599483EFB120F886FF89B45C708E6A6EE37BF746AB85A1B0CE628CBBC27DB5487B002AE70D71C417E653EC16FF77D82A7249C3D4F7F4116B07F96F1C9D99E0A6DDA7D6D4FF7518D65FE53078567E7CE522FAC127D1EB9D0314487D363D781C42234C52F33A1B57585458E2C6C24E91D4D074B9054AE8097F92245ADA8FD5955648B31AC8BEA5D0E9F665B01EB0AFD937B30F068D16B7E8D02CFA3881AB2E3505C8A3F8D02F1243706929A0C947BC5656D3E7B68F65BECAA169A83572E4A7A90EA38DE9756D5B664ED97832017023E9372A2D32E699250DE594EB7956956787431C577F75FC6C9631F4D65A1F32F29EDF10F9BDFE298184C8A1DDE6B7119038EA35D85BD5ACA5166EE6221F36E6955506444F438F3ACB1D6C8306351341AA10BEF9998DA3079AA163CEC506F11CBB0A49AE8B6E1F115585210B044691686725BD68B54A41A3A444EA48A352A77B7EB4853F43EBC848FD72C65294C7BEAC5A9DCA973828EBDEAF8FA3D822128C703D0025BDF441C3694520AFFCB77952771C721B91211018F89C85AB8DFC6EDB31B204861EBEF2E5E506CF415A89510BE69A3C8C30475CC3DBA63B701DB60A72BB79C316105C532A800C50C40531A74EFC0B06600D044CB4D3B45EBFDC0DA4557FD10ADE03DC8914A5BEFDDA67588EAFE5977125EE100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: GTFFQR+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /GTFFQR+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid11 putdup 34 /cid68 putdup 35 /cid12 putdup 36 /cid3 putdup 37 /cid1890 putdup 38 /cid6496 putdup 39 /cid3028 putdup 40 /cid1683 putdup 41 /cid2802 putdup 42 /cid69 putdup 43 /cid1851 putdup 44 /cid2468 putdup 45 /cid4947 putdup 46 /cid3773 putdup 47 /cid1153 putdup 48 /cid1431 putdup 49 /cid4293 putdup 50 /cid1154 putdup 51 /cid70 putdup 52 /cid7771 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 22 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid11 {(\002) 0 $SP} putdup /cid12 {(\003) 0 $SP} putdup /cid68 {(\004) 0 $SP} putdup /cid69 {(\005) 0 $SP} putdup /cid70 {(\006) 0 $SP} putdup /cid1153 {(\007) 0 $SP} putdup /cid1154 {(\010) 0 $SP} putdup /cid1431 {(\011) 0 $SP} putdup /cid1683 {(\012) 0 $SP} putdup /cid1851 {(\013) 0 $SP} putdup /cid1890 {(\014) 0 $SP} putdup /cid2468 {(\015) 0 $SP} putdup /cid2802 {(\016) 0 $SP} putdup /cid3028 {(\017) 0 $SP} putdup /cid3773 {(\020) 0 $SP} putdup /cid4293 {(\021) 0 $SP} putdup /cid4947 {(\022) 0 $SP} putdup /cid6496 {(\023) 0 $SP} putdup /cid7771 {(\024) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/GTFFQR+PingFangSC-Regular cguidfix
/F2.1/GTFFQR+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1.4173229 w
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 893.0694 235.96199 rc
1 0 0 -1 -3.1408689 407.57248 cm
8.8361835 371.92999 m
8.8361835 184.44463 l
S
CM
5.6953149 233.40271 m
10.681969 219.70198 l
9.0185347 224.28722 2.3703282 224.28722 0.70866144 219.70198 c
h
5.6953149 233.40271 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
8.8361835 174.16977 m
13.822838 187.87048 l
12.159404 183.28525 5.5111971 183.28525 3.8495302 187.87048 c
h
8.8361835 174.16977 m
S
0.17475939 0.53638399 0.62876332 sc
CM
12.751303 148.62004 m
170.6404 148.62004 l
170.6404 34.134922 l
12.751303 34.134922 l
h
12.751303 148.62004 m
f
205.67297 151.15657 m
243.18054 151.15657 l
243.18054 34.134922 l
205.67297 34.134922 l
h
205.67297 151.15657 m
f
1.4173229 w
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
307.02286 372.14706 m
307.02286 184.0903 l
S
CM
303.88202 233.75702 m
308.86865 220.0563 l
307.17542 224.64151 300.52719 224.64151 298.89536 220.0563 c
h
303.88202 233.75702 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
307.02286 173.81544 m
312.00952 187.51616 l
310.31628 182.93095 303.66806 182.93095 302.03622 187.51616 c
h
307.02286 173.81544 m
S
0.17475939 0.53638399 0.62876332 sc
CM
305.15784 34.347595 m
359.90894 80.578674 323.32925 131.2702 348.47556 141.33868 c
370.56793 150.1844 338.77264 58.290871 403.33411 52.41354 c
438.80453 49.184502 414.27576 210.64497 442.09454 213.14195 c
461.43271 214.87773 469.57864 113.99559 470.94006 84.915131 c
473.27502 35.039135 494.92599 13.603266 510.58224 62.810734 c
523.05457 102.01099 537.65302 45.133503 560.38519 35.255867 c
f
0.56470591 0.56470591 0.56470591 sc
341.17816 149.16541 m
357.1304 149.16541 l
357.1304 133.21317 l
341.17816 133.21317 l
h
341.17816 149.16541 m
f
1 w
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
344.31903 258.40707 m
360.27127 258.40707 l
360.27127 274.35931 l
344.31903 274.35931 l
h
344.31903 258.40707 m
S
0.56470591 0.56470591 0.56470591 sc
CM
434.94876 216.03174 m
450.901 216.03174 l
450.901 200.0795 l
434.94876 200.0795 l
h
434.94876 216.03174 m
f
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
438.08963 191.54073 m
454.04187 191.54073 l
454.04187 207.49297 l
438.08963 207.49297 l
h
438.08963 191.54073 m
S
0.56470591 0.56470591 0.56470591 sc
CM
29.861755 156.011 m
45.813992 156.011 l
45.813992 140.05876 l
29.861755 140.05876 l
h
29.861755 156.011 m
f
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
33.002625 251.56146 m
48.954857 251.56146 l
48.954857 267.5137 l
33.002625 267.5137 l
h
33.002625 251.56146 m
S
0.56470591 0.56470591 0.56470591 sc
CM
146.04405 156.06485 m
161.99629 156.06485 l
161.99629 140.11261 l
146.04405 140.11261 l
h
146.04405 156.06485 m
f
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
149.18492 251.50761 m
165.13716 251.50761 l
165.13716 267.45984 l
149.18492 267.45984 l
h
149.18492 251.50761 m
S
1.4173229 w
[
4
4
] 0 d
351.34897 255.45003 m
309.95673 203.67557 233.24361 207.37552 168.8255 245.10385 c
S
CM
156.92554 157.07913 m
165.73132 168.69957 l
162.77946 164.85036 166.38531 159.26497 171.14064 160.32065 c
h
156.92554 157.07913 m
f
0.35433072 w
[] 0 d
1 0 0 -1 -3.1408689 407.57248 cm
160.06641 250.49333 m
168.87219 238.87291 l
165.92033 242.72211 169.52618 248.3075 174.28151 247.25182 c
h
160.06641 250.49333 m
S
1.4173229 w
154.29021 249.18434 m
123.78986 191.64325 71.794464 222.98665 49.21468 242.56264 c
S
CM
38.629631 157.93759 m
44.379601 171.33588 l
42.458385 166.89384 47.302578 162.34056 51.646622 164.50526 c
h
38.629631 157.93759 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
41.7705 249.63489 m
47.52047 236.23659 l
45.599255 240.67862 50.443447 245.2319 54.787491 243.0672 c
h
41.7705 249.63489 m
S
1.4173229 w
[
4
4
] 0 d
41.023762 247.35974 m
70.925774 180.0979 308.25668 166.16507 423.65677 196.526 c
S
CM
430.39642 208.24582 m
415.83661 207.47896 l
420.64749 207.75456 422.58957 214.11279 418.75003 217.01724 c
h
430.39642 208.24582 m
f
0.35433072 w
[] 0 d
1 0 0 -1 -3.1408689 407.57248 cm
433.53729 199.32664 m
418.97748 200.09351 l
423.78836 199.8179 425.73044 193.45969 421.8909 190.55522 c
h
433.53729 199.32664 m
S
1.4173229 w
9.5278444 373.43753 m
263.45093 373.43753 l
S
CM
270.5849 34.134922 m
256.88419 29.14827 l
261.42465 30.848164 261.42465 37.496368 256.88419 39.121574 c
h
270.5849 34.134922 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
273.72577 373.43753 m
260.02505 378.42419 l
264.56552 376.7243 264.56552 370.07611 260.02505 368.4509 c
h
273.72577 373.43753 m
S
1.4173229 w
306.60568 372.43631 m
574.4809 372.43631 l
S
CM
581.61493 35.136143 m
567.91418 30.149488 l
572.42352 31.849283 572.42352 38.49749 567.91418 40.122795 c
h
581.61493 35.136143 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
584.7558 372.43631 m
571.05505 377.42297 l
575.56439 375.72318 575.56439 369.07498 571.05505 367.44968 c
h
584.7558 372.43631 m
S
0 i
/F1.1[ 18 0 0 -18 0 0]sf
15.499052 196.7661 m
(!"#$)[ 12.005859 5.994141 9.000000 0.000000 ] xS
319.37808 201.22069 m
(%"#$)[ 5.000977 5.994141 9.000000 0.000000 ] xS
1.4173229 w
0.60000002 i
617.99872 372.14706 m
617.99872 184.59688 l
S
CM
614.85785 233.25044 m
619.84454 219.54971 l
618.12018 224.13498 611.47198 224.13498 609.87122 219.54971 c
h
614.85785 233.25044 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
617.99872 174.32202 m
622.98535 188.02275 l
621.26105 183.4375 614.61285 183.4375 613.01208 188.02275 c
h
617.99872 174.32202 m
S
1 0.53051901 0.24705882 sc
CM
614.40735 34.347595 m
645.84949 52.289288 650.59442 74.015999 658.98132 73.483719 c
668.9519 72.850922 671.32404 41.571323 705.84088 43.775192 c
736.6687 45.743523 724.62756 90.480255 751.96259 93.731468 c
761.85596 94.908188 769.20618 88.825211 774.32617 72.728485 c
781.59412 49.878571 786.02869 17.271761 824.04865 52.214218 c
839.8363 66.723953 846.90253 45.133503 869.6347 35.255867 c
f
0.56470591 0.56470591 0.56470591 sc
649.35547 80.480133 m
665.30768 80.480133 l
665.30768 64.527901 l
649.35547 64.527901 l
h
649.35547 80.480133 m
f
1 w
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
652.49634 327.09235 m
668.44855 327.09235 l
668.44855 343.04456 l
652.49634 343.04456 l
h
652.49634 327.09235 m
S
0.56470591 0.56470591 0.56470591 sc
CM
743.83289 102.63676 m
759.7851 102.63676 l
759.7851 86.684525 l
743.83289 86.684525 l
h
743.83289 102.63676 m
f
0 0 0 sc
1 0 0 -1 -3.1408689 407.57248 cm
746.97375 304.9357 m
762.92596 304.9357 l
762.92596 320.88794 l
746.97375 320.88794 l
h
746.97375 304.9357 m
S
1.4173229 w
618.42218 372.43631 m
883.73041 372.43631 l
S
CM
890.86444 35.136143 m
877.1637 30.149488 l
881.64209 31.849283 881.64209 38.49749 877.1637 40.122795 c
h
890.86444 35.136143 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
894.00531 372.43631 m
880.30457 377.42297 l
884.78296 375.72318 884.78296 369.07498 880.30457 367.44968 c
h
894.00531 372.43631 m
S
0 i
628.62762 198.63228 m
(%"#)[ 5.000977 5.994141 0.000000 ] xS
/F1.1[ 14 0 0 -14 0 0]sf
648.62274 204.63228 m
(&)s
/F1.1[ 18 0 0 -18 0 0]sf
651.73309 198.63228 m
($)s
1.4173229 w
0.60000002 i
1 0 0.35294119 sc
367.58884 285.34085 m
381.64801 351.73578 418.82227 369.05341 421.68741 249.62236 c
S
CM
363.01648 129.62111 m
367.01648 122.6929 l
361.62729 121.74264 l
h
418.67899 165.4669 m
421.32874 157.91849 l
415.85678 157.98125 l
h
418.67899 165.4669 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
366.15735 277.95135 m
370.15735 284.87958 l
364.76816 285.82983 l
h
421.81985 242.10556 m
424.4696 249.65399 l
418.99765 249.59122 l
h
421.81985 242.10556 m
S
1.4173229 w
643.15332 345.27841 m
695.62714 297.9924 677.09705 411.5983 734.3551 326.68951 c
S
CM
634.58905 57.083107 m
637.90924 64.36158 l
641.81097 60.524555 l
h
735.35187 87.161469 m
733.57617 79.361015 l
728.9776 82.327354 l
h
735.35187 87.161469 m
f
0.35433072 w
1 0 0 -1 -3.1408689 407.57248 cm
637.72992 350.48935 m
641.05011 343.21088 l
644.95184 347.04791 l
h
738.49274 320.41101 m
736.71704 328.21146 l
732.11847 325.24512 l
h
738.49274 320.41101 m
S
0 0 0 sc
0 i
/F2.1[ 14 0 0 -14 0 0]sf
94.740921 401.98871 m
(!"#$%&'\(\))[ 4.662000 7.826000 4.662000 4.662000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
363.8616 401.98871 m
(!*#$+,-.\(\)/012)[ 4.662000 8.204000 4.662000 4.662000 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
716.71136 401.98871 m
(!3#$41\(\))[ 4.662000 7.658000 4.662000 4.662000 14.000000 14.000000 14.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
