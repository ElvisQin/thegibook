%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A284a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 400 400
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 400 400
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: QZZOHJ+Times-Roman
%!FontType1-1.0: QZZOHJ+Times-Roman 1.0000.0.0000
14 dict begin/FontName /QZZOHJ+Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /D put
dup 34 /a put
dup 35 /t put
dup 36 /space put
dup 37 /P put
dup 38 /o put
dup 39 /l put
dup 40 /I put
dup 41 /n put
dup 42 /s put
dup 43 /r put
dup 44 /u put
dup 45 /c put
dup 46 /i put
dup 47 /U put
dup 48 /S put
dup 49 /M put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<

0218022302260240024B024B025702570261026302680269026D028D028D02A602AF02B402B80300033E03460361036103B003C003D503D703DF03F9041A0474047B04C104CC04DA04E404F204F6051005300555055606180639067606A406B3076B07AD07DA00B200D500AE00BB00000000000000000000000000630079029602FA007E0247009100C8000002CA024800DA007D01B301A4002D00A5009C0034003400DC00DC0040004000310031000A000A00820030002A002A00004027262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2CB00143632362B0002342B00F2B2D2C2045B0004360442D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019234445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C4569B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2DB800272C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800282C2020456944B001602DB800292CB800282A212DB8002A2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800







9C236544B05B2344B1009C455458B19C406544B25B405B4523614459B3868D7145456523456023456560234560B089766818B080622020B1718D4565234520B003266062636820B003266165B08D236544B071234420B186454565234520B003266062636820B003266165B045236544B0862344B10045455458B145406544B286408645236144592B2B2B2B4569534273737373737373737373737373737373737373737475755E73735E00
00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/D 2 def
/I 3 def
/M 4 def
/P 5 def
/S 6 def
/U 7 def
/a 8 def
/c 9 def
/i 10 def
/l 11 def
/n 12 def
/o 13 def
/r 14 def
/s 15 def
/t 16 def
/u 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec

72022FDBA49A13822DDFEF086C1E047890C0C1315BA3310411642542FFD7B02C28D252D57653D521DFD6ADE930A29A9DF5FF5D6F836902E487560217A6FBA989DB1D3C727DB25A10AE2087916DF6A91D7D0B90CF702AD7BE91AE677AD3547484A3B6DF0ADC0F076540AE20CB240570FCA33C1E0D31936189029BBDC0330AF1A46451BF20E1B2FC74F085EDA248500C91BFBBDC44F0E00BB6BB7040CE3FC7C37F724C9481EC936D6D8466DBDD34EAFFD641E503E6BD014B5C7A5BE708F0A78BB43F501BE585D2E971AD2E5D5984896CDCAEDC01BAEB783C5EE65D16559E8A7F724A928271C5FC08FF535A0035B19F7EB9A6B7237748396A428E3DE8FD58E1E686C91AF401D07631764A736F3791DB39E90C3309C493DF72926D591BED583FEEAA2AB421F31DB16DFE0847E856E232E416AB3C63CA664AAC58928988BE79413CDA454795D1C0BCD369DED33D2FF189CBFE090F01C5F8D08040922252BF0B5C19FB984BF9484B37DD2FC9801FDADB07BD2A8EF663342A23C50F66B48F412A2F891AF74BF3977581D20F98286B7C57920D6D736FBEE167E61BD322B0D1D87F236223ED6AB8A2A2DD1FD341DA95C16CEBEF5385864C7A0F6FDBEB40FBFF947FBC09EBA416CD0BA5583EAA52E6C0A6A219F7BCD24928B6931871EBDE4C5BB4BA93EF08A0850A68558927BFECDAA76BF03B47E171EAF62F794F1EFB4C22DEEB58DF13C755A8BB96DAF5116AD13DF7002507F20FE95407405460D4A7CCC877753B3525DB8FE8DFD44E748CB8776314BCAD96A032BE7D6FD77012341C454793EE71A6F27DBA6C56E260D4B6F27082980AE408E2123AC6B6CC99C569DE140C168AFF874AB6118AABF851C90C7522BDBAFFBD054E377E627915940D167AB2A214037B9A2907A112D3B2F4440F92B38DB5BD683D38B151B678B11CE90373E5D22F71332073E1F68DB3154304EAA97790BC6BF3AC122826A4358D96B065C7AD5B927B29F004AE8B229C256696274840AD28CA693C9A1683205041104BC9DDC2BF81E525FB42F5BC8A280D9316A75A928F8646243064E74658F6CB3AD8D9345CBFF8BD34E213564015FEB93AEAF38150C2F6572946751646F0B3A336C7964303047B27385AD997903B44CBFEDC325A75C454595018BF9575D062073DE5D1CA7879D0C071837B76220878F11C0E7762A6B2310905151EBBABD6B62EDA7C6D8A8C2C5FB3812F7E3444DCA52FD7210EB2A7CAFCD9176F38B98F1346FCAF17B0905D5E41B7AACBFFC1D06F068C0985AB3DDEB1D4E607E5D0AA80759AB104A70B25C2BDC2EEE0E0D63CF859DB403383F9AFF2CEDC96195DBDC795B13C18F1CE49A9BAD1F2E2294AE6C19B4D7DBEF60C47EA735C264AD99225E80ABF45A4F9E384BC32D3C63F620A37ABE7DE60C724AB8EA85C4CD87C1978AFFA7E0EEBC112FDE41578F154F9892248BB
33120D637E91127A855D6D88146DFACF4DB3A8B87C8F20DB33AE0CF8633E9C603A94FF6BAD1E590185C09C3A0BA8EF7F19EAAED065F1674F580A9AAA888829C5D46592F78F368F62963EC2251E4FB07BCECEBDDAA3542A003D534DD6C3B52C47C62DDA399F5A184C93423182860E89F28C1D3564B368FD6C5729E95E867C22A55472D8F57B480DEA14092340833396069C0C0AA08F5FD46D665BB67BADD953CB763E1CD6215DB980B1FD9D68B23ECAA4899BA8DEC395B1BD9E8780220DC39F3747B4040960DD17C024329F98DA2DD2CA3D01BDF1C126D125E99965BEDD4BF897457B9890C953E7A1B673CFE7CEBA1FF98FF7D039BD604808583F9DE3291E2C61969540CB0D585C2D97C4812276F1E65B3D3526C711F3CF70A02169E646F68DB482DC8AB956C9B54F87492A60E03FDEC0D7EA211242BAD237FC56AA2FE9A6456FBE2C8EA4F6951596DF39D43D1A3EB7BE011BBA04248496B380CA0A50960C2C5DA8E17296FD423E6E9FEE997E7C0B98F5FE6B96283FC626686FF1EEB929830C872F13EE84BBE3F07B8D6E732C835880637CFF697E5432A36A99C7C97660FF84B273E18B45A5A3276F066E2FE69FED54D708B5ECE88EFA01EF0CC7870E0E5F44622596F1F0A3A02D2F271254363459EB0353C1A1FABA7755B9CFD1912B0BAB1B8B152332F9695015C10BD06B32251B7247F39D321DDAE21B51CF365E89AAB4F420584A632BE1D9532A75AFA2868B82419A8B5E10051463E4DD56CE44A8D7F6C4D864D95B3013D404163776F81C1C8124918F53B31E73115F063112C51C4FF81FD37B270B9F9F1647ECA37961C32A78EC2A0BC28463A0DDEC837A3C7903C00E18717CC1FD7C3B9ED8828F451738F9106E9C252EC6A8AEC557AF78A9F49581555C26CDD2BF22BB02A12EC889650E7334EA0C7F265079132D9D787B95E148B130ECA1A02C434719C57B303E897408BA8054FCB8B525DB57FABEA23EBBE252F927CD84C262DD4643CEB809B454D033EA3F313F68F2EA35DF054C49791EDF52B0391D4FB363E8ECD41E1E7EC5AF4D3C4F58F82D1D76DD1D8A7BCD37BB7894638CBC745C5181726F2584EF8B4C51938545F647511CE1707A15C8EC86072F2A906B4403E53331EF14DE077CCA4FBB6E5FC57844FC4E96F756B60BD4DA3BECB2738AAD2CF24E87123ACE45B8F9EAD465DBC338E4FD7AA6F2E741D7EDD193FB847FBA49C6D4ECF151B2117F7490CEEF4EA0A697DC8BE2CF75B0738FC77B8752796E27E29786B4A795817FDE5CD3FDF9156805B693C5C3385D74C4B162C1D1DFA458DDEDD92F8EEDE99A172BFDBAFAF845B0BC3EB10655F2135B5282BD44604E04DE555E4D6781E32F33DB2417EB6039DC21C0BE1D267EE2BB20FEF6A65B880FB36A4639BDAFFC340F2FAF42CE9C4B890159516FABE8EFF2DEFBD4D2E65B11A7AABEE64A461F
6AA016FB29D94842F71D88EA5780F7A3D5747611B0770FB9CC4ABE9E1036F7C9C9147E737A2C89FE2CA9742D1552CE1C880BDFD2806625E5B86FAACFE911CDAF9F9D5699EE259FA2EF93CEFFA2666B199C4A8EE49F4D150738A8A7E03A267B0CBC1D7AF823DB609198D27260A3C70CB5E1C62DDB5460C2A8EC52C1849BFD99F4C57EBBE1D18BAA49CDF186221492A1C36C5058F8C4EAB58AB486751803993FC6CD4DF7DA4B9744AEEE3FF575B43F43CDC76823DA589562E7E3E66C7B92BD76C2FC8271B822F2693066C667E3A8DD03B63BF41CDE7BD0326C457387882F50CBCAF15133483065107AF8A362D2D8ECCB1D3FB0680439DF778C9BF64029A890A7EDE12B32F684A8117E586BA5B1470D068DDA75774AF36D4814430C39F6897D9E11FD02B7F8E2AA99C77C2CA55EA8C2623B70E10E561BF2BFAF1E165B6D8464CD88A66311F5A098EC882B2E14419045E3712586EB96C527F7CAC23A294851A9783A444FC9CAD4B82135D91B6C06ACDDBF94C9E54B448549A97F48B423509869756C7F49F83E6EFA207D629423CA8D11DE24F0C274C6A3F1A2EB459EA23A8DD94D2BDF16ECC63732C684C99EE9F4A1D8C9B761B7C261A102B254BAFE0C5770488BE4F13EE04B266E160C1C85C920BFAA4F943F5B5D1AF4E766BE6450CFCD21C88B36F4CF8439FFF79C9BE808499A82B7D0B84BF106B199E9C93476223D92849ED152F77A373FCB85D977A79D1BC349EA1DB5C44D2FEA8F581A6469B49CC18996E475301BD876A26C57DFB1D0088C15FA5308B2B187386638BE36724D8CAD2C8187D6CC464281E2A38336BAE6839352823560F6D6729DA6A575BD201A79BCDE96E8592C8A1FC634221836370A6962761C1DCA8C235758ACEF37A40C648E2881B0F7CF8D50920BB82F1191AE21439F506731D5E6DFCED85CDD7EEA7E152E8369D96D0964802F87D392AAC46580D439B4A508D8C0FAEB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/QZZOHJ+Times-Roman cguidfix
/F1.1/QZZOHJ+Times-Roman renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 400 400 rc
0 0 m
400 0 l
400 400 l
0 400 l
h
f
/Cs2 SC
1 1 1 sc
0 0 m
400 0 l
400 400 l
0 400 l
h
f
0.80000001 0.80000001 1 sc
20 20 m
60 20 l
60 309.65909 l
20 309.65909 l
h
f
2 w
1 J
1 j
0 0 0 sc
1 0 0 -1 0 400 cm
20 90.340912 m
60 90.340912 l
60 380 l
20 380 l
h
S
0 0.5 0.5 0 0 400 cm
/F1.1[ 48 0 0 -48 0 0]sf
-565.69843 97.112 m
(!"#"$%&&')[ 34.665600 21.302400 13.334400 21.302400 12.000000 26.697600 24.000000 24.000000 0.000000 ] xS
0.80000001 1 0.80000001 sc
CM
90.340912 340 m
380 340 l
380 380 l
90.340912 380 l
h
f
0 0 0 sc
0 -1 -1 0 0 400 cm
20 -380 m
60 -380 l
60 -90.340897 l
20 -90.340897 l
h
S
0.5 0 0 -0.5 0 400 cm
316.09171 97.112007 m
(\(\)*#+,-#.&\)$%&&')[ 15.984000 24.000000 18.681600 13.334400 15.984000 24.000000 21.302400 13.334400 13.334400 24.000000 24.000000 12.000000 26.697600 24.000000 24.000000 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
210.1705 245 m
260.1705 245 l
260.1705 295 l
210.1705 295 l
h
f
0 0 0 sc
1 0 0 -1 90.170464 425 cm
120 130 m
170 130 l
170 180 l
120 180 l
h
S
0.5 0 0 -0.5 90.170464 425 cm
/F1.1[ 56 0 0 -56 0 0]sf
253.9062 330.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
210.1705 170 m
260.1705 170 l
260.1705 220 l
210.1705 220 l
h
f
0 0 0 sc
1 0 0 -1 90.170464 420 cm
120 200 m
170 200 l
170 250 l
120 250 l
h
S
0.5 0 0 -0.5 90.170464 420 cm
253.9062 470.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
210.1705 95 m
260.1705 95 l
260.1705 145 l
210.1705 145 l
h
f
0 0 0 sc
1 0 0 -1 90.170464 410 cm
120 265 m
170 265 l
170 315 l
120 315 l
h
S
0.5 0 0 -0.5 90.170464 410 cm
253.9062 600.01562 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
210.1705 20 m
260.1705 20 l
260.1705 70 l
210.1705 70 l
h
f
0 0 0 sc
1 0 0 -1 90.170464 400 cm
120 330 m
170 330 l
170 380 l
120 380 l
h
S
0.5 0 0 -0.5 90.170464 400 cm
253.9062 730.01562 m
(%/)[ 31.147200 0.000000 ] xS
0 J
0 j
4 M
1 0 0 -1 0 400 cm
290 70 m
290 355 l
S
CM
270 46 m
270 44 l
290 44 l
290 46 l
270 46 l
h
f*
265.384 45 m
272.30399 49 l
272.30399 41 l
265.384 45 l
h
f*
0.53333342 w
1 0 0 -1 0 400 cm
265.384 355 m
272.30399 351 l
272.30399 359 l
265.384 355 l
h
S
CM
270 121 m
270 119 l
290 119 l
290 121 l
270 121 l
h
f*
265.384 120 m
272.30399 124 l
272.30399 116 l
265.384 120 l
h
f*
1 0 0 -1 0 400 cm
265.384 280 m
272.30399 276 l
272.30399 284 l
265.384 280 l
h
S
CM
270 196 m
270 194 l
290 194 l
290 196 l
270 196 l
h
f*
265.384 195 m
272.30399 199 l
272.30399 191 l
265.384 195 l
h
f*
1 0 0 -1 0 400 cm
265.384 205 m
272.30399 201 l
272.30399 209 l
265.384 205 l
h
S
CM
270 271 m
270 269 l
290 269 l
290 271 l
270 271 l
h
f*
265.384 270 m
272.30399 274 l
272.30399 266 l
265.384 270 l
h
f*
1 0 0 -1 0 400 cm
265.384 130 m
272.30399 126 l
272.30399 134 l
265.384 130 l
h
S
CM
65 46 m
65 44 l
200 44 l
200 46 l
65 46 l
h
f*
204.616 45 m
197.696 41 l
197.696 49 l
204.616 45 l
h
f*
1 0 0 -1 0 400 cm
204.616 355 m
197.696 359 l
197.696 351 l
204.616 355 l
h
S
CM
65 121 m
65 119 l
200 119 l
200 121 l
65 121 l
h
f*
204.616 120 m
197.696 116 l
197.696 124 l
204.616 120 l
h
f*
1 0 0 -1 0 400 cm
204.616 280 m
197.696 284 l
197.696 276 l
204.616 280 l
h
S
CM
65 196 m
65 194 l
200 194 l
200 196 l
65 196 l
h
f*
204.616 195 m
197.696 191 l
197.696 199 l
204.616 195 l
h
f*
1 0 0 -1 0 400 cm
204.616 205 m
197.696 209 l
197.696 201 l
204.616 205 l
h
S
CM
65 271 m
65 269 l
200 269 l
200 271 l
65 271 l
h
f*
204.616 270 m
197.696 266 l
197.696 274 l
204.616 270 l
h
f*
1 0 0 -1 0 400 cm
204.616 130 m
197.696 134 l
197.696 126 l
204.616 130 l
h
S
0.5 0 0 -0.5 0 400 cm
/F1.1[ 44 0 0 -44 0 0]sf
30.536131 95.685997 m
(0\(1!)[ 24.472800 14.652000 39.124800 0.000000 ] xS
ep
end
%%Trailer
%%EOF
