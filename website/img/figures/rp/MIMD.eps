%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A284a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 400 400
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 400 400
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: VXWWYI+Times-Roman
%!FontType1-1.0: VXWWYI+Times-Roman 1.0000.0.0000
14 dict begin/FontName /VXWWYI+Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /D put
dup 34 /a put
dup 35 /t put
dup 36 /space put
dup 37 /P put
dup 38 /o put
dup 39 /l put
dup 40 /I put
dup 41 /n put
dup 42 /s put
dup 43 /r put
dup 44 /u put
dup 45 /c put
dup 46 /i put
dup 47 /U put
dup 48 /M put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/space 1 def
/D 2 def
/I 3 def
/M 4 def
/P 5 def
/U 6 def
/a 7 def
/c 8 def
/i 9 def
/l 10 def
/n 11 def
/o 12 def
/r 13 def
/s 14 def
/t 15 def
/u 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B322782D282AC603D1F5A452D1E7AE90B2FF78B151C731C717F5B5A2ECE57D3BD22888D365576C7401B9DBCDCBBAE6EA7383B3DD9E256B9B0B40D639D0F80EC7EBBA794FA639DBBC6A218178E3C8125C66B12AABEF673D566159CCDACE4A4C7905D87D3BA57A6E62850EF2E4CF5737C5BE220863521514184959CCE7298104C0AA5115D697A12C7620A1EB056ED0C17B2420CD8ABF6669B2775598B87F4AE8493586B4FC2DAEFB91AB3B32728DC19F1DCD6017964250B72021BB6E89DCCE7EB2002A9353FDD75C6BBA4B41F9A822D7DCAD5E24E87C898E045D9C2925B4070FFFEE81B69F7EFC0DE220FEFB324F7FCAF9BA392702DD9D120442A6EC85AFBDC01130371F7E53446F528CFB250F2867370656E566D5F324ABE35F04375798472E657F1D3AFC842936CD6E12C0D8A27475554C9870258880CA9CC7EC7CFB931B32D8096F33F7FC0269C2AA115A7F8CA1CBA8831151D611C70F147F5C2E84F46434740CBF7ED70B962D56D69A8204477291AB91E30B400E18A72E2C1538DE966CE1437DE4A0C1C76FBDA0DE5645FAEA9B2A27FB9BE3200765372FFB7C47AADC0CE1FBFBF2284E522C91A8523882E5C93A0445289A8906135690A82141FF0BC97B2906AAC7A9FB88D79B6D4629050A0F49B7B084D6D2472A33D7254985B63B9FDE66296B81A6553350D5CA79DCA81EF8CCC8F1BEDC02E366B6294C3A21FAE57A22D8990482F5D6ADD7EB70933E4F55CCA4ED352A68FE73E20EFFFD53FE0B0738FA5460

11F415EAB7F18A696CE383CFC8E4219FAF27EE21AF221D8D8C7E12F827ABF091B508DF12167B724D8D3E4BB38C842E5E3118318478812FB65F5CB79691B6C9A974FEBE4E3C0A9891712C5C31CE1626B0E5A17728C87305F33C7569447130E78FAD80810504156694C14C29BBCCC7A7FCB9B350E51FC57BA6F2350BD2183DC98C3DDFBB650B20336875E81EADCE3CEB7E5F776F32ECA1C0EBAD005E7F7DAC4241BDC26C15ECF2DA98F98A6BD057683D40F4F2F53DDC18EDAF2A18B6536E1B497A002B902458C19633E83DF03726703E77737D1A6B25675021323D9EA1566EA1F213F124C8E5AFC480C256765F172B8AAB37203716C3120D1FFD31B355318F629C0ED432BD3806E3643BB8BC3AE7C728DB440015F334CE64DE93D439F60B24A9DF875BEE43A040A59B0E91C0359E8E5D03BBC1A2B3696AD8FF3C268C0173C67AB0821DE990EB368A2FF3B30DACF74846225BBFAC8195C6CDFB73A544D85632D486ABFDC3FF13751551FC967F83FC071A5CD62802F2546AA06B913D583B650E2056EC4F9FB35F3DED4D0CEBADAD899F02AA2FA04EA307D0FDD8EBD1708200F51FEE063B9E5594B23C6A9F09C697D497231CF402535817B46C891D63369596CE35E3EE2FF7BCD7FBC67DE1CE9376711DD0F0ABB633C46AE606E2132D3AB5E6BADF4F06610E883447F83A585DEEF78370152C9BD09D879BECDC29DF6930C038A094EDEAC8995C9916BBA9A5D3F7183A134E4976D5B4A119EA2F5D9FFF75BDECE394313CAE0C96CFD4527BD7817FFDD54D0EAA30D7653C04684FDDF44FDA2889C50CAB3156CC3CC35332DF8AF448AE9331A6BC2D07E760AD5581571FBDC50C47F9C292CFC473E1AF67B99FD10A3A0D38425A0ABA8696C4400C6C6CA7B1AC54CDED91CF186819C48AAC28ECA7FDAB7E269AE936C27E72ECE92E08C23DA689D8EF12C14441622B10A44D39EE07D7C70975AF601839F48B5777B3B7AD9B826FCA6F1B4791CD121A11C70CF045F3D2816E110FD6E0E5DCC08169BA8C987F9F38AAF61ED3A3F55A058D7D06224AF373A958485ECE106154C8EECAF0EF6FCAD83ACB5A8BA6D0ED99021DCBCCF9B1D55D06385C0FD6F17EF1AD8A8B98D0450AEB9F847B98C0916A526015C939BE1A70832E5F8277756AC3D445EA5999C8B0E3076A7A54936DC018649F15196343D0BB714406A58BE8C822112578677969F7741EAAC919BA5FFD01F42FBD383F1870EDB3E7F45B090EF29CE8C2A66469203BFDF80D27794C5B8587B8F693A915024BC69F091733102EF057BF34B7F7726CA79900513ABA1F632A4AE2B9E10CE3C5F177335B1C6A8F610C807BEED4DCDE88AF38E544F061A182B197175AA61349A58052FE1206A251EF74641978448C49398B33E82EE844BCADAD17180F1FFA0A4C8D6B1E633096D5495FE3B576E0CE4074893F5E1F5F8290A81D
077522DB759951202A51F9459DF204D067356F715BE941DB3775C1D3B8CD94ACFD6CC10F91AC4028E44C638308A30E20CF260370EA102132660C53C272FB93ADF1CBC34896179CBF287BE5CD6C5F2097B76E1DAC7A7D00E5C3F028BB2D885DF6A902C42A93E091DC32C924D606AA3EB9C20CB09CAB5CD9ACCFF48336E0F4587CF6D0FA8615DA4AD58C909042A640FAC4D2DB1B39560C79E05B5EF3430402642CD879C99CE78D0EC12859ADF8A5A2054003EA3430ADDF55656CCBDF56056B17382C4BFCBC52B8F4467B8E08C14E1AA799845E9A16065F397C928BFC9F90FC1A4D0EE12B67C529A695326FAFA8C4E99C4B73E4152456932C4FD0930BB1AD27701D0305D0EB4E89113555A3BD64BB763E8F02A2131B6229F453538CAB9592EB72362A32A256E1E4002AAC210906E62ABFC68A1034E638754D3B3FCB784610A7A13C6E9ECDC9DFD6ECC4A618D4B6C8FD1AF520D62B5A8D630B48709D1254E3A9D0AFD1C4F409D7AA880D095217D6FC1E01DB21C97C35FCEFEF96D43C8D0EBE749F04E957B650389E88FC4F590CB61A30A8A569E0520D31EB74117F64CD76A98AE9C1BE747E9B24321BE7D37F5302C74964FBCC39D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/VXWWYI+Times-Roman cguidfix
/F1.1/VXWWYI+Times-Roman renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 400 400 rc
0 0 m
400 0 l
400 400 l
0 400 l
h
f
/Cs2 SC
1 1 1 sc
0 0 m
400 0 l
400 400 l
0 400 l
h
f
0.80000001 0.80000001 1 sc
20 20 m
60 20 l
60 309.65909 l
20 309.65909 l
h
f
2 w
1 J
1 j
0 0 0 sc
1 0 0 -1 0 400 cm
20 90.340912 m
60 90.340912 l
60 380 l
20 380 l
h
S
0 0.5 0.5 0 0 400 cm
/F1.1[ 48 0 0 -48 0 0]sf
-565.69843 97.112 m
(!"#"$%&&')[ 34.665600 21.302400 13.334400 21.302400 12.000000 26.697600 24.000000 24.000000 0.000000 ] xS
0.80000001 1 0.80000001 sc
CM
90.340912 340 m
380 340 l
380 380 l
90.340912 380 l
h
f
0 0 0 sc
0 -1 -1 0 0 400 cm
20 -380 m
60 -380 l
60 -90.340897 l
20 -90.340897 l
h
S
0.5 0 0 -0.5 0 400 cm
316.09171 97.112007 m
(\(\)*#+,-#.&\)$%&&')[ 15.984000 24.000000 18.681600 13.334400 15.984000 24.000000 21.302400 13.334400 13.334400 24.000000 24.000000 12.000000 26.697600 24.000000 24.000000 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
105 245 m
155 245 l
155 295 l
105 295 l
h
f
0 0 0 sc
1 0 0 -1 -15 425 cm
120 130 m
170 130 l
170 180 l
120 180 l
h
S
0.5 0 0 -0.5 -15 425 cm
/F1.1[ 56 0 0 -56 0 0]sf
253.9062 330.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
105 170 m
155 170 l
155 220 l
105 220 l
h
f
0 0 0 sc
1 0 0 -1 -15 420 cm
120 200 m
170 200 l
170 250 l
120 250 l
h
S
0.5 0 0 -0.5 -15 420 cm
253.9062 470.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
105 95 m
155 95 l
155 145 l
105 145 l
h
f
0 0 0 sc
1 0 0 -1 -15 410 cm
120 265 m
170 265 l
170 315 l
120 315 l
h
S
0.5 0 0 -0.5 -15 410 cm
253.9062 600.01562 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
105 20 m
155 20 l
155 70 l
105 70 l
h
f
0 0 0 sc
1 0 0 -1 -15 400 cm
120 330 m
170 330 l
170 380 l
120 380 l
h
S
0.5 0 0 -0.5 -15 400 cm
253.9062 730.01562 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
255 245 m
305 245 l
305 295 l
255 295 l
h
f
0 0 0 sc
1 0 0 -1 135 425 cm
120 130 m
170 130 l
170 180 l
120 180 l
h
S
0.5 0 0 -0.5 135 425 cm
253.9062 330.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
255 170 m
305 170 l
305 220 l
255 220 l
h
f
0 0 0 sc
1 0 0 -1 135 420 cm
120 200 m
170 200 l
170 250 l
120 250 l
h
S
0.5 0 0 -0.5 135 420 cm
253.9062 470.01559 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
255 95 m
305 95 l
305 145 l
255 145 l
h
f
0 0 0 sc
1 0 0 -1 135 410 cm
120 265 m
170 265 l
170 315 l
120 315 l
h
S
0.5 0 0 -0.5 135 410 cm
253.9062 600.01562 m
(%/)[ 31.147200 0.000000 ] xS
1 0.80000001 0.80000001 sc
CM
255 20 m
305 20 l
305 70 l
255 70 l
h
f
0 0 0 sc
1 0 0 -1 135 400 cm
120 330 m
170 330 l
170 380 l
120 380 l
h
S
0.5 0 0 -0.5 135 400 cm
253.9062 730.01562 m
(%/)[ 31.147200 0.000000 ] xS
2 J
0 j
4 M
1 0 0 -1 0 400 cm
185.116 70.498253 m
185.116 355.00171 l
S
CM
164.125 46 m
164.125 44 l
165.125 44 l
185.125 44 l
186.125 44 l
186.125 46 l
185.125 46 l
165.125 46 l
164.125 46 l
h
f*
160.5 45 m
167.42 49 l
167.42 41 l
160.5 45 l
h
f*
0.53333342 w
0 J
1 0 0 -1 0 400 cm
160.5 355 m
167.42 351 l
167.42 359 l
160.5 355 l
h
S
CM
165.125 121 m
165.125 119 l
185.125 119 l
185.125 121 l
165.125 121 l
h
f*
160.5 120 m
167.42 124 l
167.42 116 l
160.5 120 l
h
f*
1 0 0 -1 0 400 cm
160.5 280 m
167.42 276 l
167.42 284 l
160.5 280 l
h
S
CM
165.125 196 m
165.125 194 l
185.125 194 l
185.125 196 l
165.125 196 l
h
f*
160.5 195 m
167.42 199 l
167.42 191 l
160.5 195 l
h
f*
1 0 0 -1 0 400 cm
160.5 205 m
167.42 201 l
167.42 209 l
160.5 205 l
h
S
CM
165.125 271 m
165.125 269 l
185.125 269 l
185.125 271 l
165.125 271 l
h
f*
160.5 270 m
167.42 274 l
167.42 266 l
160.5 270 l
h
f*
1 0 0 -1 0 400 cm
160.5 130 m
167.42 126 l
167.42 134 l
160.5 130 l
h
S
2 w
2 J
335 70.496529 m
335 355 l
S
CM
314 46 m
314 44 l
315 44 l
335 44 l
336 44 l
336 46 l
335 46 l
315 46 l
314 46 l
h
f*
310.384 45.00174 m
317.30399 49.00174 l
317.30399 41.00174 l
310.384 45.00174 l
h
f*
0.53333342 w
0 J
1 0 0 -1 0 400 cm
310.384 354.99829 m
317.30399 350.99829 l
317.30399 358.99829 l
310.384 354.99829 l
h
S
CM
315 121 m
315 119 l
335 119 l
335 121 l
315 121 l
h
f*
310.384 120.0017 m
317.30399 124.0017 l
317.30399 116.0017 l
310.384 120.0017 l
h
f*
1 0 0 -1 0 400 cm
310.384 279.99829 m
317.30399 275.99829 l
317.30399 283.99829 l
310.384 279.99829 l
h
S
CM
315 196 m
315 194 l
335 194 l
335 196 l
315 196 l
h
f*
310.384 195.00169 m
317.30399 199.00169 l
317.30399 191.00169 l
310.384 195.00169 l
h
f*
1 0 0 -1 0 400 cm
310.384 204.99831 m
317.30399 200.99831 l
317.30399 208.99831 l
310.384 204.99831 l
h
S
CM
315 271 m
315 269 l
335 269 l
335 271 l
315 271 l
h
f*
310.384 270.00171 m
317.30399 274.00171 l
317.30399 266.00171 l
310.384 270.00171 l
h
f*
1 0 0 -1 0 400 cm
310.384 129.99831 m
317.30399 125.9983 l
317.30399 133.99831 l
310.384 129.99831 l
h
S
CM
64.6875 196 m
64.6875 194 l
93.625 194 l
93.625 196 l
64.6875 196 l
h
f*
98.226807 195 m
91.306824 191 l
91.306824 199 l
98.226807 195 l
h
f*
1 0 0 -1 0 400 cm
98.226807 205 m
91.306824 209 l
91.306824 201 l
98.226807 205 l
h
S
CM
64.6875 271 m
64.6875 269 l
93.625 269 l
93.625 271 l
64.6875 271 l
h
f*
98.226807 270 m
91.306824 266 l
91.306824 274 l
98.226807 270 l
h
f*
1 0 0 -1 0 400 cm
98.226807 130 m
91.306824 134 l
91.306824 126 l
98.226807 130 l
h
S
CM
64.6875 121 m
64.6875 119 l
93.625 119 l
93.625 121 l
64.6875 121 l
h
f*
98.226807 120 m
91.306824 116 l
91.306824 124 l
98.226807 120 l
h
f*
1 0 0 -1 0 400 cm
98.226807 280 m
91.306824 284 l
91.306824 276 l
98.226807 280 l
h
S
CM
64.6875 46 m
64.6875 44 l
93.625 44 l
93.625 46 l
64.6875 46 l
h
f*
98.226807 45 m
91.306824 41 l
91.306824 49 l
98.226807 45 l
h
f*
1 0 0 -1 0 400 cm
98.226807 355 m
91.306824 359 l
91.306824 351 l
98.226807 355 l
h
S
2 w
65 315 m
217 315 l
217 355 l
S
CM
216 46 m
216 44 l
244.9375 44 l
244.9375 46 l
216 46 l
h
f*
249.53999 45 m
242.62 41 l
242.62 49 l
249.53999 45 l
h
f*
0.53333342 w
1 0 0 -1 0 400 cm
249.53999 355 m
242.62 359 l
242.62 351 l
249.53999 355 l
h
S
2 w
65 240 m
217 240 l
217 280 l
S
CM
216 121 m
216 119 l
244.9375 119 l
244.9375 121 l
216 121 l
h
f*
249.53999 120 m
242.62 116 l
242.62 124 l
249.53999 120 l
h
f*
0.53333342 w
1 0 0 -1 0 400 cm
249.53999 280 m
242.62 284 l
242.62 276 l
249.53999 280 l
h
S
2 w
65 164.875 m
217 164.875 l
217 204.875 l
S
CM
216 196.125 m
216 194.125 l
244.9375 194.125 l
244.9375 196.125 l
216 196.125 l
h
f*
249.53999 195.125 m
242.62 191.125 l
242.62 199.125 l
249.53999 195.125 l
h
f*
0.53333342 w
1 0 0 -1 0 400 cm
249.53999 204.875 m
242.62 208.875 l
242.62 200.875 l
249.53999 204.875 l
h
S
2 w
65 90 m
217 90 l
217 130 l
S
CM
216 271 m
216 269 l
244.9375 269 l
244.9375 271 l
216 271 l
h
f*
249.53999 270 m
242.62 266 l
242.62 274 l
249.53999 270 l
h
f*
0.53333342 w
1 0 0 -1 0 400 cm
249.53999 130 m
242.62 134 l
242.62 126 l
249.53999 130 l
h
S
0.5 0 0 -0.5 0 400 cm
/F1.1[ 44 0 0 -44 0 0]sf
25.209961 95.685997 m
(0\(0!)[ 39.124800 14.652000 39.124800 0.000000 ] xS
ep
end
%%Trailer
%%EOF
