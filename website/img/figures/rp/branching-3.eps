%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A284a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 660 424
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 660 424
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: UKOIRK+Helvetica
%!FontType1-1.0: UKOIRK+Helvetica 1.0000.0.0000
14 dict begin/FontName /UKOIRK+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /period put
dup 34 /zero put
dup 35 /one put
dup 36 /two put
dup 37 /three put
dup 38 /four put
dup 39 /five put
dup 40 /six put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/period 1 def
/zero 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 7 def
/six 8 def
/u20B8 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B4F1C51BADFF3495C2924BE71970B75EDF2A199B50F98194813A33F63946432A100A72F0700E471C6AECB1F3AE72601F4FBA141E6DAA154933D47293681E1AF19EB09BC4B0B8EA08CB9CABB31741A44CF2EAB20ADC8CCB10041E91BBD21133C1BBC60DDC04340CB77B6824F36D6BC410115DF51B71EE355AF5D25185456570CBA676345AC8A511688888DC52276EE2525CDCC78C835473CC9830A1E1B0175FC84CAC74901627C3F36CBF55D9DDEA7F4C1AFAB990C385A78FB204BA5B74CA17C63151502746013EFE39866740083DDBB5ED8D109280BDFC2A0B42CBD1EF4109478F00D9DB6041B9C066473CDB14673BA7D0F02E2DB452526A1D18156467BD5585E35AA62A2E5286BB804C081D516212046665799848170E44209507E1BA9EE949E577DE9C5001801686C77CA297F0BB88F89E1E8CC997E23E80D6D8174CBC7BF3277E1E618F1592C1A256DC526F993644CA62152CF6DFD91F3B3180F2E67121CDA6DBF8C9D683338A1689AF7762379749ACAB57BB65C51A80753EAE97CFBA959198FAFF70CF77B3BD85EC01B71795B718642695EFAFD4B958E3D40B89A3FF177BCC1D29852F26C7872DD387BD2655B0D2C8B196D92D7825997365E1E1E4E11B17E7A09D6B4C23D4379E0A74BADDF2BF6A4C0B65091A0B4C205EA3BD50F480E39E0A9D7C87C0637EB6053F95D9A4D97628C348B8725E7007C00EC78BE76EC65695B1C58D2A4B22F398B15722A66D5EB55FEE732424F4825ECE4C745531269C4896

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/UKOIRK+Helvetica cguidfix
/F1.1/UKOIRK+Helvetica renmfont
%RBIBeginFontSubset: IIQDCB+PingFangSC-Regular
%!FontType1-1.0: AAAAAF+PingFangHK-Regular 001.003%%CreationDate: 8/24/16% Copyright 2016 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAF+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid1285 putdup 2 /cid1391 putdup 3 /cid1539 putdup 4 /cid3701 putdup 5 /cid4965 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA67F044135A6F077DBF679273886F042AF8316E103C341F52D89FA4DA2DDE3EEB17C167618B0AAC4DDC5F774E8C8628AA6FD2BF1952AEEEAB9A534F47ECD23CBDC9DB82C23A3C9C8C9B1616AA5A01698695A78AE371271C7ADDE30A11C8A660CBA970343D3574B005C851BCF200E158CA315451CD735256A60C84903A57B02D8F138D49010677E7B234A49128E1C60781668359CB7B62092B7D6122A8BDD2EDEE3337B7583569072EC21E26E88E97FA44B7FE3F73C32A079B780B8D02D14A61D4CFC07F62817B36ED87D74E96E6EA215EA19394D670ABDDC01E287EBB8DA24AC58D6A49A53A92AD8783F84F88B819D1ED8C417B9DB6DC4F96B91F844D27293CA712C2EA8FA06027938A220924B331036FDB19F509C18C41AE8F27BC3CDFE4E2A473CCFE928E921321145838C01E6C083DEA9DD39AF97D7F67F1CFD67C9C5E4191478549CB6BFD795525E127090014CBE416787F7EF176A872345EE58B1BFEB30FD0D0FB3A10B7F898069199AACC57CF6E91AE9497ECED0C588C6370B6DEF65EAA8446FA9D9F6AD742B8892ECB09FD46EA829F7F28E8CCEB0E504A915907FC97291C4294B3EF88DF4F25622C6A99A6D18D6238AF1292955FA42AF5F65A8053C22336D13964007E13A027FC45E41D0DB0F2732B4ACBB42A7483C3BC75EA8E77F0139B44FCABD2B197912C28FECE59ED739124C06DBD0FACF675589A4795C6CA63ABFFC30A9489858DE41CA779B44DEA838ACFE4B0A37CF93370940E48123C4D79484EFF2AE2520D747C676B22209283DD3017BB6E6CB9780172DF132F36FB91A6C98FAA3F2CA2D7BFA722870B6277693D81D0417265FCC33EEC4BC3ECF5FABF1EA194974BEC6E73963BB96F5DB856DC79E9EC185B7ED224A44E8D6CE5157B9F6816B7881CF065F7FCAB7CD614867E35B01BABAAA18FF8767A8B40335C3C36F0B5252E3B0586FD26C969FFCEBB9B94BBB3DD0BB14C041E2C669F5AAE73A04E1194CD6B0AB2DB7727AA1E35A4415A1FFD1914C793FFD86BC675B5CD4E65A98DC694B173492D488709E831A2FC4F25D7767EF764B60D996171A18E08A7C4FA9D9F3278D85E7ABB95DE83348DF17DE4C7DC218EA2E2F8A10B1FAAFD9C7819147024598438229981F9BBF8B84AB5618EA82CC830F3F851BEEEA3AD687B0750F7CB12C0A14ADF865927F7E25DA6AFB78D424BB508CE285837D3438CFBB680B0297E2DEF97059B9AAF72553E215B5069B80C5B887FE7F546B0BED085964867E0480CBFBC361DC794A38685A509540499DCE3333E9EE4F449C00201BFDEC91F452478709B6F8A189469CF4DA9B230839E5EB73FA88C4059EA7CFF03F842EBB0BBBC0122568949E624D8FEF8A912C8DC6034D6DDF4231C5702BC77D36DC2BDA74F53A2F9A148371A322494473C6D6DA7C7160622F8DFCE151FC39FF56192ABE93891472F4F36EFABEDA25BC87196BA725B75DB110C07293DDEF50A89344AB6A688E65973C964CC2234C8A25E5EDEFBB336DB0B505E337901151F7E00CFE5865E171B57F43021D1096039AE14850EFB7232BE08D1E0DD02C46AE5E7F9D7B7B4E9A8760E754AA614C291539B0896C06E20359189BF4908B365EAB34E96DC2F1F4F5D410B781E31F4A02BE14C5757F064DD792D2B9629FE51AB6AED0860532323D19190BBFC5C0C9A81BFC0925EC8A3C147BEB5D2A2B88278E97421B5B974FF4C8DF2799010736646485D2246AC10F0F7444CF15C5C64036721CF97FCB06D9BF9D6A096606808B10FC4E93300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: IIQDCB+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /IIQDCB+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid3701 putdup 34 /cid1391 putdup 35 /cid1285 putdup 36 /cid4965 putdup 37 /cid1539 putreadonly def/$SubFontArray [/AAAAAF+PingFangHK-Regular findfont ] def/CharProcs 7 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid1285 {(\001) 0 $SP} putdup /cid1391 {(\002) 0 $SP} putdup /cid1539 {(\003) 0 $SP} putdup /cid3701 {(\004) 0 $SP} putdup /cid4965 {(\005) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/IIQDCB+PingFangSC-Regular cguidfix
/F2.1/IIQDCB+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1882353 0.1882353 0.1882353 sc
q
0 0 659.29749 423.276 rc
54.750988 394.65216 m
61.092094 394.65216 l
61.092094 277.26941 l
70.064339 277.26941 l
57.921543 259.58466 l
45.778744 277.26941 l
54.750988 277.26941 l
h
54.750988 394.65216 m
f
2 J
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
280.67035 223.4045 m
287.01144 223.4045 l
287.01144 340.78726 l
295.9837 340.78726 l
283.84088 358.47198 l
271.69809 340.78726 l
280.67035 340.78726 l
h
280.67035 223.4045 m
S
1 0 0.35294119 sc
CM
54.714973 253.35358 m
61.128113 253.35358 l
61.128113 192.07271 l
68.65934 192.07271 l
57.921543 177.64125 l
47.183743 192.07271 l
54.714973 192.07271 l
h
54.714973 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
280.63431 364.70309 m
287.04745 364.70309 l
287.04745 425.98395 l
294.57867 425.98395 l
283.84088 440.41541 l
273.10309 425.98395 l
280.63431 425.98395 l
h
280.63431 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
54.217793 169.99062 m
61.62529 169.99062 l
61.62529 99.801353 l
70.324234 99.801353 l
57.921543 83.271988 l
45.518848 99.801353 l
54.217793 99.801353 l
h
54.217793 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
280.13715 448.06604 m
287.54465 448.06604 l
287.54465 518.25531 l
296.24359 518.25531 l
283.84088 534.78467 l
271.4382 518.25531 l
280.13715 518.25531 l
h
280.13715 448.06604 m
S
1 1 1 sc
CM
4.5256128 395.97336 m
6.9171162 395.97336 l
6.9171162 19.603861 l
10.942729 19.603861 l
5.7213645 0.5 l
0.5 19.603861 l
4.5256128 19.603861 l
h
4.5256128 395.97336 m
f
1 0 0 -1 -225.91934 618.05664 cm
230.44496 222.08328 m
232.83646 222.08328 l
232.83646 598.45282 l
236.86208 598.45282 l
231.64072 617.55664 l
226.41934 598.45282 l
230.44496 598.45282 l
h
230.44496 222.08328 m
S
0.1882353 0.1882353 0.1882353 sc
CM
94.425987 394.65216 m
100.7671 394.65216 l
100.7671 277.26941 l
109.73934 277.26941 l
97.596542 259.58466 l
85.453743 277.26941 l
94.425987 277.26941 l
h
94.425987 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
320.34534 223.4045 m
326.68643 223.4045 l
326.68643 340.78726 l
335.65869 340.78726 l
323.5159 358.47198 l
311.37308 340.78726 l
320.34534 340.78726 l
h
320.34534 223.4045 m
S
1 0 0.35294119 sc
CM
94.389969 253.35358 m
100.80312 253.35358 l
100.80312 192.07271 l
108.33434 192.07271 l
97.596542 177.64125 l
86.858742 192.07271 l
94.389969 192.07271 l
h
94.389969 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
320.30933 364.70309 m
326.72247 364.70309 l
326.72247 425.98395 l
334.25369 425.98395 l
323.5159 440.41541 l
312.77811 425.98395 l
320.30933 425.98395 l
h
320.30933 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
93.892792 169.99062 m
101.30029 169.99062 l
101.30029 99.801353 l
109.99924 99.801353 l
97.596542 83.271988 l
85.193848 99.801353 l
93.892792 99.801353 l
h
93.892792 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
319.81213 448.06604 m
327.21964 448.06604 l
327.21964 518.25531 l
335.91858 518.25531 l
323.5159 534.78467 l
311.11319 518.25531 l
319.81213 518.25531 l
h
319.81213 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
134.10098 394.65216 m
140.44209 394.65216 l
140.44209 277.26941 l
149.41434 277.26941 l
137.27155 259.58466 l
125.12875 277.26941 l
134.10098 277.26941 l
h
134.10098 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
360.02032 223.4045 m
366.36145 223.4045 l
366.36145 340.78726 l
375.33368 340.78726 l
363.19089 358.47198 l
351.0481 340.78726 l
360.02032 340.78726 l
h
360.02032 223.4045 m
S
1 0 0.35294119 sc
CM
134.06497 253.35358 m
140.47812 253.35358 l
140.47812 192.07271 l
148.00934 192.07271 l
137.27155 177.64125 l
126.53374 192.07271 l
134.06497 192.07271 l
h
134.06497 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
359.98431 364.70309 m
366.39746 364.70309 l
366.39746 425.98395 l
373.92868 425.98395 l
363.19089 440.41541 l
352.45309 425.98395 l
359.98431 425.98395 l
h
359.98431 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
133.56779 169.99062 m
140.9753 169.99062 l
140.9753 99.801353 l
149.67424 99.801353 l
137.27155 83.271988 l
124.86885 99.801353 l
133.56779 99.801353 l
h
133.56779 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
359.48715 448.06604 m
366.89465 448.06604 l
366.89465 518.25531 l
375.5936 518.25531 l
363.19089 534.78467 l
350.78821 518.25531 l
359.48715 518.25531 l
h
359.48715 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
173.77599 394.65216 m
180.1171 394.65216 l
180.1171 277.26941 l
189.08934 277.26941 l
176.94655 259.58466 l
164.80374 277.26941 l
173.77599 277.26941 l
h
173.77599 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
399.69534 223.4045 m
406.03644 223.4045 l
406.03644 340.78726 l
415.0087 340.78726 l
402.86588 358.47198 l
390.72308 340.78726 l
399.69534 340.78726 l
h
399.69534 223.4045 m
S
1 0 0.35294119 sc
CM
173.73997 253.35358 m
180.15311 253.35358 l
180.15311 192.07271 l
187.68434 192.07271 l
176.94655 177.64125 l
166.20874 192.07271 l
173.73997 192.07271 l
h
173.73997 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
399.65933 364.70309 m
406.07245 364.70309 l
406.07245 425.98395 l
413.6037 425.98395 l
402.86588 440.41541 l
392.12808 425.98395 l
399.65933 425.98395 l
h
399.65933 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
173.2428 169.99062 m
180.6503 169.99062 l
180.6503 99.801353 l
189.34924 99.801353 l
176.94655 83.271988 l
164.54385 99.801353 l
173.2428 99.801353 l
h
173.2428 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
399.16214 448.06604 m
406.56964 448.06604 l
406.56964 518.25531 l
415.26859 518.25531 l
402.86588 534.78467 l
390.4632 518.25531 l
399.16214 518.25531 l
h
399.16214 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
253.12599 394.65216 m
259.4671 394.65216 l
259.4671 277.26941 l
268.43933 277.26941 l
256.29654 259.58466 l
244.15375 277.26941 l
253.12599 277.26941 l
h
253.12599 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
479.04535 223.4045 m
485.38644 223.4045 l
485.38644 340.78726 l
494.3587 340.78726 l
482.21588 358.47198 l
470.07309 340.78726 l
479.04535 340.78726 l
h
479.04535 223.4045 m
S
1 0 0.35294119 sc
CM
253.08997 253.35358 m
259.50311 253.35358 l
259.50311 192.07271 l
267.03433 192.07271 l
256.29654 177.64125 l
245.55875 192.07271 l
253.08997 192.07271 l
h
253.08997 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
479.00931 364.70309 m
485.42245 364.70309 l
485.42245 425.98395 l
492.95367 425.98395 l
482.21588 440.41541 l
471.47809 425.98395 l
479.00931 425.98395 l
h
479.00931 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
252.59279 169.99062 m
260.00031 169.99062 l
260.00031 99.801353 l
268.69925 99.801353 l
256.29654 83.271988 l
243.89384 99.801353 l
252.59279 99.801353 l
h
252.59279 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
478.51215 448.06604 m
485.91965 448.06604 l
485.91965 518.25531 l
494.61859 518.25531 l
482.21588 534.78467 l
469.8132 518.25531 l
478.51215 518.25531 l
h
478.51215 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
292.80099 394.65216 m
299.14209 394.65216 l
299.14209 277.26941 l
308.11435 277.26941 l
295.97156 259.58466 l
283.82874 277.26941 l
292.80099 277.26941 l
h
292.80099 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
518.72034 223.4045 m
525.06146 223.4045 l
525.06146 340.78726 l
534.03369 340.78726 l
521.89087 358.47198 l
509.74808 340.78726 l
518.72034 340.78726 l
h
518.72034 223.4045 m
S
1 0 0.35294119 sc
CM
292.76498 253.35358 m
299.1781 253.35358 l
299.1781 192.07271 l
306.70935 192.07271 l
295.97156 177.64125 l
285.23373 192.07271 l
292.76498 192.07271 l
h
292.76498 253.35358 m
f
0.9995597 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
518.68433 364.70309 m
525.09747 364.70309 l
525.09747 425.98395 l
532.62866 425.98395 l
521.89087 440.41541 l
511.15311 425.98395 l
518.68433 425.98395 l
h
518.68433 364.70309 m
S
0.1882353 0.1882353 0.1882353 sc
CM
292.26779 169.99062 m
299.67529 169.99062 l
299.67529 99.801353 l
308.37424 99.801353 l
295.97156 83.271988 l
283.56885 99.801353 l
292.26779 99.801353 l
h
292.26779 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
518.18713 448.06604 m
525.59467 448.06604 l
525.59467 518.25531 l
534.29358 518.25531 l
521.89087 534.78467 l
509.48819 518.25531 l
518.18713 518.25531 l
h
518.18713 448.06604 m
S
0 i
/F1.1[ 72 0 0 -72 0 0]sf
412.04071 314.06583 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
412.04071 401.35083 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
412.04071 484.66833 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
0.60000002 i
0.1882353 0.1882353 0.1882353 sc
CM
391.98849 394.65216 m
398.32959 394.65216 l
398.32959 277.26941 l
407.30185 277.26941 l
395.15906 259.58466 l
383.01624 277.26941 l
391.98849 277.26941 l
h
391.98849 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
617.90784 223.4045 m
624.24896 223.4045 l
624.24896 340.78726 l
633.22119 340.78726 l
621.07837 358.47198 l
608.93561 340.78726 l
617.90784 340.78726 l
h
617.90784 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
391.84686 252.35902 m
398.47122 252.35902 l
398.47122 191.65352 l
406.25052 191.65352 l
395.15906 177.35754 l
384.06757 191.65352 l
391.84686 191.65352 l
h
391.84686 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
617.76617 365.69763 m
624.39056 365.69763 l
624.39056 426.40314 l
632.16986 426.40314 l
621.07837 440.6991 l
609.98688 426.40314 l
617.76617 426.40314 l
h
617.76617 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
391.45529 169.99062 m
398.86279 169.99062 l
398.86279 99.801353 l
407.56174 99.801353 l
395.15906 83.271988 l
382.75635 99.801353 l
391.45529 99.801353 l
h
391.45529 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
617.37463 448.06604 m
624.78217 448.06604 l
624.78217 518.25531 l
633.48108 518.25531 l
621.07837 534.78467 l
608.67572 518.25531 l
617.37463 518.25531 l
h
617.37463 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
431.66348 394.65216 m
438.00461 394.65216 l
438.00461 277.26941 l
446.97684 277.26941 l
434.83405 259.58466 l
422.69125 277.26941 l
431.66348 277.26941 l
h
431.66348 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
657.58282 223.4045 m
663.92395 223.4045 l
663.92395 340.78726 l
672.89618 340.78726 l
660.75342 358.47198 l
648.6106 340.78726 l
657.58282 340.78726 l
h
657.58282 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
431.52185 252.35902 m
438.14624 252.35902 l
438.14624 191.65352 l
445.92554 191.65352 l
434.83405 177.35754 l
423.74255 191.65352 l
431.52185 191.65352 l
h
431.52185 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
657.44122 365.69763 m
664.06555 365.69763 l
664.06555 426.40314 l
671.84491 426.40314 l
660.75342 440.6991 l
649.66193 426.40314 l
657.44122 426.40314 l
h
657.44122 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
431.13028 169.99062 m
438.53778 169.99062 l
438.53778 99.801353 l
447.23672 99.801353 l
434.83405 83.271988 l
422.43134 99.801353 l
431.13028 99.801353 l
h
431.13028 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
657.04962 448.06604 m
664.45715 448.06604 l
664.45715 518.25531 l
673.15607 518.25531 l
660.75342 534.78467 l
648.35071 518.25531 l
657.04962 518.25531 l
h
657.04962 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
471.3385 394.65216 m
477.6796 394.65216 l
477.6796 277.26941 l
486.65186 277.26941 l
474.50903 259.58466 l
462.36624 277.26941 l
471.3385 277.26941 l
h
471.3385 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
697.25781 223.4045 m
703.59894 223.4045 l
703.59894 340.78726 l
712.57117 340.78726 l
700.42841 358.47198 l
688.28558 340.78726 l
697.25781 340.78726 l
h
697.25781 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
471.19684 252.35902 m
477.82123 252.35902 l
477.82123 191.65352 l
485.60052 191.65352 l
474.50903 177.35754 l
463.41754 191.65352 l
471.19684 191.65352 l
h
471.19684 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
697.11621 365.69763 m
703.7406 365.69763 l
703.7406 426.40314 l
711.5199 426.40314 l
700.42841 440.6991 l
689.33691 426.40314 l
697.11621 426.40314 l
h
697.11621 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
470.8053 169.99062 m
478.2128 169.99062 l
478.2128 99.801353 l
486.91174 99.801353 l
474.50903 83.271988 l
462.10635 99.801353 l
470.8053 99.801353 l
h
470.8053 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
696.72467 448.06604 m
704.13214 448.06604 l
704.13214 518.25531 l
712.83105 518.25531 l
700.42841 534.78467 l
688.0257 518.25531 l
696.72467 518.25531 l
h
696.72467 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
511.01349 394.65216 m
517.35461 394.65216 l
517.35461 277.26941 l
526.32684 277.26941 l
514.18402 259.58466 l
502.04123 277.26941 l
511.01349 277.26941 l
h
511.01349 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
736.93286 223.4045 m
743.27393 223.4045 l
743.27393 340.78726 l
752.24622 340.78726 l
740.10339 358.47198 l
727.96057 340.78726 l
736.93286 340.78726 l
h
736.93286 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
510.87186 252.35902 m
517.49622 252.35902 l
517.49622 191.65352 l
525.27551 191.65352 l
514.18402 177.35754 l
503.09256 191.65352 l
510.87186 191.65352 l
h
510.87186 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
736.7912 365.69763 m
743.41559 365.69763 l
743.41559 426.40314 l
751.19489 426.40314 l
740.10339 440.6991 l
729.0119 426.40314 l
736.7912 426.40314 l
h
736.7912 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
510.48029 169.99062 m
517.88782 169.99062 l
517.88782 99.801353 l
526.58673 99.801353 l
514.18402 83.271988 l
501.78134 99.801353 l
510.48029 99.801353 l
h
510.48029 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
736.39966 448.06604 m
743.80713 448.06604 l
743.80713 518.25531 l
752.5061 518.25531 l
740.10339 534.78467 l
727.70068 518.25531 l
736.39966 518.25531 l
h
736.39966 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
590.36346 394.65216 m
596.70459 394.65216 l
596.70459 277.26941 l
605.67682 277.26941 l
593.53406 259.58466 l
581.39124 277.26941 l
590.36346 277.26941 l
h
590.36346 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
816.28284 223.4045 m
822.62396 223.4045 l
822.62396 340.78726 l
831.59619 340.78726 l
819.45337 358.47198 l
807.31061 340.78726 l
816.28284 340.78726 l
h
816.28284 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
590.22186 252.35902 m
596.84625 252.35902 l
596.84625 191.65352 l
604.62555 191.65352 l
593.53406 177.35754 l
582.44257 191.65352 l
590.22186 191.65352 l
h
590.22186 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
816.14117 365.69763 m
822.76556 365.69763 l
822.76556 426.40314 l
830.54486 426.40314 l
819.45337 440.6991 l
808.36188 426.40314 l
816.14117 426.40314 l
h
816.14117 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
589.83032 169.99062 m
597.23779 169.99062 l
597.23779 99.801353 l
605.93671 99.801353 l
593.53406 83.271988 l
581.13135 99.801353 l
589.83032 99.801353 l
h
589.83032 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
815.74963 448.06604 m
823.15717 448.06604 l
823.15717 518.25531 l
831.85608 518.25531 l
819.45337 534.78467 l
807.05072 518.25531 l
815.74963 518.25531 l
h
815.74963 448.06604 m
S
0.1882353 0.1882353 0.1882353 sc
CM
630.03851 394.65216 m
636.37958 394.65216 l
636.37958 277.26941 l
645.35187 277.26941 l
633.20905 259.58466 l
621.06622 277.26941 l
630.03851 277.26941 l
h
630.03851 394.65216 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
855.95782 223.4045 m
862.29895 223.4045 l
862.29895 340.78726 l
871.27118 340.78726 l
859.12842 358.47198 l
846.9856 340.78726 l
855.95782 340.78726 l
h
855.95782 223.4045 m
S
0.088581316 0.75294119 0 sc
CM
629.89685 252.35902 m
636.52124 252.35902 l
636.52124 191.65352 l
644.30054 191.65352 l
633.20905 177.35754 l
622.11755 191.65352 l
629.89685 191.65352 l
h
629.89685 252.35902 m
f
0.0047026705 0.68808585 0.31276894 sc
1 0 0 -1 -225.91934 618.05664 cm
855.81622 365.69763 m
862.44055 365.69763 l
862.44055 426.40314 l
870.21991 426.40314 l
859.12842 440.6991 l
848.03693 426.40314 l
855.81622 426.40314 l
h
855.81622 365.69763 m
S
0.1882353 0.1882353 0.1882353 sc
CM
629.50531 169.99062 m
636.91278 169.99062 l
636.91278 99.801353 l
645.61176 99.801353 l
633.20905 83.271988 l
620.80634 99.801353 l
629.50531 99.801353 l
h
629.50531 169.99062 m
f
0 0 0 sc
1 0 0 -1 -225.91934 618.05664 cm
855.42462 448.06604 m
862.83215 448.06604 l
862.83215 518.25531 l
871.53107 518.25531 l
859.12842 534.78467 l
846.72571 518.25531 l
855.42462 518.25531 l
h
855.42462 448.06604 m
S
0 i
749.2782 314.06583 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
749.2782 401.35083 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
749.2782 484.66833 m
(!!!)[ 20.003906 20.003906 0.000000 ] xS
0.60000002 i
289.15204 546.75464 m
289.15204 553.10724 289.15204 559.45978 289.15204 565.81238 c
289.15204 568.19458 291.53424 568.19458 291.53424 568.19458 c
327.98172 568.19458 327.98172 568.19458 400.87665 568.19458 c
400.87665 568.19458 403.25888 568.19458 403.25888 570.57678 c
403.25888 568.19458 405.64108 568.19458 405.64108 568.19458 c
441.83133 568.19458 441.83133 568.19458 514.21179 568.19458 c
514.21179 568.19458 516.59399 568.19458 516.59399 565.81238 c
516.59399 559.45978 516.59399 553.10724 516.59399 546.75464 c
S
0 i
/F2.1[ 18 0 0 -18 0 0]sf
371.35135 595.39276 m
(!"#$)[ 18.000000 18.000000 18.000000 0.000000 ] xS
0.60000002 i
626.45117 546.75464 m
626.45117 553.10724 626.45117 559.45978 626.45117 565.81238 c
626.45117 568.19458 628.83337 568.19458 628.83337 568.19458 c
665.28082 568.19458 665.28082 568.19458 738.17578 568.19458 c
738.17578 568.19458 740.55798 568.19458 740.55798 570.57678 c
740.55798 568.19458 742.94019 568.19458 742.94019 568.19458 c
779.13043 568.19458 779.13043 568.19458 851.51093 568.19458 c
851.51093 568.19458 853.89313 568.19458 853.89313 565.81238 c
853.89313 559.45978 853.89313 553.10724 853.89313 546.75464 c
S
0 i
708.65045 595.39276 m
(!"#%)[ 18.000000 18.000000 18.000000 0.000000 ] xS
/F1.1[ 18 0 0 -18 0 0]sf
280.04034 212.78064 m
(")s
318.43576 212.78064 m
(#)s
360.34964 212.78064 m
($)s
471.048 212.78064 m
(%")[ 10.010742 0.000000 ] xS
400.5043 212.78064 m
(%)s
512.93732 212.78064 m
(%#)[ 10.010742 0.000000 ] xS
612.53589 212.78064 m
(%$)[ 10.010742 0.000000 ] xS
653.22198 212.78064 m
(%%)[ 10.010742 0.000000 ] xS
692.30701 212.78064 m
(%&)[ 10.010742 0.000000 ] xS
732.20471 212.78064 m
(%')[ 10.010742 0.000000 ] xS
808.0058 212.78064 m
(\($)[ 10.010742 0.000000 ] xS
847.70099 212.78064 m
(\(%)[ 10.010742 0.000000 ] xS
ep
end
%%Trailer
%%EOF
