%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 211 295
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 211 295
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ZOLYQD+Helvetica
%!FontType1-1.0: ZOLYQD+Helvetica 1.0000.0.0000
14 dict begin/FontName /ZOLYQD+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Y put
dup 34 /X put
dup 35 /b put
dup 36 /c put
dup 37 /a put
dup 38 /d put
dup 39 /e put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<


20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158


2B2B4EF44DED4E10F63C4DFDE4E4003FED3F3FED3F1139113931304379401A181C090A000101180B2600091C0B260000190226000A1B0826012B2B012B2B818181005D1216333236353426232206150017161711331123350E0123220035341233F692A17DA1A67A88A9018A53303DADA23FAC6FB3FEFAEFDE015FE8D7C9CBC3D0CA0237341E4B021DFA3E956358012DFAEA015700030048FFDA041A0449001C00240025010C40799708991AA71F03050E020F0514150E120F1514400C401408291A014B0BB603C701C603C71BD808D909D61FD823E817E8230BC711C712025C080521240F9A161D243906070716211D1C070A1D160B2507971CA71CB71CD71C0425160F251C05190A0C07110E270F1D27051A27242E072719192627D421A65D182B2B4EF44DFDE44E10F64DEDD4FD391239391112393912392F5D003F3FED3FED12392F3CFD3C10ED1112393130437940460023040503050205010504061F26111012101310141004060C25221B24260020001D26011E1D09170726000B150E26010D0E231A2126011E0521260108180A26000D100A2600002B2B2B2B01103C2B2B103C2B2B2B2A2B2A8101715D00715D5D00161716171615211E013332373637330E01070607062322001110003301262726232206070102B4D638361210FCEF0590978D543014B1074F3152794152C8FEEA0118E2011F0B284AAD7CA805012304476B55516C4AA2A3C55D36473B912E501C100123010601020142FE26754682B38A01DC0000000002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000006F400C9E5F0F3CF500110800000000005F4D8F0000000000D383C768F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B91000100000000000000000000000000000009051200420556002A0556002A04730052047300760400003B04730038047300480473002F0000003600B2011401DE024802CA03360400041A00010000000900920009006B0007000200100010005D000007E80A1D00040001B800532BB800492BB8003F2BB800352BB8002B2B4118008001A6009001A600A001A600030069018B0079018B0089018B0099018B00040089018B0099018B00A9018B00B9018BB2040840BA0179001A014A400B041F5414191F180A0B1FD2B80106B49E1FD918E3BB0119000D00E10119B20D0009410A01A0019F0064001F01A50025017A00480028019AB3296C1F60410A01A9007001A9008001A90003008001A9000101A9B21E321FBE012C00250401001F0126001E0401B61FE7312D1FE531B80201B21FC227B80401B21FC11EB80201400F1FC01D9E1FBF1D671FBE1D671FAB27B80401B21FAA29B80401B61FA91D
6C1F931EB8019AB21F921DB80101B21F911DB80101B21F751DB80201B61F6D29961F6431B8019AB21F4C96B802ABB21F391DB80156400B1F3638211F351DE41F2F27B80801400B1F2D1D4C1F2A31CD1F241DB802ABB21F201EB8012540111F1C1D931F3A1D4C1F1E1D45273A1D4527BB01AA019B002A019BB2254A1FBA019B0025017AB349293896B8017BB348283125B8017A403648289629482725294C1F252946272729482756C80784075B07410732072B072807260721071B071408120810080E080C080A08080807B801ACB23F1F06BB01AB003F001F01ABB308060805B801AEB23F1F04BB01AD003F001F01ADB70804080208000814B8FFE0B40000010014B801ABB41000000100B801ABB606100000010006B801ADB300000100B801AD401F04000001000410000001001002000001000200000001000002010802004A00B0018DB806008516763F183F123E113946443E113946443E113946443E113946443E113946443E11394660443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B18011DB0964B5358B0AA1D59B0324B5358B0FF1D592B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B74752B2B2B65422B2B4B5279B376706A66456523456023456560234560B08B766818B080622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 9 dict dup begin
/.notdef 0 def
/X 1 def
/Y 2 def
/a 3 def
/b 4 def
/c 5 def
/d 6 def
/e 7 def
/u20B8 8 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C99D7B912F94734180BCB0A2B426ACDB993C61FD2485EFF51D552B79ED2E120C8C3A17A67DCF03E7412FCDB8DA0EBD8CAD34A1FBFAF2D47EFCA53DD53E2967F67FCD4065236863224C550BE9D0C09E6D9B421FD7EF2EA8B008647580FEB7B3232B16F98241A90C901D8F6830F8942EEB9317A014CBB9E2087E5F19347190997910BE2DF6FF5C67061943037AA36ED324C0E749F2AB9F1EB6C855F92C5375AEADC1975F1AF1BA056E83AAD9803DD52AB6A85992337F263869297AA7F06D3EE1D88B38BF47966921181F12AF2B752FEDAA07D88C32A88DDFEB284ED38E354DC3F1BFA3559AD54F59DC112D05C48B92F45F6463743F842A416534630A43A50CFD7DC32D0AFBB313182B95759F7A6EBEE545495C1CBC1DD17CBD60864B54AE9E22F02152F31AF997110B73945578A25A9F1AD2C06FE59F734C0803AF896AFE1D38E6E9E118D98B2A23ADA7AA671CCDFBD37CAE5E699CAEA0E3D1EA1D3B8459FC925E2F08F2C12776DFBB13E0AFDDED919BC1D955126233777247C6B77B37BBE087BE3212AB8DD790BC54E6B20C3F2D5AD1F2BDC33AB77E6A9979D5A71729ACBF1242A7DEBDF45EC0C62016E17E11D95E28A17DC0AD1A9A9821EC068A2E5BC4764323619DF7201FC15D9F717BA6095C50FE6E46F1EFF94D3214984AAC74FE30727A8FA30B6228799AAB9471D51CB649B9BEAE3FE281E037E580A7589E903D289BF81ECD1015DAA39452B08D64BDFABAEB493EF52533208BA75FC739F25638C612E456BE7
2B400CF3F3E41D509068CA1C9AC5E9FA9D27CD24485FEEF743B3746BCFC9C7C24CA299FB9DB27C280CBC0457CE7DFDC472AA794791D789A9BDE630465D708D8081E897D0C487A01C09C9824F661BBF95F60B4C22F03EAC33797C7A046F65DA8390A1EE2B376C71BE72CABCC65B0684E0B245017430BDF4134EB4168D2C5F483DEBF5F0EC12AEC0D8500256002314652B594B5FF66CA5CF761DFC29862CB6B9E502DCAF135902ADFE00457B0A30302008290EB7AF7E53171040DD0EF9A222E330EF67DF548591F719D4BBBF08EFF3DA1190FB105CF2426ABAE4625EB1AD88EF8C58A7AEC506C9A5167746301D4E257F2E710A1445DB468B7C64A0405F7EC344F34075220087344A8BD94605A5CEC017CC82C6A3CBFF76AA059C390F49D1F95F0EB8C1C6D89BC4024AD9F4889F8F5879C2409F556EEEAEBF77BE5406E7BC780D558E8FDFFFF52C9FF48AAE56314C38FB447D1B246FD9515A2826DC1080C21A8CD7E91EA86B7F99BF602C5FA6C31628BD66B8CEC3765EB77A502D51CF77A4833D2E7B6E79015C94A78034B79CD52192C83CA7AC95307AF47AAB48A8168544CD13A802877EFDED80D47B822FAF5056B4D821256670D7C699F779AB78CBB35288E94887A13CDF5CAEBE87AFD5C7DE4656512550D426A25C212F29E68A5A0A1AB3C34C15385AB235E15814B83766F74C6F7EA8622495A37351AA2105C35A6DB7FC4AF9F18C419E4D8827CF91D90D2BB9FD21E32FEEBCFC1B2B092F32CB99A710B5223ACE4C21C90CABF1ACFFDBEA9887325598F0AB03DE3432431999F34E10CD10CE7D80C9B1047CA9DEB7D5B255AA2F84EF8F26953133F82315BCA5C54967F839F9D5716E240E574106F7FA09BC3C9CC9564446419198297A25FF664CC477A801A3D11522528A288E76A1B283C3B8A369E6AA95D903DEBD985F7854361F08A71942777F5A13EC262ECB33FB68F683A0A4D73948A90B18D8354E224BAE4EA73D76AD9A6708FEEC99F3D1F35AB81BF1AAD4D79D968CA906A20986E1205ED5E0FC8BB8EF5AA1BB7626D2AA0B77F209C8BD9A4A412012F848690479A9474D5B53182F7E95C80CBBA3D8885F84BD2549D20F05133E9CF0C391D838C7BFEDAC54464F1C96905259E37B912BABBC9CA8A39A14F2CB78281A06E768B461AE3F965C1EB518ABBEE8B68FB6C78AA24EE6A77C8D623DE753C4F273DC9E44C3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/ZOLYQD+Helvetica cguidfix
/F1.1/ZOLYQD+Helvetica renmfont
%RBIBeginFontSubset: HEKQRZ+Helvetica-Bold
%!FontType1-1.0: HEKQRZ+Helvetica-Bold 1.0000.1.0000
14 dict begin/FontName /HEKQRZ+Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /one put
dup 34 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/u20B8 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2084 -985 2942 2374}def
/UniqueID 4330650 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C98FBE3F2558FB9CED11AC838204E845D4D0EA65175E342B190F68039212FB7ABE866A348E608EB13BF3C21833B3CE75C0DE432DCD3893DA32E192CFA5E517D1248683669C78D7D0C03ADE93135826FB8AFD62C6691CE9879F792A94E1F95BD0CEC4EAA0D3EE64AA47DC02CCC033E7EAE6A1436C3BDCB89186476A1ED0ADAEF483A7FA94F2352F2EB6DA633E4149CADE42DDC4881796A041B992893B59EE98B5ADCF8CD348FADAA9CECDB6F35166B40C9089BECEA19B118A3340619C961C1367836101C9DB414B13D1E31FF7C9EDB0CEC3641340816F154461FB37C7ECA435322A06525F8DC2EBE35823525A7BBA6310E3B24039346B72C92BDEA1DA57E32F967967A36CB48C630AC78E8CBE4E8B4E7BCE430547EB718C3C11E1D18292CF09C45BC0D441315EE1B1BCA05969F7FBFF6E7681AAD2FF3B5406AF07D813B868EAD8A195AA2FF370EEFD42ABD2DBB0E8ED58DFA699F680ED68E2646ACEE1FB660CFC69A8ED9132D12F0513B864965FA1D553BA4D304798DEC1AFC7299099419DA89E4721F6A5A18A18625B446746381805C721245301D6E1C2352D1A44AEF5997205BC2EED23C60F47D1CB4CBE00F4097752BA2F0C7254AFDDF2EB2CF655292E9332BBC715D212E81593956A0E1758E70922ED70AFE01689672B0F5C0DEE9CB32791E1BB4DF41650280
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HEKQRZ+Helvetica-Bold cguidfix
/F2.1/HEKQRZ+Helvetica-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 0.3764706 0 sc
q
0 0 210.03484 294.77634 rc
104.8485 231.48967 m
104.8485 55.146553 l
f
2.1259842 w
2 J
0 0 0 sc
1 0 0 -1 -158.86948 441.93359 cm
263.71799 210.44394 m
263.71799 386.78705 l
S
164.74265 171.89452 m
264.0903 209.00627 l
S
359.49585 171.20747 m
263.95547 209.3064 l
S
263.79895 385.7684 m
160.1572 411.48755 l
S
367.63943 409.16791 m
264.6152 386.72565 l
S
1.4173229 w
0.25096041 0.53082478 0.49494141 sc
167.96687 182.34616 m
171.7253 183.71518 l
S
175.48372 185.0842 m
179.24214 186.45323 l
S
183.00058 187.82225 m
186.759 189.19127 l
S
190.51743 190.5603 m
194.27585 191.92932 l
S
198.03429 193.29836 m
201.79271 194.66737 l
S
205.55113 196.03639 m
209.30956 197.40543 l
S
213.06799 198.77444 m
216.82642 200.14346 l
S
220.58484 201.5125 m
224.34328 202.88152 l
S
228.1017 204.25053 m
231.86012 205.61957 l
S
235.61855 206.98859 m
239.37698 208.3576 l
S
243.13541 209.72664 m
246.10521 210.8084 l
S
CM
96.7715 227.65176 m
85.971504 227.65446 l
88.499962 234.59595 l
h
96.7715 227.65176 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
255.64098 214.28185 m
244.84099 214.27914 l
247.36945 207.33766 l
h
255.64098 214.28185 m
S
1.4173229 w
273.4856 213.96503 m
277.18655 212.44749 l
S
280.88751 210.92996 m
284.58847 209.41245 l
S
288.28943 207.89491 m
291.99039 206.3774 l
S
295.69138 204.85986 m
299.39233 203.34233 l
S
303.09329 201.82481 m
306.79425 200.30728 l
S
310.49521 198.78976 m
314.19617 197.27223 l
S
317.89713 195.7547 m
321.59808 194.23718 l
S
325.29904 192.71965 m
329 191.20212 l
S
332.70099 189.6846 m
336.40195 188.16707 l
S
340.10291 186.64955 m
343.80386 185.13202 l
S
347.50482 183.61449 m
347.74689 183.51524 l
S
CM
198.26738 262.26859 m
190.27878 255.0007 l
187.47604 261.83603 l
h
198.26738 262.26859 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
357.13684 179.66501 m
349.14825 186.93291 l
346.34552 180.09756 l
h
357.13684 179.66501 m
S
1.4173229 w
253.32072 220.74181 m
253.31371 224.74181 l
S
253.30667 228.74179 m
253.29964 232.74179 l
S
253.29262 236.74178 m
253.28558 240.74178 l
S
253.27856 244.74178 m
253.27153 248.74176 l
S
253.26451 252.74176 m
253.25748 256.74176 l
S
253.25044 260.74173 m
253.24342 264.74173 l
S
253.23639 268.74173 m
253.22937 272.74173 l
S
253.22234 276.74173 m
253.21532 280.7417 l
S
253.20828 284.7417 m
253.20125 288.7417 l
S
253.19423 292.7417 m
253.18719 296.7417 l
S
253.18018 300.74167 m
253.17314 304.74167 l
S
253.16612 308.74167 m
253.15909 312.74167 l
S
253.15205 316.74167 m
253.14503 320.74164 l
S
253.138 324.74164 m
253.13098 328.74164 l
S
253.12395 332.74164 m
253.11693 336.74164 l
S
253.10989 340.74161 m
253.10286 344.74161 l
S
253.09584 348.74161 m
253.08881 352.74161 l
S
253.08179 356.74161 m
253.07475 360.74158 l
S
253.06773 364.74158 m
253.06682 365.26196 l
S
CM
94.179504 66.522972 m
90.503525 76.678123 l
97.891144 76.665146 l
h
94.179504 66.522972 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
253.04898 375.41064 m
249.373 365.25549 l
256.76062 365.26846 l
h
253.04898 375.41064 m
S
1.4173229 w
273.7645 227.17169 m
273.77817 231.17168 l
S
273.79184 235.17165 m
273.80551 239.17163 l
S
273.81918 243.1716 m
273.83286 247.17157 l
S
273.84653 251.17155 m
273.8602 255.17152 l
S
273.87387 259.17151 m
273.88754 263.17148 l
S
273.90121 267.17145 m
273.91489 271.17145 l
S
273.92856 275.17142 m
273.94223 279.17139 l
S
273.95593 283.17136 m
273.9696 287.17136 l
S
273.98328 291.17133 m
273.99695 295.1713 l
S
274.01062 299.17126 m
274.02429 303.17126 l
S
274.03796 307.17123 m
274.05164 311.1712 l
S
274.06531 315.17117 m
274.07898 319.17114 l
S
274.09265 323.17114 m
274.10632 327.17111 l
S
274.12 331.17108 m
274.13367 335.17105 l
S
274.14737 339.17105 m
274.16104 343.17102 l
S
274.17471 347.17099 m
274.18839 351.17096 l
S
274.20206 355.17096 m
274.21573 359.17093 l
S
274.2294 363.1709 m
274.24307 367.17087 l
S
274.25674 371.17087 m
274.26285 372.95801 l
S
CM
114.86031 224.91054 m
118.5888 214.77454 l
111.20121 214.74928 l
h
114.86031 224.91054 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
273.7298 217.02307 m
277.45828 227.15907 l
270.07068 227.18433 l
h
273.7298 217.02307 m
S
1.4173229 w
250.42516 379.68015 m
246.54257 380.64224 l
S
242.66 381.60431 m
238.77742 382.56638 l
S
234.89484 383.52844 m
231.01227 384.49051 l
S
227.12968 385.45261 m
223.2471 386.41467 l
S
219.36453 387.37674 m
215.48195 388.33881 l
S
211.59937 389.3009 m
207.7168 390.26297 l
S
203.83421 391.22504 m
199.95163 392.1871 l
S
196.06906 393.1492 m
192.18648 394.11127 l
S
188.30389 395.07333 m
184.42133 396.0354 l
S
180.53874 396.99747 m
176.65617 397.95956 l
S
172.77359 398.92163 m
171.17204 399.31848 l
S
CM
2.4518089 40.174187 m
11.41414 46.200516 l
13.191002 39.029747 l
h
2.4518089 40.174187 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
161.32129 401.75943 m
170.28362 395.73309 l
172.06049 402.90387 l
h
161.32129 401.75943 m
S
1.4173229 w
366.79306 398.97369 m
362.89038 398.09671 l
S
358.9877 397.21973 m
355.08502 396.34274 l
S
351.18234 395.46576 m
347.27966 394.58878 l
S
343.37698 393.71179 m
339.4743 392.83481 l
S
335.57162 391.95782 m
331.66895 391.08084 l
S
327.76627 390.20386 m
323.86359 389.32687 l
S
319.96091 388.44989 m
316.05823 387.57291 l
S
312.15558 386.69592 m
308.2529 385.81894 l
S
304.35022 384.94196 m
300.44754 384.06497 l
S
296.54486 383.18799 m
292.64218 382.311 l
S
288.7395 381.43399 m
284.83682 380.55701 l
S
CM
114.6034 63.930222 m
125.31501 65.309105 l
123.6953 58.101215 l
h
114.6034 63.930222 m
f
0.35433072 w
1 0 0 -1 -158.86948 441.93359 cm
273.47287 378.00339 m
284.18448 376.62451 l
282.56479 383.8324 l
h
273.47287 378.00339 m
S
1.4173229 w
0 0 0 sc
217.03389 148.15202 m
219.49741 151.30339 l
S
221.96091 154.45476 m
224.42441 157.60612 l
S
226.88792 160.75749 m
229.35143 163.90887 l
S
231.81494 167.06024 m
234.27844 170.21161 l
S
236.74194 173.36298 m
239.20546 176.51434 l
S
241.66896 179.66573 m
244.13248 182.81709 l
S
246.59598 185.96846 m
249.05948 189.11983 l
S
251.52299 192.27119 m
253.9865 195.42256 l
S
256.45001 198.57394 m
258.91351 201.72531 l
S
261.37701 204.87668 m
263.84052 208.02805 l
S
309.11069 154.3156 m
306.5466 157.3857 l
S
303.98254 160.4558 m
301.41846 163.52589 l
S
298.85437 166.59599 m
296.29028 169.66609 l
S
293.72623 172.73619 m
291.16214 175.80629 l
S
288.59805 178.87639 m
286.034 181.94649 l
S
283.46991 185.01659 m
280.90582 188.08669 l
S
278.34177 191.15678 m
275.77768 194.22688 l
S
273.21359 197.29698 m
270.64951 200.36708 l
S
268.08545 203.43718 m
265.52136 206.50728 l
S
1.4173229 w
263.29984 386.01709 m
260.73407 389.08578 l
S
258.1683 392.15448 m
255.60255 395.22318 l
S
253.03679 398.29187 m
250.47104 401.36057 l
S
247.90529 404.42926 m
245.33952 407.49796 l
S
242.77377 410.56665 m
240.20802 413.63535 l
S
237.64226 416.70404 m
235.07651 419.77274 l
S
232.51074 422.84146 m
229.94499 425.91016 l
S
227.37924 428.97885 m
224.81348 432.04755 l
S
222.24773 435.11624 m
219.68196 438.18494 l
S
264.24393 386.20621 m
264.40335 390.203 l
S
264.56274 394.19983 m
264.72217 398.19666 l
S
264.88159 402.19348 m
265.04102 406.19031 l
S
265.20044 410.18713 m
265.35986 414.18396 l
S
265.51929 418.18076 m
265.67871 422.17758 l
S
265.83813 426.17441 m
265.99756 430.17123 l
S
266.15698 434.16806 m
266.31641 438.16489 l
S
264.42978 386.80368 m
267.37326 389.51218 l
S
270.31674 392.22064 m
273.26022 394.92914 l
S
276.2037 397.63763 m
279.14719 400.34613 l
S
282.09067 403.0546 m
285.03415 405.76309 l
S
287.97763 408.47159 m
290.92111 411.18005 l
S
293.86459 413.88855 m
296.80807 416.59705 l
S
299.75156 419.30554 m
302.69504 422.01401 l
S
305.63852 424.7225 m
308.582 427.431 l
S
311.52548 430.1395 m
313.5571 432.00891 l
S
0.93379414 0.93379414 0.93379414 sc
CM
110.37363 233.32341 m
110.37402 234.04671 110.23022 234.76968 109.95305 235.43777 c
109.67662 236.10617 109.26709 236.71909 108.75536 237.23026 c
108.24419 237.74199 107.63127 238.15154 106.96288 238.42795 c
106.29478 238.70512 105.5718 238.84892 104.8485 238.84853 c
104.1252 238.84892 103.40221 238.70512 102.73413 238.42795 c
102.06573 238.15154 101.45282 237.74199 100.94165 237.23026 c
100.42992 236.71909 100.02038 236.10617 99.74395 235.43777 c
99.466789 234.76968 99.322975 234.04671 99.32338 233.32341 c
99.322975 232.60011 99.466789 231.87712 99.74395 231.20903 c
100.02038 230.54063 100.42992 229.92772 100.94165 229.41655 c
101.45282 228.90482 102.06573 228.49529 102.73413 228.21886 c
103.40221 227.9417 104.1252 227.79788 104.8485 227.79828 c
105.5718 227.79788 106.29478 227.9417 106.96288 228.21886 c
107.63127 228.49529 108.24419 228.90482 108.75536 229.41655 c
109.26709 229.92772 109.67662 230.54063 109.95305 231.20903 c
110.23022 231.87712 110.37402 232.60011 110.37363 233.32341 c
h
110.37363 233.32341 m
f
1 w
0 0 0 sc
1 0 0 -1 -158.86948 441.93359 cm
269.2431 208.6102 m
269.2435 207.8869 269.0997 207.16393 268.82254 206.49583 c
268.54611 205.82744 268.13657 205.21452 267.62482 204.70335 c
267.11368 204.19162 266.50076 203.78207 265.83237 203.50565 c
265.16428 203.22849 264.44128 203.08467 263.71799 203.08508 c
262.99469 203.08467 262.2717 203.22849 261.60361 203.50565 c
260.93521 203.78207 260.3223 204.19162 259.81113 204.70335 c
259.29941 205.21452 258.88986 205.82744 258.61343 206.49583 c
258.33627 207.16393 258.19244 207.8869 258.19287 208.6102 c
258.19244 209.3335 258.33627 210.05649 258.61343 210.72458 c
258.88986 211.39297 259.29941 212.00589 259.81113 212.51706 c
260.3223 213.02879 260.93521 213.43832 261.60361 213.71475 c
262.2717 213.99191 262.99469 214.13573 263.71799 214.13533 c
264.44128 214.13573 265.16428 213.99191 265.83237 213.71475 c
266.50076 213.43832 267.11368 213.02879 267.62482 212.51706 c
268.13657 212.00589 268.54611 211.39297 268.82254 210.72458 c
269.0997 210.05649 269.2435 209.3335 269.2431 208.6102 c
h
269.2431 208.6102 m
S
0.97366816 0.96183997 0.58695942 sc
CM
110.37363 56.323761 m
110.37402 57.047062 110.23022 57.770046 109.95305 58.438137 c
109.67662 59.106529 109.26709 59.719448 108.75536 60.230614 c
108.24419 60.742348 107.63127 61.151886 106.96288 61.42831 c
106.29478 61.705475 105.5718 61.849285 104.8485 61.848885 c
104.1252 61.849285 103.40221 61.705475 102.73413 61.42831 c
102.06573 61.151886 101.45282 60.742348 100.94165 60.230614 c
100.42992 59.719448 100.02038 59.106529 99.74395 58.438137 c
99.466789 57.770046 99.322975 57.047062 99.32338 56.323761 c
99.322975 55.600464 99.466789 54.87748 99.74395 54.209389 c
100.02038 53.540993 100.42992 52.928078 100.94165 52.416912 c
101.45282 51.905178 102.06573 51.49564 102.73413 51.219215 c
103.40221 50.942051 104.1252 50.798241 104.8485 50.798641 c
105.5718 50.798241 106.29478 50.942051 106.96288 51.219215 c
107.63127 51.49564 108.24419 51.905178 108.75536 52.416912 c
109.26709 52.928078 109.67662 53.540993 109.95305 54.209389 c
110.23022 54.87748 110.37402 55.600464 110.37363 56.323761 c
h
110.37363 56.323761 m
f
0 0 0 sc
1 0 0 -1 -158.86948 441.93359 cm
269.2431 385.60983 m
269.2435 384.88654 269.0997 384.16357 268.82254 383.49548 c
268.54611 382.82709 268.13657 382.21417 267.62482 381.703 c
267.11368 381.19125 266.50076 380.78174 265.83237 380.50531 c
265.16428 380.22812 264.44128 380.08432 263.71799 380.08472 c
262.99469 380.08432 262.2717 380.22812 261.60361 380.50531 c
260.93521 380.78174 260.3223 381.19125 259.81113 381.703 c
259.29941 382.21417 258.88986 382.82709 258.61343 383.49548 c
258.33627 384.16357 258.19244 384.88654 258.19287 385.60983 c
258.19244 386.33316 258.33627 387.05612 258.61343 387.72421 c
258.88986 388.39261 259.29941 389.00552 259.81113 389.51669 c
260.3223 390.02844 260.93521 390.43796 261.60361 390.71439 c
262.2717 390.99155 262.99469 391.13538 263.71799 391.13498 c
264.44128 391.13538 265.16428 390.99155 265.83237 390.71439 c
266.50076 390.43796 267.11368 390.02844 267.62482 389.51669 c
268.13657 389.00552 268.54611 388.39261 268.82254 387.72421 c
269.0997 387.05612 269.2435 386.33316 269.2431 385.60983 c
h
269.2431 385.60983 m
S
1 0 0.35294119 sc
0 i
/F1.1[ 18 0 0 -18 0 0]sf
279.40576 227.4166 m
(!)s
278.60413 370.64578 m
(")s
0 0.23529412 1 sc
209.98212 185.65402 m
(#)s
311.8526 179.62407 m
($)s
281.59677 298.63083 m
(%)s
206.56926 418.23166 m
(&)s
319.18216 419.95441 m
(')s
0 0 0 sc
/F2.1[ 18 0 0 -18 0 0]sf
178.6765 309.83185 m
(!)s
338.70657 310.3743 m
(")s
ep
end
%%Trailer
%%EOF
