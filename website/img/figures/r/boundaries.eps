%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 536 362
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 536 362
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SLRMZA+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 9/11/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid1435 putdup 2 /cid1591 putdup 3 /cid1806 putdup 4 /cid1873 putdup 5 /cid2941 putdup 6 /cid3324 putdup 7 /cid3379 putdup 8 /cid3676 putdup 9 /cid4320 putdup 10 /cid4457 putdup 11 /cid7035 putdup 12 /cid7566 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6E404E6F443B0D0202335206CE0105F33AFB500C1CACF75AF37830511A2041D7BFD186D80AABBB34F679F5E538BD03C875718D18BD2AD151059F9AF2150A6D08B180D4D2CCF001672D691547065DB7D90F48DA5BDB8D013D3D0562DF66E99DB2E2ABE1B3211999E37F93337B17EEE2E40429E35A31C41BB2BCB42E20029DF3AADA216E2D4F3CAAA93333BB015804BA14DF8265F55211A32F9E8C02E06FF523492449FC92D21D9BF7EEE6B533EDB48CCF212D99FE7D4EB005A6C8278CD141ACD37DC54181D701A90FCD5CC51BB0C82A8147AE29BF089AAF9D853834245E0ED5FE520B019C4CB3561381FFEC5CBA56229E0692E42604F78996D47946ACDFAA2796C0467DFB84A9A1D8BED10709254EEF9476C99C65BAE7E1A827EB51ABAC4EA2AC6B178E7C669BF3F96B8E701905A9C145EC7922FEEC615DB8AA00E7CF867B97AE55E841C7FF504EA98D693E0C184CDF87855F51A32E3DD453B4E2C497C4200FD6F91C12F6596B2271770C66E5AE0B8A683BB8E64DD9CD018EFDEE3E7E8AD0605486ADBB3FAC83ADC5444E334DB1844B421B9B9A1B90BA4170C5A1C3596BFDD375289A44FCD8CA9C59EE9498AE5360D9CFD6456C5D2CFA3E985415198BE402FF42AA7B2FDAFFA70CA77743EDCA93890DDF4846BC16F6BA2F3D1C14EC30CB782D08A5D9FF089263091DAE28ED98905F5895A98CD394EFFF123D7487A75C67642B0993063EE4EC17B8C7B7B0F29703118BC73EB389586918A07A28262E56B08CAE1AC8AD061C251E46FBDDB2649DF9F107657F535AE99EFE6D65FA4C7A3608F8EAB09CE3AFE86A0850E40CF41F77331B4E63CAE9EDA9DA60595E9B9EB8D38321270E078288087B11D68689E2D6C9DD55EA331DB7A18A7800DFA1CE94C03F5AA4EC76F9BC969135B615E096F994E615701AFB9DB8523BD109D4148D9B5CD9070A13E7B93BD565E2F92AB1318A819458DB3C97BE230482D2956487FD54809532676FCAE3B26D3E4291C3845BF517AEC62366015880305FB68C39C75FD59EF06A93079A2FC82D8C03BA8443F1FB5A0531AACF3E8574121778ACF1B622CAC00E25916393BA425398E2B73D1D43E359AA47C89FFD5F8D3E4DF3AE2264A5885C1DFC2BA2C37364367964CD5B96EE49C33C5E3A839921B30E760BAF2FE702137C345035BB2EE0C954FAF99F8DCA5498D4997D6F2C249F6A28DE83623E1E7DA4E9B6E91FE48E3671A73269C5FDCC5DDC2392E49B123B912D0545BC2D29F3F14BE79D70FEFD7EC8958EB35BE232C1AC8EBE145DC7554A4D210530211C7F1AA5285A593DAC974BFCB28D77EB11575A4AD819C755E0D365BBE364596E1BBC5B387B48AF671B6F5AFF9901255B308C53F141417465E24B43E7DEB568AF4E1551AF22619A852EB3523EB4A75C0365F3EAEC5C880A886F2DED2649C6950DD11BF57978916454D908500290AAF94CA449C9DB38F9DFB6AE9104208E8D7380CA1B1A4F041BFE0A79A6F04F4EF72557D9EF326D22584921CDA7D1393D743577997935EB8BFAB10D588DE5724FA6C2ABE9D97DFB2AF788F7B37DD40A2F6CFB2D044703743689F2EB1E2165CE84FF073C02A0BFC2290C1DAC5B495D8F12E39C472E201FE8580106CE5FA55B9C85928552182B596D7DB0CEA1DD5D81A295CD6AF52CE9F6542A03039DCAE2432DAC755C48E979957A9F55D801A64CAF843937427BF71C59799D98510A5C267A93A506A8D1C68833195C77D2BB5C4D80A824FE8DCBB4D78FE34CF8D5822BF043A9E818068A8157347AE73DB63384F67F9200AC3563AE10269D0B91AB395FED49F8475AC426488F43E8111D1793B971B00DDD033B440023A44394EAAF927881068549773876D5B3C9391A883C38BBF444C8F239C512852B3AAD581303C11C9AF8F1933803661D868D1D61336C150442727F12770F6A8875FCB98DA3144391921D3F78E79AE87904FA145F389C73CD5FC870715B5E938D01EDDB70171BEAE3095A29406C076FAD3C26EF96B87C78DB6945D7219E3CD07FFC00AFECB0ADFEFE495E7B3FAF6729CDD7A4AC770CBB5E11CA74B66798D5C02B43B3E9FE63C9E58E520779AAEA4579053AE4F3278E591DBD165F236B44DDEDA2A15B0DA460E13EEFF108E8EBAF4EFD89C82D06E4A9765ACC8E5C867CDEEFDE1395509A6D2BED93876273470A52D6F49A952A821BF82C1A87B666631025CBD0F07102193C50410A76F3A1517CCBC23628F26B796A3E587B2B70932BBDB52AA84BBB515EDA51A5DA5053D3D87DCEE7F36F938F24F557E1B6EA389BD5E0514A20F78931A50461C75F8B9A65A23B39C86DB98EBA27DC2417A6FCCCA999AC87B466D1A58C010387FE21616475DC65D2232B44E06CBD4B488C03BCEE0962AF034F7CAC5DF83E5E709AE089BCBF9D1241ABCF04E177DAFE8BE68CD8B26721072406019FFD743D6153AA1F3D8D9AC2435688FA0142AE5891F32651D26B42CA9EB55FFB6A481F88FC1F02C680C98463028265813714B7B6499B7DE158D81555956821AEB68DF530988728DC4F9D092EF91A74AB3E33F1DE46E7EB26B574DA16336459B4EB19BA8230A900F7202BB535B675BAB8279837455B3E6ABCA0CD2FA58F86124008B7CD077262338F8271BA354796DD653D7D93DDB0D56D81523BB98D8E83F22E01D55FB29B08D5DE5830327410B9A3667426CC0A76DF0761D2655216B812D3391B5C89C978430DEB27953CDEBC623F3DCAD38E1890B46B08F7ABFBBD627900F448D367FD509EF513792EC0DD393AB0C7D8725CF65CBB71AE43E29EA5BC51FD7348BB7044DECFFC1286BB70294B0DDC97EECCDE7EA181CE7A870D5BBD6545ACE391D80125D5989819F497B201E1BB9596336486374E7B1804AFFB2E564431C10BFC92FB7AB8E8852044B5D27DAD4F62F3928C0ED655557F6C86CE6E851B46B3C4EACFF55F2E5021D77234F9903B0751AF4C9A09E6CC338F1B6DFE7D66FC7BB13DF44E333734DE807B16E3DBAFB134390CDE79F00EBD965FB8DDBED27756319C8FB1B4E39B63B9EB11879A11E5275F93F06D7A74D45A6532C566225B9F8BCAD31745AB8624AB629CEF636DE8C8F42ED6BE7B6F60AFD265FABA5C89E011AA1F237A15C1788B5C503C123B912DC224347C0185A187092B8D6FF6747F742CD2E07306F97709B325AC3134B52BA54726619048408A95BE5FDB964975A8B1DDA13A340DF548D8A336C75DCF5EA54D31CFBF4E3DA5E87AE2CFA24B153AE98066239BD269216EE12A22F03970D5D8E4147E2FE7FEF28ABDF4F416966D2674A44AD5CE617760DF37D42363B32AEA7901880B39078AD2F1882A7F735123536BCB76AF5EE5401CB923DE27DD7E01F41B02982895820AB4FDABE59DDE6D3C4020363AD1BDB808E9FBCE66E871959219A91B08C46450A051D9FB3C3A0198E86867E489D3B0C68EB8583CC42DE1F0FC14615765BD2B4F7C2D2A6EFD964265E054225DD73E058E8044ABF132256D6A36618E88C3467BE2143D5D665EA7F44C539F61FA4F1C54C1C3DFD5744BCE8358A0695649DF4987310B1E387DAB5DE9A1A580259466F219AE51A0557CA4A7221DC2E58C3FF6541888582EF96FC9683E5098F03A180FD6B27EEE6335383DAEC2BE60CDC143FFEAEFF182A3650E7B4F22C7435A01C067529486DA4CE3AA4DD4F4A90AE8E96FCA72764905602F489AC0D03EFD7CA9D473D3371428739A88655F8A42A40F8DC698592B9F477C04FEC4DC5774A4956094A3820295F3B0286CE82D057870BE6783BD85DCA3A2FCEE6A3AD43CADA32F9A47264D08AAF6901C227BB5CDB22911E0835C33199F2B8271D11AD227760E2C80F07E5181C6139D729365646E89DE394161AF7C4E6980E1EB2FBE1E0B06F978D43BABF09FF24A7A3B34D929FDBF53CF5C9BED9EDC12856028CF2FBC2F6FBA41D80517A546E61FC0E06181EACDECE4BCA98D5824B6D86919777EF7C2AEF28C6F0DED815C6CCD97DCBDF754952E01F3C93C534E99BB55F3F3FB213A5ADA2F0244CC1EE1A40CF1FF670E44AF1085942001E378BCA5D4C90831CE316EB7EC565994E1BF70CF2614E22D44F9FABFCB05B5E2E510422591ECE9BB9F39AF2E9700ABED9C3D5B7BD898A170A9164A47A46276CB886EB5667A4E8B1DA0DA338544A40360CCE66764EE8E0B734C26634051FB96AB39C001A66FD1322AE52AC9B846765F33135ED908134726D16066F2E858530B8FEC46578E17026F8A9D8B7EF94A74BF6D6F90F9209708099AE996C06D906ABE65C2EE95A7C10DA2A5D85A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: SLRMZA+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /SLRMZA+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid1591 putdup 34 /cid4320 putdup 35 /cid7035 putdup 36 /cid3324 putdup 37 /cid1435 putdup 38 /cid3676 putdup 39 /cid2941 putdup 40 /cid1806 putdup 41 /cid4457 putdup 42 /cid3379 putdup 43 /cid1873 putdup 44 /cid7566 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 14 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid1435 {(\001) 0 $SP} putdup /cid1591 {(\002) 0 $SP} putdup /cid1806 {(\003) 0 $SP} putdup /cid1873 {(\004) 0 $SP} putdup /cid2941 {(\005) 0 $SP} putdup /cid3324 {(\006) 0 $SP} putdup /cid3379 {(\007) 0 $SP} putdup /cid3676 {(\010) 0 $SP} putdup /cid4320 {(\011) 0 $SP} putdup /cid4457 {(\012) 0 $SP} putdup /cid7035 {(\013) 0 $SP} putdup /cid7566 {(\014) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/SLRMZA+PingFangSC-Regular cguidfix
/F1.1/SLRMZA+PingFangSC-Regular renmfont
%RBIBeginFontSubset: CNBQDW+Helvetica
%!FontType1-1.0: CNBQDW+Helvetica 1.0000.0.0000
14 dict begin/FontName /CNBQDW+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /D put
dup 35 /C put
dup 36 /B put
dup 37 /quotesingle put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<

002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020




00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/quotesingle 1 def
/A 2 def
/B 3 def
/C 4 def
/D 5 def
/u20B8 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C17F84342BE35467EF741E9B1F37702C9D7F24817640948A4FFFC3C11C57A75AC91D9DDE76BB3DC5BAFA8F4A81526C6DA7717B5A09975AD7BA83B3B1D6C6C215F951322E9D8EFBCA93BC0725889396E3E0967ACCA9A3F95CD9DF952DA5BDD0E45C2B021F103A2643DABAF752FB967B6F023CAB45E4F524BCB04660DA2C2188A7143B09EFC26B04055AB931D1AC629D2D0180D7B5ABAA44B8E908D3D01CA7D8241A868322B6C04CF29A98F16A022C117483F29A2B40C0EBDF760AF0DEB9DFE6E4080699043D68115CF828ACD8E31B616BC9DB02474D744A1AA06362D70BE8ED82A56277E039D7253B246589A7F17116B95D514752563260AAF904A53BEB5D492B8DD8C5A02061D2A92F490714D3B7919B9F27F57867394D8CFACB08D796AF865C326F04B04E447CD9C1D5FFC880DA82D86699D77AE711ABFCACF5E1042F7EB9BE40EEDA433F18E56C0072B44382B09CDE26E1C1EBD7883CDA52E885EE7F6F2C2917243434488B265DD1BE63F095FFC7F2F24570561A31A07602DD2AAA799338E1559B8DBEED3AB7C33073DBEA243F0A2F57CE23CC8CA6C4AC9D1620AA53F4322AD9A221212D0023A58D9248C4D217622360D1CBD051560F0B5584C46FC2489024802514D956ADA0681781EAC55939522A68989BAA43BDF54F3A2C4E9743AE91CE86AE81574E3247F673B7A4403E31820C410E55CE109B209C09540798B955BAD66F92C7724BAB
E4DF980F7244EA2C62B358058BC5CF73D9A46F632818E5CE9D225EAAD1C611F83EC97E5F321538622075A92B37AD27FE7E1C0ED5B417DF7E60228163263E2FBD4D1DF4CEEAEBEBBDEF10737423B090E5B6E1397BF86C733FC1A5DA57A222955C9D6E989DF7D2022A38B3EFAD1EF9ADFDEF9939983101DC28EAAB4377B725ABEC956455F6E0C923A1EB25541A2A356220054B12149060884CDFFD182CA8B57112BAEA1785E4AD9F09A1A8343C550C59B853DA6A9AC4FF80F27DEF5709052E07C4C5B8A04DB298D097D7948E4AF9793AB79550942A086C4F8CB57BC45446CB9FB3EA69D5586DB62FA3F08DB993A9F96D5F1F567D4AA9E43447BE85DF6E43B330ED44E02115347DA777DB8E215C1696548952CBF5B8DA425A60F38AF2BCB5E9DBE3D4FD68ADE36139F9F77CB10EA6AE3C2936F24BA9BF6342D7740DB75FA605AE68848C45BC153EF9EF55683819CD4F3B8BDA4B9B676F6BEEA9774646EF495D54ECBC2C64A5E5D5EF79E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CNBQDW+Helvetica cguidfix
/F2.1/CNBQDW+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.47445548 0.47454107 0.47445005 sc
q
0 0 535.48444 361.54379 rc
390.08377 164.13167 m
440.04828 122.79459 l
475.93008 180.29861 l
418.21246 216.13397 l
f
2 J
1 0 0.35294119 sc
1 0 0 -1 -37.633293 562.07153 cm
427.71704 397.93985 m
477.68158 439.27695 l
513.56342 381.77292 l
455.84576 345.93756 l
S
0 0 0 sc
563.23505 270.1907 m
559.95764 272.48386 l
S
556.68018 274.77701 m
553.40277 277.07016 l
S
550.12537 279.36331 m
546.84796 281.65643 l
S
543.5705 283.94958 m
540.29309 286.24274 l
S
537.01569 288.53589 m
533.73828 290.82904 l
S
530.46082 293.12216 m
527.18341 295.41531 l
S
523.90601 297.70847 m
520.6286 300.00162 l
S
517.35114 302.29477 m
514.07373 304.58789 l
S
510.79633 306.88104 m
509.95245 307.4715 l
S
0.81568629 0.81568629 0.81568629 sc
CM
28.889187 134.16188 m
111.33906 66.555817 l
189.5184 46.054443 l
357.59216 98.134819 l
383.07538 124.927 l
304.98428 198.05573 l
200.59915 186.45407 l
29.276937 134.16081 l
f
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
66.522484 427.90964 m
148.97235 495.51572 l
227.15169 516.01709 l
395.22546 463.93671 l
420.70868 437.14453 l
342.61755 364.01581 l
238.23245 375.61746 l
66.910233 427.91074 l
S
0.40000001 0.40000001 0.40000001 sc
CM
156.8997 128.5493 m
197.63441 93.428505 l
277.21451 118.68182 l
237.10515 154.33527 l
158.56017 128.8689 l
f
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
194.53299 433.52222 m
235.2677 468.64304 l
314.84781 443.38971 l
274.73843 407.73627 l
196.19347 433.20264 l
S
420.13895 436.0231 m
317.90079 307.73724 l
S
394.9187 462.90274 m
318.24655 306.92426 l
S
319.36823 213.37576 m
316.30994 215.9539 l
S
313.25162 218.53204 m
310.1933 221.11017 l
S
307.13501 223.68831 m
304.07669 226.26643 l
S
301.0184 228.84457 m
297.96008 231.4227 l
S
294.90179 234.00084 m
291.84348 236.57896 l
S
288.78519 239.1571 m
285.72687 241.73524 l
S
282.66858 244.31337 m
279.61026 246.89151 l
S
276.55197 249.46964 m
273.49365 252.04778 l
S
270.43536 254.6259 m
267.37704 257.20404 l
S
264.31876 259.78217 m
261.26044 262.36029 l
S
258.20212 264.93845 m
255.14383 267.51657 l
S
252.08553 270.0947 m
249.02722 272.67285 l
S
245.96892 275.25098 m
242.91061 277.8291 l
S
239.85231 280.40723 m
236.79399 282.98538 l
S
233.73569 285.56351 m
230.67738 288.14163 l
S
227.61908 290.71979 m
224.56078 293.29791 l
S
221.50247 295.87604 m
218.44417 298.45416 l
S
1 0.53051901 0.24705882 sc
CM
231.27869 360.11472 m
283.36337 348.79596 l
212.75771 342.40619 l
230.48141 360.0405 l
f
2.1259842 w
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
268.91199 201.95682 m
320.99667 213.27557 l
250.39099 219.66533 l
268.11472 202.03102 l
S
0 0.61176473 1 sc
CM
180.70259 263.01077 m
248.46698 283.39862 l
280.8504 253.66049 l
213.80901 236.76826 l
180.089 262.6124 l
f
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
218.33588 299.06076 m
286.10028 278.67291 l
318.48367 308.41104 l
251.44231 325.30325 l
217.72229 299.45914 l
S
38.894634 401.69144 m
42.806644 400.85706 l
S
46.718658 400.02271 m
50.630669 399.18832 l
S
54.542679 398.35397 m
58.454689 397.51959 l
S
62.366703 396.68524 m
66.278717 395.85086 l
S
70.190727 395.01651 m
74.102737 394.18213 l
S
78.014748 393.34775 m
81.926758 392.5134 l
S
85.838768 391.67902 m
89.750778 390.84467 l
S
93.662796 390.01028 m
97.574806 389.17593 l
S
101.48682 388.34155 m
105.39883 387.5072 l
S
109.31084 386.67282 m
113.22285 385.83847 l
S
117.13486 385.00409 m
121.04688 384.16974 l
S
124.95889 383.33536 m
128.8709 382.50101 l
S
132.7829 381.66663 m
136.69492 380.83228 l
S
140.60693 379.99789 m
144.51894 379.16354 l
S
148.43095 378.32916 m
152.34296 377.49478 l
S
156.25497 376.66043 m
160.16698 375.82605 l
S
164.07899 374.9917 m
167.99101 374.15732 l
S
171.90302 373.32297 m
175.81503 372.48859 l
S
179.72704 371.65424 m
183.63905 370.81985 l
S
187.55106 369.9855 m
191.46307 369.15112 l
S
195.37509 368.31677 m
199.28709 367.48239 l
S
203.19911 366.64804 m
207.11111 365.81366 l
S
211.02313 364.97931 m
214.93513 364.14493 l
S
218.84715 363.31055 m
222.75917 362.4762 l
S
226.67117 361.64182 m
230.58319 360.80746 l
S
234.49519 359.97308 m
238.40721 359.13873 l
S
242.31921 358.30435 m
246.23123 357.47 l
S
250.14325 356.63562 m
254.05525 355.80127 l
S
257.96725 354.96689 m
261.87927 354.13254 l
S
265.79129 353.29816 m
269.70331 352.46381 l
S
273.61533 351.62943 m
277.52731 350.79507 l
S
281.43933 349.96069 m
285.35135 349.12631 l
S
289.26337 348.29196 m
293.17535 347.45758 l
S
297.08737 346.62323 m
300.99939 345.78885 l
S
304.91141 344.9545 m
308.82343 344.12012 l
S
312.73541 343.28577 m
316.64743 342.45139 l
S
320.55945 341.61703 m
324.47147 340.78265 l
S
328.38348 339.9483 m
332.29547 339.11392 l
S
336.20749 338.27957 m
340.11951 337.44519 l
S
344.03152 336.61084 m
347.94351 335.77646 l
S
351.85553 334.94211 m
355.76755 334.10773 l
S
359.67957 333.27335 m
363.59158 332.439 l
S
367.50357 331.60461 m
371.41559 330.77026 l
S
375.32761 329.93588 m
379.23962 329.10153 l
S
383.15161 328.26715 m
387.06363 327.4328 l
S
390.97565 326.59842 m
394.88766 325.76407 l
S
398.79968 324.92969 m
402.71167 324.09534 l
S
406.62369 323.26096 m
410.53571 322.42661 l
S
414.44772 321.59222 m
418.35974 320.75787 l
S
422.27173 319.92349 m
426.18375 319.08911 l
S
430.09576 318.25476 m
434.00778 317.42038 l
S
437.91977 316.58603 m
441.83179 315.75165 l
S
445.7438 314.9173 m
449.65582 314.08292 l
S
453.56784 313.24857 m
457.47983 312.41418 l
S
1 w
218.61441 298.66779 m
66.906609 427.79352 l
S
148.62823 495.50201 m
251.51244 325.52487 l
S
252.20918 326.85992 m
252.73029 322.89401 l
S
253.25139 318.9281 m
253.77248 314.96219 l
S
254.29358 310.99628 m
254.81468 307.03036 l
S
255.33578 303.06445 m
255.85689 299.09854 l
S
256.37799 295.13263 m
256.89908 291.16672 l
S
257.4202 287.20081 m
257.94128 283.23489 l
S
258.46237 279.26898 m
258.98349 275.30307 l
S
259.50458 271.33716 m
260.0257 267.37125 l
S
260.54678 263.40533 m
261.06787 259.43942 l
S
261.58899 255.47351 m
262.11008 251.5076 l
S
262.6312 247.54169 m
263.15228 243.57578 l
S
263.67337 239.60986 m
264.19449 235.64395 l
S
264.71558 231.67804 m
265.23669 227.71213 l
S
265.75778 223.74622 m
266.27887 219.7803 l
S
266.79999 215.81439 m
267.32108 211.84848 l
S
267.84219 207.88257 m
268.36328 203.91666 l
S
319.21146 308.98309 m
317.45068 305.39148 l
S
315.68991 301.79987 m
313.92914 298.20825 l
S
312.16837 294.61664 m
310.40756 291.02502 l
S
308.64679 287.43344 m
306.88602 283.84183 l
S
305.12524 280.25021 m
303.36444 276.6586 l
S
301.60367 273.06699 m
299.8429 269.47537 l
S
298.08212 265.88379 m
296.32132 262.29218 l
S
294.56055 258.70056 m
292.79977 255.10895 l
S
291.039 251.51733 m
289.27823 247.92574 l
S
287.51743 244.33412 m
285.75665 240.74251 l
S
283.99588 237.15091 m
282.23511 233.5593 l
S
280.4743 229.96768 m
278.71353 226.37608 l
S
276.95276 222.78447 m
275.19199 219.19286 l
S
273.43118 215.60124 m
271.67041 212.00964 l
S
269.90964 208.41803 m
268.14886 204.82642 l
S
316.77982 307.992 m
314.3399 304.82233 l
S
311.89996 301.65268 m
309.46002 298.483 l
S
307.02011 295.31335 m
304.58017 292.14371 l
S
302.14023 288.97403 m
299.70032 285.80438 l
S
297.26038 282.6347 m
294.82043 279.46506 l
S
292.38052 276.29541 m
289.94058 273.12573 l
S
287.50064 269.95609 m
285.06073 266.78644 l
S
282.62079 263.61676 m
280.18088 260.44711 l
S
277.74094 257.27744 m
275.30099 254.10779 l
S
272.86108 250.93813 m
270.42114 247.76846 l
S
267.9812 244.59882 m
265.54129 241.42915 l
S
263.10135 238.25949 m
260.66141 235.08983 l
S
258.2215 231.92017 m
255.78156 228.75052 l
S
253.34163 225.58086 m
250.9017 222.41119 l
S
227.504 516.32269 m
252.15976 327.55917 l
S
238.95737 375.57361 m
312.17084 394.98978 l
393.86871 462.41095 l
342.14444 364.66022 l
254.40834 390.22781 l
175.60524 416.23483 l
67.866737 428.05634 l
146.67085 447.30496 l
175.48364 416.60303 l
255.08157 485.62149 l
227.45464 516.18726 l
146.82645 447.49118 l
S
148.99974 495.53275 m
235.44244 468.79388 l
S
146.84506 446.91324 m
195.43507 433.27988 l
S
148.86856 495.32065 m
255.10872 485.8129 l
417.3811 437.62067 l
314.9649 443.72263 l
394.91837 464.32837 l
S
238.66772 375.30569 m
274.64331 408.01981 l
313.44012 395.05103 l
342.40289 364.20877 l
S
0 i
/F1.1[ 18 0 0 -18 0 0]sf
337.01746 221.51112 m
(!")[ 18.000000 0.000000 ] xS
319.02945 294.8237 m
(#$%)[ 18.000000 18.000000 0.000000 ] xS
422.0676 520.17578 m
(&')[ 18.000000 0.000000 ] xS
338.20178 540.25409 m
(\(')[ 18.000000 0.000000 ] xS
0.60000002 i
420.08679 514.54272 m
322.63696 503.42874 304.38028 477.69675 276.36011 440.62921 c
S
CM
234.17972 127.42631 m
240.92308 123.12199 l
236.57867 119.79446 l
h
234.17972 127.42631 m
f
0.25 w
1 0 0 -1 -37.633293 562.07153 cm
271.81302 434.64523 m
278.55637 438.94955 l
274.21198 442.27707 l
h
271.81302 434.64523 m
S
1 w
334.48276 536.57355 m
295.28494 531.98956 278.47858 513.18518 271.76163 499.64578 c
S
CM
231.32291 69.390854 m
236.15321 63.013687 l
230.92397 61.40081 l
h
231.32291 69.390854 m
f
0.25 w
1 0 0 -1 -37.633293 562.07153 cm
268.95621 492.68066 m
273.7865 499.05783 l
268.55725 500.67072 l
h
268.95621 492.68066 m
S
2.1259842 w
40.192272 403.30853 m
147.9122 559.96399 l
570.84186 434.85138 l
460.05511 313.3009 l
S
0 i
/F2.1[ 18 0 0 -18 0 0]sf
476.39828 455.09152 m
(!)s
463.89124 352.49988 m
(")s
1 w
0.60000002 i
477.37479 351.52283 m
428.3511 397.81158 l
S
1.4173229 w
1 0 0.35294119 sc
456.01443 345.94501 m
428.31485 397.43759 l
S
1 w
0 0 0 sc
511.26425 307.03842 m
456.17877 345.43307 l
S
0 0.61176473 1 sc
CM
440.92621 123.63509 m
439.48813 210.5013 l
471.9856 252.55266 l
475.97885 180.70447 l
f
2.1259842 w
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
478.55948 438.43643 m
477.12143 351.57022 l
509.6189 309.51886 l
513.61218 381.36707 l
S
1.4173229 w
1 0 0.35294119 sc
513.76947 381.68384 m
478.46918 438.41403 l
S
0 0 0 sc
0 i
494.31174 305.37585 m
(#)s
511.58926 406.5282 m
($)s
414.6727 394.1687 m
("%)[ 12.999023 0.000000 ] xS
436.56549 349.4278 m
(#%)[ 12.999023 0.000000 ] xS
/F1.1[ 18 0 0 -18 0 0]sf
491.83401 270.85745 m
(\)!")[ 18.000000 18.000000 0.000000 ] xS
138.75812 538.61298 m
(*+,)[ 18.000000 18.000000 0.000000 ] xS
1 w
0.60000002 i
564.44867 271.20142 m
561.50226 273.90677 l
S
558.55591 276.61212 m
555.60956 279.31747 l
S
552.66321 282.02283 m
549.71686 284.72821 l
S
546.77051 287.43356 m
543.82416 290.13892 l
S
540.87775 292.84427 m
537.9314 295.54965 l
S
534.98505 298.255 m
532.0387 300.96036 l
S
529.09235 303.66571 m
526.146 306.37106 l
S
523.19965 309.07645 m
520.25323 311.7818 l
S
517.30688 314.48715 m
514.36053 317.1925 l
S
511.41418 319.89786 m
508.46783 322.60324 l
S
505.52145 325.30859 m
502.5751 328.01395 l
S
499.62875 330.7193 m
496.68237 333.42468 l
S
493.73602 336.13004 m
490.78967 338.83539 l
S
487.84332 341.54074 m
484.89694 344.24609 l
S
481.95059 346.95148 m
479.00424 349.65683 l
S
1 0.53051901 0.24705882 sc
CM
532.24316 292.91855 m
532.24365 293.74927 532.07849 294.57962 531.76013 295.34695 c
531.44269 296.11459 530.97229 296.81854 530.38458 297.40564 c
529.79749 297.99335 529.09357 298.46371 528.32593 298.78119 c
527.55859 299.09952 526.72821 299.26468 525.89752 299.26422 c
525.06677 299.26468 524.23645 299.09952 523.46912 298.78119 c
522.70148 298.46371 521.99756 297.99335 521.41046 297.40564 c
520.82269 296.81854 520.35236 296.11459 520.03491 295.34695 c
519.71655 294.57962 519.55139 293.74927 519.55182 292.91855 c
519.55139 292.08783 519.71655 291.25748 520.03491 290.49017 c
520.35236 289.7225 520.82269 289.01859 521.41046 288.43149 c
521.99756 287.84375 522.70148 287.37341 523.46912 287.05591 c
524.23645 286.73761 525.06677 286.57242 525.89752 286.57288 c
526.72821 286.57242 527.55859 286.73761 528.32593 287.05591 c
529.09357 287.37341 529.79749 287.84375 530.38458 288.43149 c
530.97229 289.01859 531.44269 289.7225 531.76013 290.49017 c
532.07849 291.25748 532.24365 292.08783 532.24316 292.91855 c
h
532.24316 292.91855 m
f
0 0 0 sc
1 0 0 -1 -37.633293 562.07153 cm
569.87646 269.15298 m
569.87695 268.32227 569.71179 267.49188 569.39343 266.72458 c
569.07599 265.95694 568.60559 265.25299 568.01788 264.66589 c
567.43079 264.07819 566.72687 263.60782 565.95917 263.29034 c
565.19189 262.97202 564.36151 262.80685 563.53082 262.80731 c
562.70007 262.80685 561.86975 262.97202 561.10242 263.29034 c
560.33478 263.60782 559.6308 264.07819 559.04376 264.66589 c
558.45599 265.25299 557.98566 265.95694 557.66815 266.72458 c
557.34985 267.49188 557.18469 268.32227 557.18512 269.15298 c
557.18469 269.9837 557.34985 270.81406 557.66815 271.58136 c
557.98566 272.34903 558.45599 273.05295 559.04376 273.64005 c
559.6308 274.22778 560.33478 274.69812 561.10242 275.01559 c
561.86975 275.33392 562.70007 275.49911 563.53082 275.49866 c
564.36151 275.49911 565.19189 275.33392 565.95917 275.01559 c
566.72687 274.69812 567.43079 274.22778 568.01788 273.64005 c
568.60559 273.05295 569.07599 272.34903 569.39343 271.58136 c
569.71179 270.81406 569.87695 269.9837 569.87646 269.15298 c
h
569.87646 269.15298 m
S
251.52664 325.40817 m
253.56755 321.96802 l
S
255.60846 318.52786 m
257.64935 315.08771 l
S
259.69028 311.64752 m
261.73117 308.20737 l
S
263.77206 304.76721 m
265.81299 301.32706 l
S
267.85388 297.8869 m
269.89481 294.44672 l
S
271.9357 291.00656 m
273.97659 287.56641 l
S
276.01752 284.12625 m
278.05841 280.6861 l
S
280.0993 277.24594 m
282.14023 273.80576 l
S
284.18112 270.3656 m
286.22205 266.92545 l
S
288.26294 263.48529 m
290.30383 260.04514 l
S
292.34476 256.60495 m
294.38565 253.16479 l
S
296.42657 249.72464 m
298.46747 246.28448 l
S
300.50836 242.84431 m
302.54929 239.40416 l
S
304.59018 235.964 m
306.63107 232.52383 l
S
308.672 229.08368 m
310.71289 225.64351 l
S
312.75381 222.20335 m
314.79471 218.7632 l
S
ep
end
%%Trailer
%%EOF
