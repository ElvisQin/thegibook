%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 601 183
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 601 183
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: YGKKWQ+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 6/22/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid11 putdup 3 /cid12 putdup 4 /cid16 putdup 5 /cid36 putdup 6 /cid40 putdup 7 /cid44 putdup 8 /cid50 putdup 9 /cid68 putdup 10 /cid69 putdup 11 /cid70 putdup 12 /cid71 putdup 13 /cid72 putdup 14 /cid74 putdup 15 /cid76 putdup 16 /cid80 putdup 17 /cid81 putdup 18 /cid82 putdup 19 /cid83 putdup 20 /cid85 putdup 21 /cid86 putdup 22 /cid87 putdup 23 /cid88 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D91049A874D9523CE60CDB040DE6F35D1C076197DD36F282266BB6E39EB7928E4FEB7C23DA86BE2BF2DCF6B9FAAD6280BEE0B3844B8A87C0939B7F2ED90C46815804056308A160253FCCC2A5FDBD21277627CDE7460D924F39E1DD79627CA474490C962AD31814318CCC5B3374253392093931CC63585734D0DE4A0EDAC48F0112B371B7D33A138FA6FE7411ED5E6174797BF7F218459A5AB0E8F685DD57E312DBE101B486DD5EFA7F184DD40645AFF811234EBA645D6DF35258362335384B254F7978C76EA114027B465312680187C7A2B1F359F525F269847C643E2227961D51BF3784B704A15C75F8C3C0293FC6566370D0A67FDD3D3B3D9BBC55522F7B48CCC0E8992B832C4A402D123188070C880A3515F6E7ED3C04F7E512F351D81614CD73EA7C166D890CEA7FB865887163C6476258631534DC4D50C555750CBDC6E0DB843A5B342229925F735E9FCB74879A54151094A520DDD51A25774C0F44047FAB1264804725D16E6AD512BA0649383B0966800AFE0BF79A594533550AF05F124BB49CC2DE5C5478F58AA203B0C360739644EFD2728ECD18DDA85977CB372E6F9926AAF6FF31805A01A1C663104966AD15C74AE9F41C8ACC984AB4DE902DD2D2218EE4DEFD4767BC4B9C238E09B1CA8246E8CE0F7AFE59C9224437C0813CC9A46769C8E5F6032EDBBADB623848F351C20C6A43EB23192E798B10222F7FB58654E82620592EDF32B913411ED9CD19EE96BC51021994B91A66CD2A8EC54BE2105E097432CA714299506F46C64B20E52A382055FCABF85C70DCF8888400DEF9E244530267BB3E69AB4C150C265349CD3AA91D1668AC0DA628BC413EFFA62A08B7AF76EAC0ECDB37F4781CD2056CA0154D36D70921260E193EC5F2390DF207AAAEB62F251F8D355611D894F2C5897C046AFFD3FF75ADCC66EB4EDA345525F546D16B3B17BEE0C80A762E0D19F93C0AB752EF16418B10DC21BB9EA4C1785D32651ECC7E7B521A170C0495CF012F8DE238F4BE1329BC41D684017E59D400A72BEB75153D8F17B89C3EA242028869FCA3F8FB24CBCCDB8C9FBDDC721B02FFF539FFD2DA9F3A1D690FF3D7E29B527F5407364CC6F67532B5F47AB6F08CF1453F15CFCC230AADAAFBF50B9B2BC877619FFE70BBEA7677B8C6CC28D852EF3AF41373B1CAE6EE1F84AAB299B8EDEC80CA97158170E865CED746D2530AD5F3C924284B779F2E5086712EF9A4AD50B21E59F4F2A11985F2D2B30C5F8F5615707BB6A0B7FC2D6075C5AEBBB2B729B99D2C6DEAE089CF669412A60AD9286C4FF7B7EF47D0221A52DBCF1202973CBDD94AA701B766C10750C53FB22117058C5B16BE49C8BBE5CA4D5CB3137272C11FC00BDAE14890F715FE9839B80B7483587026CE49084F782C95512CD2F83575B6426A82F101D0F5D8D0DF07D8D72FB17A9A0364D422FAC37D3B49231C37FF767CB1AFFED9540853079E4536DD9B17B3940EEFBB784501E43D661F9353031091A452B54DE2FA8895CF87DEB67EAA4AB4D615679465F21DC39FA4660C12469477338F1F28BBED6C9202E7E6334C3F41048B71E7286517220ABA804AE9C63EBFDD9153665F7723720C8F9A2F57897A5D010C7D7B9EB99A74E9D6B627F7A9D19577BE25CED4695C07D6A55A08F629D5F4CD0FCEC0E89FB83D0255E7F96CABFF49873463177B8F546DB26132339BEB40D82D55241D7C3737F777DBD4BACD14D11953E6DF9B6D95779BB29D7A27BAC17FE5B85D0FCB33105100B8D823AA39D58C51D19F3A5C0A626FF84C7DF28A3EB3FEA3B054348BBF51AEE44E78F718617E0D41C922B4E61E935B40F3FEE29A60FAC203CAE6F25192E1ED3BC9DFF664C92D49EE88CEE4F0AC236363056E353658B366AC1A5819582F1135599ED9F20F0FDE0F11EEE702AB1AB8D876F4BFF304D915FC69D3CC506DAEC44A0F7E9DFD274303C82FCC2589FE1EFD4B1287C50BD1D65492F5B784BCDA1E2C9A1E8D4F0F4883A4FD7BD2CE4C1A952636FD98F3C5B60C73235D00AC3C1E532F6BA681BB48522899CB1E7D70F658EB21C66DEDA20527E5E9F30CF8D8BEE4740C4FE124F2CC147B92989567A85496C5AE23D21D0AA296A3FC45200796AF18E75B125EFD3D8C008AEF75A93D3225C6652509417429C3FB4CBAC1581D669B259E63AB71EA27481E7B3EC758E3B0F1917EB7C86EBD84779257960FE498568C8428E4117C9BB4FEF73E5F1C84AF0BD5AA319757FCEA97A6034F9244D26E95DD1E4E0C6BE778633A0048E81AE0202F5EC7326101253F681394662DB71D2D743912116E904219926DB80797771B1F055B10BBC0CE8873BCA17FF243907FD5CB9A2975D4C696624BD8F8B036D0E7883DC2FCA05B77CC5A17D28382D6F79C874D308F90A9C255732E8794709F46E08A1616C8BC4CE50ADE007080526EEEE2E445572BBAB50B794E9C3C1E0933F4072013D02D8336B81B4CBA02A4C1311EB7FB268EF7D520FA0A8C1825799A4254F1BEF07F7101BC2BB84587B7C165D3F3D0A922BB60C040591057E01AC5FC1F51591F232F89CFB790F34A72787F42419BDDFCBC7AB34C1AB2B0DB00BA84C86CB7665D039B73961356BC46F5DE61D3348DC5E9E80841658D40F43AA6FC541A273B2779C0A9F5E7FA805CBDC721FE0D01E0816934362B0652A6345C6EC0300F8D365B2F27821A88C2C65D198A1AE913E41463DD3269FB8A6FDC480DB255E497210F0E651DF13FD387BF9441B2499638DE569409B6211EC9FF73E76ED131A610BC0B6674E266FC57AAECC0630BC4835CE299A11185AE73046838380DE15ECA48D6D43442FCD85FA0752F7E4493CE1AAEC65E966A9EDD35BBC431A66A85B2E52C7E8A06C99C150EF9BAF482FFE3116BC4DEA8C7E92459F3192CD76DB9D1D03E2C186C95277A4C77CD40DC101C1386CB53603B1BD9A87B825A9CBBB9BFFBCB2890CFBB9646425DD67E8D73FF6A37C4B49A5935CC7151C5985CF7511F21BEB1BF6FDBDCD5C79B5F52617952596187203E4B62A062AFE26A327E948D3A6CCBE3CBD8E51543EFFE65EE401E21A93A1CECD246359B3E13970FAEA7206BC04AE777A996BE30FE64D594DBF717D2C58A47F0BC3FDC847065E7F272911CFAED24CC62910D5BE7F722A210DC5A9B2DD7730232481B3C223FE2251F1448E1F6CC1C5F4DA6168EC993E7E1DAA75A6F691295C9A9D9E60D0477AA26634529DC7756523C67BD10AE64D3C7CA609BA2EA43FB87D30A0F56B8EE2334E81363593D5A9188B350883710775EE45D82254C04C688FBA5EA7A7C4944B3572623C18AA0763E096C0B445939EAE0B258FA1543F92DB811B5ECC9C48174B75377A356DEC6AF1107A3197433F7A90C4585B79081118696EC11D8F3F0A28A070CE001D628D273BFCDF08C9EB85A0A9256B085277C24641EEC54132B08B1CD9D8AD1E6621D427CADA1533B4737D714342837A24AA6FB0B0BC0D39915DF0C3F6DEBA739326F00ACF2A65BD4203E6F7DF78990EFD8A3CDBE282E96750B6C4F27483F61FC8429A9A4C10242F17A434B0070B5C66DFD194EA5906EBD9C5013E02ECBE68FD291FAA1018D9379B9DC2B27B21C3CF0E931222AC23981C54A63CC8EA476DCC09B6018D8CBFBE5F61ADCCF67E302872B76268C6DE14CFED970BA845CD6F7817C2934246B7901DC550F6F5F42BBA03E34188DE41BD5A9D0103BB72073D936E894120219459233A93A533AFA6EE3F82488053602966F43AC392DC59940ABFABAF3827A0767974B77057FB08E28ED961F194CB2960D3E075AFE7B3E2B61B18B8A83E7EBE8C020DD399E4B9883C9F40D3ACEBF27FBF0A7C9D67B726287E81A3DC85113AE561CDB9BBF2786FB5C92F4E14AABECCB31F1B83B268AB9DCEE931DA11C898E1835FD3AB7C410347C51599589D6BAB7CACEB469578F7A5EB0F0D4050A23B2EC0DE97F9524F2EE97ACA083AEDF50E2F336989C6E5CFA6B68727E9682411F1D753DBC913D700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: YGKKWQ+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /YGKKWQ+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid11 putdup 34 /cid68 putdup 35 /cid12 putdup 36 /cid3 putdup 37 /cid36 putdup 38 /cid69 putdup 39 /cid86 putdup 40 /cid82 putdup 41 /cid85 putdup 42 /cid83 putdup 43 /cid87 putdup 44 /cid76 putdup 45 /cid81 putdup 46 /cid40 putdup 47 /cid80 putdup 48 /cid70 putdup 49 /cid50 putdup 50 /cid88 putdup 51 /cid16 putdup 52 /cid72 putdup 53 /cid74 putdup 54 /cid71 putdup 55 /cid44 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 25 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid11 {(\002) 0 $SP} putdup /cid12 {(\003) 0 $SP} putdup /cid16 {(\004) 0 $SP} putdup /cid36 {(\005) 0 $SP} putdup /cid40 {(\006) 0 $SP} putdup /cid44 {(\007) 0 $SP} putdup /cid50 {(\010) 0 $SP} putdup /cid68 {(\011) 0 $SP} putdup /cid69 {(\012) 0 $SP} putdup /cid70 {(\013) 0 $SP} putdup /cid71 {(\014) 0 $SP} putdup /cid72 {(\015) 0 $SP} putdup /cid74 {(\016) 0 $SP} putdup /cid76 {(\017) 0 $SP} putdup /cid80 {(\020) 0 $SP} putdup /cid81 {(\021) 0 $SP} putdup /cid82 {(\022) 0 $SP} putdup /cid83 {(\023) 0 $SP} putdup /cid85 {(\024) 0 $SP} putdup /cid86 {(\025) 0 $SP} putdup /cid87 {(\026) 0 $SP} putdup /cid88 {(\027) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/YGKKWQ+PingFangSC-Regular cguidfix
/F1.1/YGKKWQ+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
5.6692915 w
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 600.14355 182.18904 rc
1 0 0 -1 -69.029892 333.39395 cm
365.45953 233.75325 m
413.31757 233.75325 l
S
CM
355.71881 99.640694 m
337.22284 92.908714 l
344.28769 99.640694 l
337.22284 106.37267 l
h
355.71881 99.640694 m
f
1.4173229 w
1 0 0 -1 -69.029892 333.39395 cm
424.74872 233.75325 m
406.25275 240.48523 l
413.31757 233.75325 l
406.25275 227.02127 l
h
424.74872 233.75325 m
S
2.8346457 w
436.47385 233.75325 m
492.46976 233.75325 l
S
CM
431.90738 99.640694 m
418.20667 94.654037 l
423.43988 99.640694 l
418.20667 104.62735 l
h
431.90738 99.640694 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
500.93729 233.75325 m
487.23657 238.73991 l
492.46976 233.75325 l
487.23657 228.7666 l
h
500.93729 233.75325 m
S
0.0049057337 0.60884833 0.30135173 sc
CM
368.38928 99.640694 m
368.3898 100.55143 368.20871 101.46177 367.85974 102.30299 c
367.51166 103.14458 366.996 103.91633 366.35165 104.55996 c
365.70804 105.20431 364.93628 105.71997 364.0947 106.06803 c
363.25348 106.41702 362.34314 106.59809 361.4324 106.59759 c
360.52167 106.59809 359.61133 106.41702 358.77011 106.06803 c
357.9285 105.71997 357.15677 105.20431 356.51312 104.55996 c
355.86877 103.91633 355.35312 103.14458 355.00507 102.30299 c
354.65607 101.46177 354.47501 100.55143 354.47549 99.640694 c
354.47501 98.729958 354.65607 97.819618 355.00507 96.978401 c
355.35312 96.136803 355.86877 95.365059 356.51312 94.721428 c
357.15677 94.07708 357.9285 93.561417 358.77011 93.213356 c
359.61133 92.864372 360.52167 92.683296 361.4324 92.6838 c
362.34314 92.683296 363.25348 92.864372 364.0947 93.213356 c
364.93628 93.561417 365.70804 94.07708 366.35165 94.721428 c
366.996 95.365059 367.51166 96.136803 367.85974 96.978401 c
368.20871 97.819618 368.3898 98.729958 368.38928 99.640694 c
h
368.38928 99.640694 m
f
1.4173229 w
0 0 0 sc
1 0 0 -1 -69.029892 333.39395 cm
429.98648 226.1972 m
437.85217 159.62355 l
S
CM
369.55823 179.99931 m
372.03574 169.48732 l
368.8223 173.7704 l
364.69913 170.35414 l
h
369.55823 179.99931 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
438.58813 153.39464 m
441.06564 163.90663 l
437.85217 159.62355 l
433.72903 163.03981 l
h
438.58813 153.39464 m
S
1.4173229 w
434.37845 227.13739 m
471.88126 164.83675 l
S
CM
406.08618 173.93092 m
404.01685 163.33102 l
402.85138 168.55719 l
397.6875 167.14107 l
h
406.08618 173.93092 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
475.11606 159.46303 m
473.04672 170.06293 l
471.88126 164.83675 l
466.71738 166.25287 l
h
475.11606 159.46303 m
S
1.4173229 w
437.08197 230.12317 m
482.21292 203.75967 l
S
CM
418.59891 132.79799 m
411.69901 124.48949 l
413.18304 129.63428 l
407.97266 130.8685 l
h
418.59891 132.79799 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
487.62881 200.59595 m
480.72888 208.90445 l
482.21292 203.75967 l
477.00256 202.52545 l
h
487.62881 200.59595 m
S
1.4173229 w
436.80328 237.69424 m
469.11423 258.71924 l
S
CM
405.34155 71.253822 m
394.82059 73.692902 l
400.08435 74.674721 l
398.84982 79.885017 l
h
405.34155 71.253822 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
474.37146 262.14014 m
463.85046 259.70105 l
469.11423 258.71924 l
467.87973 253.50893 l
h
474.37146 262.14014 m
S
1.4173229 w
433.47491 240.67409 m
460.04938 286.88599 l
S
CM
394.14627 41.070663 m
385.88495 48.027 l
391.0195 46.507961 l
392.28918 51.709797 l
h
394.14627 41.070663 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
463.17615 292.32327 m
454.91483 285.36694 l
460.04938 286.88599 l
461.31906 281.68414 l
h
463.17615 292.32327 m
S
1.4173229 w
429.42407 241.04199 m
426.84009 300.67615 l
S
CM
357.5387 26.451464 m
354.28766 36.750534 l
357.81021 32.717812 l
361.66837 36.430725 l
h
357.5387 26.451464 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
426.56857 306.94247 m
423.31757 296.6434 l
426.84009 300.67615 l
430.69827 296.96323 l
h
426.56857 306.94247 m
S
1.4173229 w
424.87982 238.97371 m
402.47464 272.33746 l
S
CM
329.94797 55.84943 m
332.53934 66.333939 l
333.44473 61.056492 l
338.67239 62.215332 l
h
329.94797 55.84943 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
398.97787 277.54453 m
401.56924 267.06 l
402.47464 272.33746 l
407.70227 271.17862 l
h
398.97787 277.54453 m
S
1.4173229 w
425.76468 227.69649 m
399.73886 186.72003 l
S
CM
327.34616 151.96849 m
335.90533 145.3821 l
330.70895 146.67392 l
329.66922 141.4213 l
h
327.34616 151.96849 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
396.37607 181.42546 m
404.93524 188.01184 l
399.73886 186.72003 l
398.69913 191.97266 l
h
396.37607 181.42546 m
S
5.6692915 w
601.06445 233.75325 m
648.92249 233.75325 l
S
CM
591.32373 99.640694 m
572.82776 92.908714 l
579.89258 99.640694 l
572.82776 106.37267 l
h
591.32373 99.640694 m
f
1.4173229 w
1 0 0 -1 -69.029892 333.39395 cm
660.35364 233.75325 m
641.85767 240.48523 l
648.92249 233.75325 l
641.85767 227.02127 l
h
660.35364 233.75325 m
S
2.8346457 w
528.48322 233.75325 m
578.6405 233.75325 l
S
CM
518.07812 99.640694 m
504.37741 94.654037 l
509.61063 99.640694 l
504.37741 104.62735 l
h
518.07812 99.640694 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
587.10803 233.75325 m
573.40729 238.73991 l
578.6405 233.75325 l
573.40729 228.7666 l
h
587.10803 233.75325 m
S
0.0049057337 0.60884833 0.30135173 sc
CM
531.05682 99.640694 m
531.05731 100.55143 530.87622 101.46177 530.52722 102.30299 c
530.1792 103.14458 529.66351 103.91633 529.01917 104.55996 c
528.37555 105.20431 527.60376 105.71997 526.76221 106.06803 c
525.92096 106.41702 525.01062 106.59809 524.09991 106.59759 c
523.18915 106.59809 522.27881 106.41702 521.43762 106.06803 c
520.59601 105.71997 519.82428 105.20431 519.1806 104.55996 c
518.53625 103.91633 518.02063 103.14458 517.67255 102.30299 c
517.32355 101.46177 517.14252 100.55143 517.14301 99.640694 c
517.14252 98.729958 517.32355 97.819618 517.67255 96.978401 c
518.02063 96.136803 518.53625 95.365059 519.1806 94.721428 c
519.82428 94.07708 520.59601 93.561417 521.43762 93.213356 c
522.27881 92.864372 523.18915 92.683296 524.09991 92.6838 c
525.01062 92.683296 525.92096 92.864372 526.76221 93.213356 c
527.60376 93.561417 528.37555 94.07708 529.01917 94.721428 c
529.66351 95.365059 530.1792 96.136803 530.52722 96.978401 c
530.87622 97.819618 531.05731 98.729958 531.05682 99.640694 c
h
531.05682 99.640694 m
f
1.4173229 w
0 0 0 sc
1 0 0 -1 -69.029892 333.39395 cm
611.24133 182.39508 m
597.66357 219.41081 l
S
CM
526.47369 108.09456 m
526.50073 118.89453 l
528.63367 113.98314 l
533.43652 116.35042 l
h
526.47369 108.09456 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
595.5036 225.29939 m
595.53064 214.49942 l
597.66357 219.41081 l
602.46637 217.04353 l
h
595.5036 225.29939 m
S
1.4173229 w
629.75214 207.625 m
605.67334 224.01823 l
S
CM
531.45874 105.84589 m
537.76898 114.61063 l
536.64343 109.37572 l
541.92651 108.50391 l
h
531.45874 105.84589 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
600.48859 227.54807 m
606.79889 218.78333 l
605.67334 224.01823 l
610.95642 224.89005 l
h
600.48859 227.54807 m
S
1.4173229 w
576.3822 163.31274 m
589.51099 219.4313 l
S
CM
521.90985 107.85532 m
516.00134 116.89574 l
520.48108 113.96264 l
523.19476 118.57861 l
h
521.90985 107.85532 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
590.93976 225.53864 m
585.03119 216.49821 l
589.51099 219.4313 l
592.22461 214.81534 l
h
590.93976 225.53864 m
S
1.4173229 w
550.49115 196.21304 m
582.09979 223.7597 l
S
CM
517.7984 105.51335 m
507.72061 109.39638 l
513.06989 109.63424 l
512.57434 114.96581 l
h
517.7984 105.51335 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
586.82831 227.8806 m
576.75049 223.99757 l
582.09979 223.7597 l
581.60425 218.42815 l
h
586.82831 227.8806 m
S
1.4173229 w
547.93237 280.86087 m
583.62946 244.2075 l
S
CM
518.97571 93.67981 m
514.5412 83.832222 l
514.59955 89.186447 l
509.24875 88.986572 l
h
518.97571 93.67981 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
588.00562 239.71414 m
583.57104 249.56172 l
583.62946 244.2075 l
578.27863 244.40738 l
h
588.00562 239.71414 m
S
1.4173229 w
579.95178 294.27496 m
591.1239 247.42244 l
S
CM
523.54883 92.072685 m
524.78796 81.344002 l
522.09399 85.971512 l
517.60181 83.057556 l
h
523.54883 92.072685 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
592.57874 241.32126 m
593.81781 252.04994 l
591.1239 247.42244 l
586.63165 250.3364 l
h
592.57874 241.32126 m
S
1.4173229 w
610.22784 286.04391 m
598.77899 247.07962 l
S
CM
527.9809 92.332161 m
534.38593 83.636436 l
529.74908 86.314331 l
527.29791 81.55378 l
h
527.9809 92.332161 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
597.01074 241.06178 m
603.41577 249.75751 l
598.77899 247.07962 l
596.32782 251.84016 l
h
597.01074 241.06178 m
S
1.4173229 w
627.62891 258.96344 m
604.86121 241.8587 l
S
CM
530.81659 95.302658 m
541.14929 92.160095 l
535.8313 91.53524 l
536.71191 86.253593 l
h
530.81659 95.302658 m
f
0.35433072 w
1 0 0 -1 -69.029892 333.39395 cm
599.8465 238.09129 m
610.1792 241.23386 l
604.86121 241.8587 l
605.74182 247.14035 l
h
599.8465 238.09129 m
S
5.6692915 w
286.10953 233.75325 m
333.96756 233.75325 l
S
CM
276.3688 99.640694 m
257.87283 92.908714 l
264.93768 99.640694 l
257.87283 106.37267 l
h
276.3688 99.640694 m
f
1.4173229 w
1 0 0 -1 -69.029892 333.39395 cm
345.39871 233.75325 m
326.90274 240.48523 l
333.96756 233.75325 l
326.90274 227.02127 l
h
345.39871 233.75325 m
S
2.8346457 w
222.22884 233.75325 m
272.38614 233.75325 l
S
CM
211.82375 99.640694 m
198.12303 94.654037 l
203.35623 99.640694 l
198.12303 104.62735 l
h
211.82375 99.640694 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
280.85364 233.75325 m
267.15292 238.73991 l
272.38614 233.75325 l
267.15292 228.7666 l
h
280.85364 233.75325 m
S
2.8346457 w
1 0.75294119 0 sc
281.65222 262.65723 m
284.75433 202.83041 l
S
CM
212.29755 64.472916 m
209.1342 74.799255 l
212.62234 70.736732 l
216.51193 74.41671 l
h
216.04921 136.82735 m
219.21255 126.50101 l
215.72443 130.56352 l
211.83484 126.88355 l
h
216.04921 136.82735 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
281.32745 268.92102 m
278.16409 258.5947 l
281.65222 262.65723 l
285.54181 258.97723 l
h
285.0791 196.5666 m
288.24246 206.89294 l
284.75433 202.83041 l
280.86472 206.51039 l
h
285.0791 196.5666 m
S
2.8346457 w
295.55759 260.54285 m
270.84897 204.94479 l
S
CM
229.07494 67.119408 m
221.57791 74.893372 l
226.52769 72.851105 l
228.32889 77.893608 l
h
199.27182 134.18086 m
206.76886 126.40689 l
201.81908 128.44916 l
200.01787 123.40665 l
h
199.27182 134.18086 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
298.10483 266.27454 m
290.60779 258.50058 l
295.55759 260.54285 l
297.3588 255.50034 l
h
268.30173 199.21309 m
275.79874 206.98706 l
270.84897 204.94479 l
269.04776 209.98729 l
h
268.30173 199.21309 m
S
2.8346457 w
308.52707 251.62779 m
257.87949 213.85985 l
S
CM
244.52533 78.016678 m
234.18149 81.122322 l
239.49719 81.766159 l
238.59776 87.044624 l
h
183.82144 123.28358 m
194.16527 120.17795 l
188.84958 119.5341 l
189.74901 114.25564 l
h
183.82144 123.28358 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
313.55521 255.37727 m
303.2114 252.27164 l
308.52707 251.62779 l
307.62766 246.34932 l
h
252.85133 210.11037 m
263.19516 213.216 l
257.87949 213.85985 l
258.7789 219.13831 l
h
252.85133 210.11037 m
S
2.8346457 w
298.61343 207.70845 m
267.79312 257.77917 l
S
CM
232.87138 131.02693 m
230.6972 120.44804 l
229.58354 125.6855 l
224.40588 124.32057 l
h
195.47537 70.273331 m
197.64957 80.852219 l
198.76323 75.614769 l
203.94089 76.979691 l
h
195.47537 70.273331 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
301.90128 202.36702 m
299.72708 212.94591 l
298.61343 207.70845 l
293.43579 209.07338 l
h
264.50528 263.12061 m
266.67944 252.54173 l
267.79312 257.77917 l
272.97076 256.41425 l
h
264.50528 263.12061 m
S
2.8346457 w
308.42291 219.66158 m
257.98364 245.82607 l
S
CM
244.96072 116.62053 m
237.65285 108.66848 l
239.39301 113.73238 l
234.2511 115.22631 l
h
183.38605 84.679733 m
190.69391 92.631783 l
188.95375 87.567886 l
194.09567 86.073952 l
h
183.38605 84.679733 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
313.9906 216.77342 m
306.68274 224.72546 l
308.42291 219.66158 l
303.28098 218.16763 l
h
252.41594 248.71422 m
259.72382 240.76216 l
257.98364 245.82607 l
263.12558 247.31999 l
h
252.41594 248.71422 m
S
0.0049057337 0.60884833 0.30135173 sc
CM
221.13028 100.65013 m
221.13078 101.56087 220.94971 102.47121 220.60072 103.31242 c
220.25266 104.15402 219.737 104.92577 219.09265 105.5694 c
218.44902 106.21375 217.67728 106.72941 216.83568 107.07747 c
215.99446 107.42645 215.08412 107.60754 214.17339 107.60703 c
213.26265 107.60754 212.35231 107.42645 211.51109 107.07747 c
210.66949 106.72941 209.89775 106.21375 209.25412 105.5694 c
208.60977 104.92577 208.0941 104.15402 207.74605 103.31242 c
207.39706 102.47121 207.21599 101.56087 207.21649 100.65013 c
207.21599 99.739395 207.39706 98.829056 207.74605 97.987839 c
208.0941 97.14624 208.60977 96.374496 209.25412 95.730865 c
209.89775 95.086517 210.66949 94.570854 211.51109 94.222794 c
212.35231 93.87381 213.26265 93.692734 214.17339 93.693237 c
215.08412 93.692734 215.99446 93.87381 216.83568 94.222794 c
217.67728 94.570854 218.44902 95.086517 219.09265 95.730865 c
219.737 96.374496 220.25266 97.14624 220.60072 97.987839 c
220.94971 98.829056 221.13078 99.739395 221.13028 100.65013 c
h
221.13028 100.65013 m
f
5.6692915 w
0 0 0 sc
1 0 0 -1 -69.029892 333.39395 cm
71.86454 233.75325 m
119.72256 233.75325 l
S
CM
62.123814 99.640694 m
43.627842 92.908714 l
50.692677 99.640694 l
43.627842 106.37267 l
h
62.123814 99.640694 m
f
1.4173229 w
1 0 0 -1 -69.029892 333.39395 cm
131.1537 233.75325 m
112.65774 240.48523 l
119.72256 233.75325 l
112.65774 227.02127 l
h
131.1537 233.75325 m
S
2.8346457 w
142.87885 233.75325 m
193.03613 233.75325 l
S
CM
132.47374 99.640694 m
118.77303 94.654037 l
124.00623 99.640694 l
118.77303 104.62735 l
h
132.47374 99.640694 m
f
0.70866144 w
1 0 0 -1 -69.029892 333.39395 cm
201.50363 233.75325 m
187.80292 238.73991 l
193.03613 233.75325 l
187.80292 228.7666 l
h
201.50363 233.75325 m
S
0.0049057337 0.60884833 0.30135173 sc
CM
74.794296 99.640694 m
74.7948 100.55143 74.613716 101.46177 74.264732 102.30299 c
73.916672 103.14458 73.401009 103.91633 72.756668 104.55996 c
72.113037 105.20431 71.341286 105.71997 70.499687 106.06803 c
69.65847 106.41702 68.748131 106.59809 67.837395 106.59759 c
66.926659 106.59809 66.016327 106.41702 65.17511 106.06803 c
64.333504 105.71997 63.561756 105.20431 62.918125 104.55996 c
62.273785 103.91633 61.758118 103.14458 61.410061 102.30299 c
61.061073 101.46177 60.879993 100.55143 60.880497 99.640694 c
60.879993 98.729958 61.061073 97.819618 61.410061 96.978401 c
61.758118 96.136803 62.273785 95.365059 62.918125 94.721428 c
63.561756 94.07708 64.333504 93.561417 65.17511 93.213356 c
66.016327 92.864372 66.926659 92.683296 67.837395 92.6838 c
68.748131 92.683296 69.65847 92.864372 70.499687 93.213356 c
71.341286 93.561417 72.113037 94.07708 72.756668 94.721428 c
73.401009 95.365059 73.916672 96.136803 74.264732 96.978401 c
74.613716 97.819618 74.7948 98.729958 74.794296 99.640694 c
h
74.794296 99.640694 m
f
1.4173229 w
1 0 0.35294119 sc
1 0 0 -1 -69.029892 333.39395 cm
143.17442 241.0224 m
130.56015 226.4841 l
S
130.56015 241.0224 m
143.17442 226.4841 l
S
0 0 0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
87.929077 326.33661 m
(!"#$%&'\(\)*+,\(-)[ 4.662000 7.826000 4.662000 4.662000 9.198000 8.204000 7.070000 8.204000 5.110000 8.204000 4.970000 3.584000 8.204000 0.000000 ] xS
243.25896 326.33661 m
(!&#$./,'',\(-)[ 4.662000 8.204000 4.662000 4.662000 8.918000 11.970000 3.584000 7.070000 7.070000 3.584000 8.204000 0.000000 ] xS
373.04236 326.33661 m
(!0#$12+3'0"++4\),-5)[ 4.662000 7.658000 4.662000 4.662000 10.738000 7.840000 4.970000 8.470000 7.070000 7.658000 7.826000 4.970000 4.970000 7.770000 5.110000 3.584000 7.826000 0.000000 ] xS
539.12756 326.33661 m
(!6#$7-3'0"++4\),-5)[ 4.662000 8.204000 4.662000 4.662000 3.318000 7.826000 8.470000 7.070000 7.658000 7.826000 4.970000 4.970000 7.770000 5.110000 3.584000 7.826000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
