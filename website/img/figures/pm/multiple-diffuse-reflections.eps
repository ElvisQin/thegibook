%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 253 138
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 253 138
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KIFOCO+Helvetica
%!FontType1-1.0: KIFOCO+Helvetica 1.0000.0.0000
14 dict begin/FontName /KIFOCO+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<

002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020
20457D691844B001602DB800322CB800312A2DB800332C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800342C4B535845441B2121592DB800352C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800362C2020456944B001602DB800372CB800362A212DB800382C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800392C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8003A2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8003B2C2020456944B001602020457D691844B001602DB8003C2CB8003B2A2DB8003D2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003E2C4B535845441B2121592DB8003F2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800402C2020456944B001602DB800412CB800402A212DB800422C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800432C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800442C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800452C2020456944B001602020457D691844B001602DB800462CB800452A2DB800472C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800482C4B535845441B2121592DB800492C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8004A2C2020456944B001602DB8004B2CB8004A2A212DB8004C2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8004D2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8004E2C4B20B0032650585158


00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/D 1 def
/u20B8 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9301CB16965794C1772CA14F06910BCAE9D9B0B498A8D671A1AA6B0D64BB9C7DEBEE74183589F577AB9C98B2D1930803BEE454A0BDBEC4232104A26BD072BC3C61D3D70D4A33227E6C91D838F5A1BE49F4EE4D8E8DDFDB4D86D7D9D888DBC35E1346BBE8FC7E704D0AB5CF528C55C1A751933DD9799376666C6FB1B65D7E5502DC9D808E93C83FE76561574A15142EA12D177FACC6DA70EC791C237EB741BDB72A8095310F6C9EF85A4472CA21AE982FA902EC97506FCA6A1F6152EA20DD0A7C53DB10DAB1C7B8BC077629CF7EA27C97FA8101DF8133730E37DD217017D57BC7D05003C0B2C5CB23597BED74E175857E21917FE8368C1CF4C3F664C2C230061882CA11B4FDC0EEAF56C65ED5DF4C31B29C87B26E8EA5D3780A69CD4B1FE23E1F970782EB921433891BDE3ED6408C81FE082502E3F3A0BC9AA5CB63E8183A1C33AD63DF12B6CACBE5F9F4E3931A9BA3DE910E368684AECCB2382ADCA6888EC32D9383B86EB9F0CA7924266B101AE6A670221A27EC4BE11B825BDF1712A7466C64B17CE016D47D5EAE97B309E6F16A66E612DDCC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KIFOCO+Helvetica cguidfix
/F1.1/KIFOCO+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.81568629 0.81568629 0.81568629 sc
q
0 0 252.105 137.66936 rc
10.059506 137.55615 m
15.810112 137.55615 l
15.810112 12.907323 l
10.059506 12.907323 l
h
10.059506 137.55615 m
f
9.8461304 15.472385 m
252.105 15.472385 l
252.105 9.4917154 l
9.8461304 9.4917154 l
h
9.8461304 15.472385 m
f
2 J
0 0 0 sc
1 0 0 -1 -13.044179 401.74481 cm
139.34454 286.34467 m
139.34494 285.61609 139.20009 284.88788 138.92091 284.21494 c
138.64249 283.54169 138.22998 282.92432 137.71452 282.40945 c
137.19965 281.89398 136.58229 281.48148 135.90904 281.20306 c
135.2361 280.92389 134.50787 280.77902 133.77931 280.77942 c
133.05077 280.77902 132.32254 280.92389 131.6496 281.20306 c
130.97635 281.48148 130.35899 281.89398 129.84412 282.40945 c
129.32866 282.92432 128.91615 283.54169 128.63773 284.21494 c
128.35855 284.88788 128.21368 285.61609 128.2141 286.34467 c
128.21368 287.07321 128.35855 287.80142 128.63773 288.47437 c
128.91615 289.14761 129.32866 289.76498 129.84412 290.27985 c
130.35899 290.79532 130.97635 291.20782 131.6496 291.48624 c
132.32254 291.76541 133.05077 291.91028 133.77931 291.90988 c
134.50787 291.91028 135.2361 291.76541 135.90904 291.48624 c
136.58229 291.20782 137.19965 290.79532 137.71452 290.27985 c
138.22998 289.76498 138.64249 289.14761 138.92091 288.47437 c
139.20009 287.80142 139.34494 287.07321 139.34454 286.34467 c
h
139.34454 286.34467 m
S
131.46727 270.5033 m
131.63596 277.93845 l
S
136.05168 278.12494 m
139.26472 273.93124 l
S
140.35625 282.46936 m
145.60548 279.64252 l
S
140.95163 287.65891 m
149.15195 290.61868 l
S
137.23051 294.1954 m
139.03055 299.95227 l
S
130.69725 294.38583 m
127.82754 300.34903 l
S
123.9298 291.0293 m
117.52751 291.0293 l
S
125.42221 282.98911 m
118.49599 280.36459 l
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
166.63811 379.19238 m
(!)s
30.922913 275.07544 m
(!)s
0.60000002 i
CM
215.84718 83.082718 m
215.99861 83.238747 216.11897 83.42482 216.20567 83.634636 c
216.29253 83.844376 216.34572 84.077728 216.36661 84.326233 c
216.3876 84.574722 216.37637 84.838234 216.33742 85.10791 c
216.29852 85.377632 216.23203 85.653427 216.14421 85.927589 c
216.05641 86.20182 215.94739 86.47438 215.82382 86.739532 c
215.70023 87.004768 215.56215 87.262604 215.41562 87.509468 c
215.26906 87.756393 215.11406 87.992371 214.95551 88.215683 c
214.79691 88.439041 214.63477 88.649765 214.47266 88.847496 c
214.3105 89.045265 214.14838 89.230072 213.98872 89.402466 c
213.82903 89.574875 213.67178 89.734886 213.51849 89.883537 c
213.3652 90.032173 213.20042 90.184418 213.02319 90.338737 c
212.84596 90.493011 212.65627 90.649376 212.4536 90.805367 c
212.25098 90.961319 212.03535 91.116905 211.80722 91.268555 c
211.57915 91.420158 211.33852 91.567825 211.08719 91.706734 c
210.83594 91.845596 210.57397 91.975677 210.30507 92.091049 c
210.03624 92.206398 209.76045 92.306984 209.48364 92.386314 c
209.20691 92.465652 208.9292 92.523636 208.65842 92.554207 c
208.38766 92.584846 208.12393 92.587967 207.87621 92.559334 c
207.62846 92.530815 207.39687 92.470467 207.1899 92.377205 c
206.98283 92.284096 206.80055 92.158058 206.64926 92.001907 c
206.49783 91.845886 206.37747 91.659813 206.29077 91.449989 c
206.20393 91.240257 206.15073 91.006897 206.12985 90.758392 c
206.10886 90.509903 206.12009 90.246399 206.15904 89.976715 c
206.19792 89.707001 206.26442 89.431198 206.35223 89.157043 c
206.44003 88.882812 206.54906 88.610252 206.67264 88.345093 c
206.79622 88.079865 206.9343 87.822021 207.08083 87.575165 c
207.2274 87.328239 207.3824 87.092255 207.54094 86.86895 c
207.69954 86.645592 207.86169 86.434868 208.0238 86.237137 c
208.18594 86.039368 208.34807 85.854553 208.50774 85.682167 c
208.66742 85.509758 208.82468 85.349739 208.97795 85.201096 c
209.13124 85.05246 209.29602 84.900208 209.47327 84.745895 c
209.65048 84.591614 209.84019 84.435257 210.04286 84.279266 c
210.24548 84.123314 210.46109 83.96772 210.68922 83.816071 c
210.9173 83.664467 211.15794 83.516808 211.40926 83.377899 c
211.66051 83.239037 211.92247 83.108955 212.19139 82.993584 c
212.46022 82.878227 212.73599 82.777641 213.0128 82.698318 c
213.28954 82.61898 213.56725 82.560997 213.83803 82.530426 c
214.10878 82.499786 214.37251 82.496666 214.62024 82.525299 c
214.86798 82.553818 215.09959 82.614166 215.30656 82.70742 c
215.51361 82.800537 215.69589 82.926567 215.84718 83.082718 c
f
0.59650761 0 0 -0.59650761 83.013916 271.84189 cm
222.68494 316.44046 m
222.9388 316.17892 223.14058 315.86697 223.28592 315.51523 c
223.4315 315.1636 223.52069 314.7724 223.55569 314.3558 c
223.5909 313.93924 223.57208 313.4975 223.50677 313.04538 c
223.44157 312.59323 223.33009 312.13089 223.18288 311.67126 c
223.03569 311.21155 222.85292 310.75461 222.64577 310.31009 c
222.43858 309.86545 222.20709 309.4332 221.96146 309.01938 c
221.71574 308.60541 221.4559 308.20981 221.19011 307.83545 c
220.92424 307.461 220.6524 307.10776 220.38065 306.77628 c
220.10881 306.44473 219.83702 306.13489 219.56935 305.84589 c
219.30165 305.55685 219.03804 305.2886 218.78107 305.03943 c
218.52408 304.79025 218.24785 304.535 217.95073 304.27631 c
217.65363 304.01767 217.33559 303.75555 216.99585 303.49405 c
216.65616 303.2326 216.29469 302.97177 215.91225 302.71753 c
215.52989 302.46338 215.12648 302.21582 214.70517 301.98297 c
214.28397 301.75018 213.8448 301.5321 213.394 301.33868 c
212.94331 301.14532 212.48099 300.97668 212.01695 300.84372 c
211.55302 300.71069 211.08746 300.61349 210.63351 300.56226 c
210.17963 300.51086 209.7375 300.50565 209.3222 300.55365 c
208.90688 300.60144 208.5186 300.70264 208.17165 300.85898 c
207.82454 301.01508 207.51895 301.22635 207.26532 301.48813 c
207.01147 301.74969 206.80968 302.06165 206.66434 302.41336 c
206.51875 302.76498 206.42957 303.15619 206.39456 303.57278 c
206.35936 303.98935 206.37819 304.43112 206.44348 304.88321 c
206.50868 305.33536 206.62016 305.79773 206.76738 306.25732 c
206.91457 306.71707 207.09734 307.17398 207.30449 307.6185 c
207.51169 308.06314 207.74316 308.49539 207.9888 308.90924 c
208.23451 309.32318 208.49435 309.71878 208.76015 310.09314 c
209.02603 310.46759 209.29785 310.82086 209.56963 311.15234 c
209.84146 311.48389 210.11325 311.7937 210.38091 312.0827 c
210.64862 312.37173 210.91222 312.63998 211.16919 312.88919 c
211.42618 313.13837 211.70241 313.39359 211.99954 313.65228 c
212.29663 313.91092 212.61467 314.17307 212.95442 314.43457 c
213.29411 314.69598 213.65556 314.95685 214.03801 315.21106 c
214.42036 315.46521 214.82378 315.71277 215.2451 315.94562 c
215.66629 316.17844 216.10545 316.39648 216.55626 316.5899 c
217.00694 316.78329 217.46927 316.9519 217.9333 317.0849 c
218.39723 317.2179 218.86279 317.31509 219.31674 317.36636 c
219.77065 317.41772 220.21275 317.42294 220.62805 317.37494 c
221.04338 317.32715 221.43166 317.22598 221.77863 317.06964 c
222.12573 316.91354 222.4313 316.70224 222.68494 316.44046 c
S
203.15251 302.30536 m
238.06671 285.44531 l
220.92384 321.94644 l
S
0.3764706 0.3764706 0.3764706 sc
CM
130.47299 14.928084 m
206.33177 82.611275 l
f
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.51717 386.81671 m
219.37595 319.13354 l
S
0 0 0 sc
0.68132001 0.73198569 0.73198569 -0.68132001 -242.65157 203.00706 cm
117.07452 401.06885 m
54.647041 305.21643 163.57872 293.45477 118.28366 401.38199 c
118.28366 401.38199 118.28366 401.38199 118.28366 401.38199 c
S
1 0 0 -1 -13.044179 401.74481 cm
43.151123 296.6153 m
43.152191 294.67737 42.76688 292.74026 42.024273 290.95026 c
41.283646 289.15942 40.186371 287.51724 38.815285 286.14767 c
37.445713 284.77658 35.803524 283.67929 34.012691 282.93866 c
32.222679 282.19608 30.285589 281.81076 28.347651 281.81183 c
26.40971 281.81076 24.47262 282.19608 22.682608 282.93866 c
20.891775 283.67929 19.249588 284.77658 17.880014 286.14767 c
16.508928 287.51724 15.411654 289.15942 14.671026 290.95026 c
13.928419 292.74026 13.543108 294.67737 13.544179 296.6153 c
13.543108 298.55322 13.928419 300.49033 14.671026 302.28033 c
15.411654 304.07117 16.508928 305.71335 17.880014 307.08292 c
19.249588 308.45401 20.891775 309.5513 22.682608 310.29193 c
24.47262 311.03452 26.40971 311.41983 28.347651 311.41876 c
30.285589 311.41983 32.222679 311.03452 34.012691 310.29193 c
35.803524 309.5513 37.445713 308.45401 38.815285 307.08292 c
40.186371 305.71335 41.283646 304.07117 42.024273 302.28033 c
42.76688 300.49033 43.152191 298.55322 43.151123 296.6153 c
h
43.151123 296.6153 m
S
0.3764706 0.3764706 0.3764706 sc
CM
130.23927 15.73832 m
17.916216 106.18284 l
f
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.28345 386.0065 m
30.960394 295.56198 l
S
0 0 0 sc
CM
18.749037 116.27075 m
18.749125 116.42957 18.717546 116.58832 18.656687 116.73502 c
18.595989 116.88178 18.506063 117.01637 18.393698 117.12861 c
18.281458 117.24097 18.146873 117.3309 18.000109 117.39159 c
17.853411 117.45245 17.69466 117.48403 17.535839 117.48395 c
17.377018 117.48403 17.218266 117.45245 17.071568 117.39159 c
16.924803 117.3309 16.79022 117.24097 16.677979 117.12861 c
16.565613 117.01637 16.475687 116.88178 16.414989 116.73502 c
16.354132 116.58832 16.322554 116.42957 16.322641 116.27075 c
16.322554 116.11193 16.354132 115.95318 16.414989 115.80648 c
16.475687 115.65971 16.565613 115.52513 16.677979 115.41289 c
16.79022 115.30052 16.924803 115.21059 17.071568 115.1499 c
17.218266 115.08904 17.377018 115.05746 17.535839 115.05755 c
17.69466 115.05746 17.853411 115.08904 18.000109 115.1499 c
18.146873 115.21059 18.281458 115.30052 18.393698 115.41289 c
18.506063 115.52513 18.595989 115.65971 18.656687 115.80648 c
18.717546 115.95318 18.749125 116.11193 18.749037 116.27075 c
h
18.749037 116.27075 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 285.47406 m
31.793303 285.31525 31.761724 285.15649 31.700865 285.0098 c
31.640169 284.86304 31.550243 284.72845 31.437878 284.61621 c
31.325636 284.50385 31.191053 284.41391 31.044289 284.35321 c
30.897591 284.29236 30.738838 284.26077 30.580017 284.26086 c
30.421196 284.26077 30.262445 284.29236 30.115747 284.35321 c
29.968983 284.41391 29.834398 284.50385 29.722157 284.61621 c
29.609793 284.72845 29.519867 284.86304 29.459169 285.0098 c
29.39831 285.15649 29.366732 285.31525 29.366819 285.47406 c
29.366732 285.63287 29.39831 285.79163 29.459169 285.93832 c
29.519867 286.08508 29.609793 286.21967 29.722157 286.33191 c
29.834398 286.44427 29.968983 286.53421 30.115747 286.59491 c
30.262445 286.65576 30.421196 286.68735 30.580017 286.68726 c
30.738838 286.68735 30.897591 286.65576 31.044289 286.59491 c
31.191053 286.53421 31.325636 286.44427 31.437878 286.33191 c
31.550243 286.21967 31.640169 286.08508 31.700865 285.93832 c
31.761724 285.79163 31.793303 285.63287 31.793215 285.47406 c
h
31.793215 285.47406 m
S
CM
18.749037 111.8725 m
18.749125 112.03132 18.717546 112.19007 18.656687 112.33677 c
18.595989 112.48354 18.506063 112.61812 18.393698 112.73036 c
18.281458 112.84272 18.146873 112.93265 18.000109 112.99335 c
17.853411 113.05421 17.69466 113.08578 17.535839 113.08569 c
17.377018 113.08578 17.218266 113.05421 17.071568 112.99335 c
16.924803 112.93265 16.79022 112.84272 16.677979 112.73036 c
16.565613 112.61812 16.475687 112.48354 16.414989 112.33677 c
16.354132 112.19007 16.322554 112.03132 16.322641 111.8725 c
16.322554 111.71368 16.354132 111.55492 16.414989 111.40823 c
16.475687 111.26146 16.565613 111.12688 16.677979 111.01464 c
16.79022 110.90228 16.924803 110.81235 17.071568 110.75165 c
17.218266 110.69079 17.377018 110.65921 17.535839 110.6593 c
17.69466 110.65921 17.853411 110.69079 18.000109 110.75165 c
18.146873 110.81235 18.281458 110.90228 18.393698 111.01464 c
18.506063 111.12688 18.595989 111.26146 18.656687 111.40823 c
18.717546 111.55492 18.749125 111.71368 18.749037 111.8725 c
h
18.749037 111.8725 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 289.87231 m
31.793303 289.7135 31.761724 289.55475 31.700865 289.40805 c
31.640169 289.26126 31.550243 289.12668 31.437878 289.01443 c
31.325636 288.90207 31.191053 288.81216 31.044289 288.75146 c
30.897591 288.69061 30.738838 288.65903 30.580017 288.65912 c
30.421196 288.65903 30.262445 288.69061 30.115747 288.75146 c
29.968983 288.81216 29.834398 288.90207 29.722157 289.01443 c
29.609793 289.12668 29.519867 289.26126 29.459169 289.40805 c
29.39831 289.55475 29.366732 289.7135 29.366819 289.87231 c
29.366732 290.03113 29.39831 290.18988 29.459169 290.33658 c
29.519867 290.48334 29.609793 290.61792 29.722157 290.73016 c
29.834398 290.84253 29.968983 290.93246 30.115747 290.99316 c
30.262445 291.05402 30.421196 291.0856 30.580017 291.08551 c
30.738838 291.0856 30.897591 291.05402 31.044289 290.99316 c
31.191053 290.93246 31.325636 290.84253 31.437878 290.73016 c
31.550243 290.61792 31.640169 290.48334 31.700865 290.33658 c
31.761724 290.18988 31.793303 290.03113 31.793215 289.87231 c
h
31.793215 289.87231 m
S
CM
18.749037 107.47425 m
18.749125 107.63307 18.717546 107.79182 18.656687 107.93852 c
18.595989 108.08528 18.506063 108.21986 18.393698 108.33211 c
18.281458 108.44447 18.146873 108.5344 18.000109 108.59509 c
17.853411 108.65595 17.69466 108.68753 17.535839 108.68745 c
17.377018 108.68753 17.218266 108.65595 17.071568 108.59509 c
16.924803 108.5344 16.79022 108.44447 16.677979 108.33211 c
16.565613 108.21986 16.475687 108.08528 16.414989 107.93852 c
16.354132 107.79182 16.322554 107.63307 16.322641 107.47425 c
16.322554 107.31543 16.354132 107.15668 16.414989 107.00998 c
16.475687 106.86321 16.565613 106.72863 16.677979 106.61639 c
16.79022 106.50402 16.924803 106.4141 17.071568 106.3534 c
17.218266 106.29254 17.377018 106.26096 17.535839 106.26105 c
17.69466 106.26096 17.853411 106.29254 18.000109 106.3534 c
18.146873 106.4141 18.281458 106.50402 18.393698 106.61639 c
18.506063 106.72863 18.595989 106.86321 18.656687 107.00998 c
18.717546 107.15668 18.749125 107.31543 18.749037 107.47425 c
h
18.749037 107.47425 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 294.27057 m
31.793303 294.11172 31.761724 293.95297 31.700865 293.80627 c
31.640169 293.65952 31.550243 293.52493 31.437878 293.41269 c
31.325636 293.30032 31.191053 293.21042 31.044289 293.14972 c
30.897591 293.08884 30.738838 293.05728 30.580017 293.05737 c
30.421196 293.05728 30.262445 293.08884 30.115747 293.14972 c
29.968983 293.21042 29.834398 293.30032 29.722157 293.41269 c
29.609793 293.52493 29.519867 293.65952 29.459169 293.80627 c
29.39831 293.95297 29.366732 294.11172 29.366819 294.27057 c
29.366732 294.42938 29.39831 294.58813 29.459169 294.73483 c
29.519867 294.88159 29.609793 295.01617 29.722157 295.12842 c
29.834398 295.24078 29.968983 295.33072 30.115747 295.39142 c
30.262445 295.45227 30.421196 295.48386 30.580017 295.48376 c
30.738838 295.48386 30.897591 295.45227 31.044289 295.39142 c
31.191053 295.33072 31.325636 295.24078 31.437878 295.12842 c
31.550243 295.01617 31.640169 294.88159 31.700865 294.73483 c
31.761724 294.58813 31.793303 294.42938 31.793215 294.27057 c
h
31.793215 294.27057 m
S
CM
18.749037 103.076 m
18.749125 103.23482 18.717546 103.39357 18.656687 103.54027 c
18.595989 103.68703 18.506063 103.82162 18.393698 103.93386 c
18.281458 104.04623 18.146873 104.13615 18.000109 104.19685 c
17.853411 104.25771 17.69466 104.28928 17.535839 104.28919 c
17.377018 104.28928 17.218266 104.25771 17.071568 104.19685 c
16.924803 104.13615 16.79022 104.04623 16.677979 103.93386 c
16.565613 103.82162 16.475687 103.68703 16.414989 103.54027 c
16.354132 103.39357 16.322554 103.23482 16.322641 103.076 c
16.322554 102.91718 16.354132 102.75842 16.414989 102.61172 c
16.475687 102.46497 16.565613 102.33038 16.677979 102.21814 c
16.79022 102.10577 16.924803 102.01585 17.071568 101.95515 c
17.218266 101.89429 17.377018 101.86271 17.535839 101.8628 c
17.69466 101.86271 17.853411 101.89429 18.000109 101.95515 c
18.146873 102.01585 18.281458 102.10577 18.393698 102.21814 c
18.506063 102.33038 18.595989 102.46497 18.656687 102.61172 c
18.717546 102.75842 18.749125 102.91718 18.749037 103.076 c
h
18.749037 103.076 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 298.66882 m
31.793303 298.50998 31.761724 298.35123 31.700865 298.20453 c
31.640169 298.05777 31.550243 297.92319 31.437878 297.81094 c
31.325636 297.69858 31.191053 297.60867 31.044289 297.54797 c
30.897591 297.48709 30.738838 297.45554 30.580017 297.4556 c
30.421196 297.45554 30.262445 297.48709 30.115747 297.54797 c
29.968983 297.60867 29.834398 297.69858 29.722157 297.81094 c
29.609793 297.92319 29.519867 298.05777 29.459169 298.20453 c
29.39831 298.35123 29.366732 298.50998 29.366819 298.66882 c
29.366732 298.82764 29.39831 298.98639 29.459169 299.13309 c
29.519867 299.27985 29.609793 299.41443 29.722157 299.52667 c
29.834398 299.63904 29.968983 299.72897 30.115747 299.78964 c
30.262445 299.85052 30.421196 299.88208 30.580017 299.88202 c
30.738838 299.88208 30.897591 299.85052 31.044289 299.78964 c
31.191053 299.72897 31.325636 299.63904 31.437878 299.52667 c
31.550243 299.41443 31.640169 299.27985 31.700865 299.13309 c
31.761724 298.98639 31.793303 298.82764 31.793215 298.66882 c
h
31.793215 298.66882 m
S
CM
18.749037 98.67775 m
18.749125 98.836571 18.717546 98.995323 18.656687 99.142021 c
18.595989 99.28878 18.506063 99.42337 18.393698 99.535606 c
18.281458 99.647972 18.146873 99.7379 18.000109 99.798599 c
17.853411 99.859459 17.69466 99.891029 17.535839 99.890945 c
17.377018 99.891029 17.218266 99.859459 17.071568 99.798599 c
16.924803 99.7379 16.79022 99.647972 16.677979 99.535606 c
16.565613 99.42337 16.475687 99.28878 16.414989 99.142021 c
16.354132 98.995323 16.322554 98.836571 16.322641 98.67775 c
16.322554 98.518929 16.354132 98.360176 16.414989 98.213478 c
16.475687 98.066711 16.565613 97.932129 16.677979 97.819885 c
16.79022 97.70752 16.924803 97.617599 17.071568 97.5569 c
17.218266 97.49604 17.377018 97.464462 17.535839 97.464554 c
17.69466 97.464462 17.853411 97.49604 18.000109 97.5569 c
18.146873 97.617599 18.281458 97.70752 18.393698 97.819885 c
18.506063 97.932129 18.595989 98.066711 18.656687 98.213478 c
18.717546 98.360176 18.749125 98.518929 18.749037 98.67775 c
h
18.749037 98.67775 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 303.06705 m
31.793303 302.90823 31.761724 302.74948 31.700865 302.60278 c
31.640169 302.45602 31.550243 302.32144 31.437878 302.2092 c
31.325636 302.09683 31.191053 302.0069 31.044289 301.9462 c
30.897591 301.88535 30.738838 301.85376 30.580017 301.85385 c
30.421196 301.85376 30.262445 301.88535 30.115747 301.9462 c
29.968983 302.0069 29.834398 302.09683 29.722157 302.2092 c
29.609793 302.32144 29.519867 302.45602 29.459169 302.60278 c
29.39831 302.74948 29.366732 302.90823 29.366819 303.06705 c
29.366732 303.22589 29.39831 303.38464 29.459169 303.53134 c
29.519867 303.6781 29.609793 303.81268 29.722157 303.92493 c
29.834398 304.03729 29.968983 304.1272 30.115747 304.1879 c
30.262445 304.24878 30.421196 304.28033 30.580017 304.28024 c
30.738838 304.28033 30.897591 304.24878 31.044289 304.1879 c
31.191053 304.1272 31.325636 304.03729 31.437878 303.92493 c
31.550243 303.81268 31.640169 303.6781 31.700865 303.53134 c
31.761724 303.38464 31.793303 303.22589 31.793215 303.06705 c
h
31.793215 303.06705 m
S
CM
18.749037 94.279495 m
18.749125 94.438316 18.717546 94.597069 18.656687 94.743767 c
18.595989 94.890533 18.506063 95.025116 18.393698 95.13736 c
18.281458 95.249725 18.146873 95.339645 18.000109 95.400345 c
17.853411 95.461205 17.69466 95.492783 17.535839 95.492699 c
17.377018 95.492783 17.218266 95.461205 17.071568 95.400345 c
16.924803 95.339645 16.79022 95.249725 16.677979 95.13736 c
16.565613 95.025116 16.475687 94.890533 16.414989 94.743767 c
16.354132 94.597069 16.322554 94.438316 16.322641 94.279495 c
16.322554 94.120674 16.354132 93.961922 16.414989 93.815224 c
16.475687 93.668465 16.565613 93.533882 16.677979 93.421638 c
16.79022 93.309273 16.924803 93.219345 17.071568 93.158653 c
17.218266 93.097794 17.377018 93.066216 17.535839 93.066299 c
17.69466 93.066216 17.853411 93.097794 18.000109 93.158653 c
18.146873 93.219345 18.281458 93.309273 18.393698 93.421638 c
18.506063 93.533882 18.595989 93.668465 18.656687 93.815224 c
18.717546 93.961922 18.749125 94.120674 18.749037 94.279495 c
h
18.749037 94.279495 m
f
1 0 0 -1 -13.044179 401.74481 cm
31.793215 307.4653 m
31.793303 307.30649 31.761724 307.14774 31.700865 307.00104 c
31.640169 306.85428 31.550243 306.7197 31.437878 306.60745 c
31.325636 306.49509 31.191053 306.40515 31.044289 306.34445 c
30.897591 306.2836 30.738838 306.25201 30.580017 306.25211 c
30.421196 306.25201 30.262445 306.2836 30.115747 306.34445 c
29.968983 306.40515 29.834398 306.49509 29.722157 306.60745 c
29.609793 306.7197 29.519867 306.85428 29.459169 307.00104 c
29.39831 307.14774 29.366732 307.30649 29.366819 307.4653 c
29.366732 307.62415 29.39831 307.78287 29.459169 307.92957 c
29.519867 308.07635 29.609793 308.21094 29.722157 308.32318 c
29.834398 308.43555 29.968983 308.52545 30.115747 308.58615 c
30.262445 308.647 30.421196 308.67859 30.580017 308.6785 c
30.738838 308.67859 30.897591 308.647 31.044289 308.58615 c
31.191053 308.52545 31.325636 308.43555 31.437878 308.32318 c
31.550243 308.21094 31.640169 308.07635 31.700865 307.92957 c
31.761724 307.78287 31.793303 307.62415 31.793215 307.4653 c
h
31.793215 307.4653 m
S
0.3764706 0.3764706 0.3764706 sc
CM
130.70917 15.954889 m
82.629372 61.047112 l
f
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.75334 385.78992 m
95.673546 340.69769 l
S
CM
77.146034 66.18972 m
84.501129 63.042881 l
80.757614 59.051342 l
h
77.146034 66.18972 m
f
0.25 w
1 0 0 -1 -13.044179 401.74481 cm
90.190216 335.55508 m
97.545311 338.70193 l
93.801788 342.69345 l
h
90.190216 335.55508 m
S
0.3764706 0.3764706 0.3764706 sc
CM
130.55054 16.051708 m
92.670364 60.002163 l
f
1 w
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.59471 385.69308 m
105.71454 341.74265 l
S
CM
87.762466 65.696548 m
94.74295 61.78849 l
90.597778 58.215836 l
h
87.762466 65.696548 m
f
0.25 w
1 0 0 -1 -13.044179 401.74481 cm
100.80665 336.04825 m
107.78712 339.95633 l
103.64195 343.52896 l
h
100.80665 336.04825 m
S
0.3764706 0.3764706 0.3764706 sc
CM
130.61855 16.150278 m
75.91478 52.18367 l
f
1 w
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.66272 385.59454 m
88.958961 349.56113 l
S
CM
69.636826 56.318962 m
77.419907 54.468658 l
74.40966 49.898678 l
h
69.636826 56.318962 m
f
0.25 w
1 0 0 -1 -13.044179 401.74481 cm
82.681 345.42584 m
90.464081 347.27615 l
87.453835 351.84613 l
h
82.681 345.42584 m
S
0.3764706 0.3764706 0.3764706 sc
CM
130.52357 15.754653 m
80.66452 39.852074 l
f
1 w
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -13.044179 401.74481 cm
143.56776 385.99014 m
93.708694 361.89273 l
S
CM
73.896049 43.123348 m
81.855164 42.315598 l
79.473869 37.388554 l
h
73.896049 43.123348 m
f
0.25 w
1 0 0 -1 -13.044179 401.74481 cm
86.940224 358.62146 m
94.899345 359.4292 l
92.518051 364.35626 l
h
86.940224 358.62146 m
S
2.8346457 w
0 0 0 sc
197.20355 309.46393 m
223.46896 341.27466 l
S
ep
end
%%Trailer
%%EOF
