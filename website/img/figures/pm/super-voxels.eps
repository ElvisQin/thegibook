%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 306 219
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 306 219
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AOXJAS+ArialMT
%!FontType1-1.0: AOXJAS+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /AOXJAS+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /sigma put
dup 34 /m put
dup 35 /a put
dup 36 /x put
dup 37 /parenleft put
dup 38 /s put
dup 39 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<










2B752B2B2B2B2B2B2B435C58B9008002BBB301401E017400735903B01E4B5402B0124B545AB012435C5A58BA009F02220001007359002B7473012B01732B2B2B2B2B2B2B2B737373732B2B2B2B2B002B2B2B2B2B2B004569447345694473456944737475456944734569444569444569447374456944456944732B2B2B2B2B732B002B732B74752B2B2B2B2B2B2B2B2B2B2B2B2B2B737475732B7374757374752B2B2B742B2B0000
00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/a 3 def
/i 4 def
/m 5 def
/s 6 def
/x 7 def
/acute 8 def
/sigma 9 def
/glyph3380 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1361 -665 4096 2060}def
/UniqueID 4167158 def
currentdict currentfile eexec


FA14BE69A4698E3F7E8ADB1EDFA8614E7BDF48E4A7FF4408D8216A2203AEF844CFF0EFECD32F6FFCB1ACB0C27D4A1E71D57F93C15391274CD82DF1C5686E83245133E99F19E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/AOXJAS+ArialMT cguidfix
/F1.1/AOXJAS+ArialMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1.4173229 w
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 305.58044 218.13646 rc
1 0 0 -1 -108.55846 485.92249 cm
360.04065 271.65543 m
413.43024 271.65543 l
413.43024 325.04501 l
360.04065 325.04501 l
h
360.04065 271.65543 m
S
1.4173229 w
306.65103 271.65543 m
360.04065 271.65543 l
360.04065 325.04501 l
306.65103 325.04501 l
h
306.65103 271.65543 m
S
253.26144 271.65543 m
306.65103 271.65543 l
306.65103 325.04501 l
253.26144 325.04501 l
h
253.26144 271.65543 m
S
199.87184 271.65543 m
253.26144 271.65543 l
253.26144 325.04501 l
199.87184 325.04501 l
h
199.87184 271.65543 m
S
360.04065 325.04501 m
413.43024 325.04501 l
413.43024 378.43463 l
360.04065 378.43463 l
h
360.04065 325.04501 m
S
306.65103 325.04501 m
360.04065 325.04501 l
360.04065 378.43463 l
306.65103 378.43463 l
h
306.65103 325.04501 m
S
253.26144 325.04501 m
306.65103 325.04501 l
306.65103 378.43463 l
253.26144 378.43463 l
h
253.26144 325.04501 m
S
199.87184 325.04501 m
253.26144 325.04501 l
253.26144 378.43463 l
199.87184 378.43463 l
h
199.87184 325.04501 m
S
360.04065 378.43463 m
413.43024 378.43463 l
413.43024 431.82422 l
360.04065 431.82422 l
h
360.04065 378.43463 m
S
306.65103 378.43463 m
360.04065 378.43463 l
360.04065 431.82422 l
306.65103 431.82422 l
h
306.65103 378.43463 m
S
253.26144 378.43463 m
306.65103 378.43463 l
306.65103 431.82422 l
253.26144 431.82422 l
h
253.26144 378.43463 m
S
199.87184 378.43463 m
253.26144 378.43463 l
253.26144 431.82422 l
199.87184 431.82422 l
h
199.87184 378.43463 m
S
360.04065 431.82422 m
413.43024 431.82422 l
413.43024 485.21384 l
360.04065 485.21384 l
h
360.04065 431.82422 m
S
306.65103 431.82422 m
360.04065 431.82422 l
360.04065 485.21384 l
306.65103 485.21384 l
h
306.65103 431.82422 m
S
253.26144 431.82422 m
306.65103 431.82422 l
306.65103 485.21384 l
253.26144 485.21384 l
h
253.26144 431.82422 m
S
199.87184 431.82422 m
253.26144 431.82422 l
253.26144 485.21384 l
199.87184 485.21384 l
h
199.87184 431.82422 m
S
0.89411765 0 1 sc
CM
150.28143 161.48239 m
150.28185 162.22443 150.13431 162.96614 149.84998 163.65152 c
149.56639 164.33723 149.14624 164.96602 148.62126 165.49043 c
148.09685 166.01541 147.46806 166.43556 146.78235 166.71915 c
146.09697 167.00348 145.35526 167.15102 144.61322 167.1506 c
143.87119 167.15102 143.12949 167.00348 142.44409 166.71915 c
141.75839 166.43556 141.12959 166.01541 140.60519 165.49043 c
140.0802 164.96602 139.66006 164.33723 139.37648 163.65152 c
139.09213 162.96614 138.9446 162.22443 138.94501 161.48239 c
138.9446 160.74036 139.09213 159.99866 139.37648 159.31326 c
139.66006 158.62756 140.0802 157.99876 140.60519 157.47437 c
141.12959 156.94937 141.75839 156.52924 142.44409 156.24565 c
143.12949 155.9613 143.87119 155.81377 144.61322 155.81418 c
145.35526 155.81377 146.09697 155.9613 146.78235 156.24565 c
147.46806 156.52924 148.09685 156.94937 148.62126 157.47437 c
149.14624 157.99876 149.56639 158.62756 149.84998 159.31326 c
150.13431 159.99866 150.28185 160.74036 150.28143 161.48239 c
h
150.28143 161.48239 m
f
149.90958 106.58802 m
149.90999 107.33006 149.76245 108.07176 149.4781 108.75715 c
149.19452 109.44286 148.77438 110.07165 148.24939 110.59605 c
147.72499 111.12104 147.09621 111.54118 146.41049 111.82477 c
145.7251 112.10911 144.9834 112.25665 144.24136 112.25623 c
143.49933 112.25665 142.75763 112.10911 142.07224 111.82477 c
141.38652 111.54118 140.75774 111.12104 140.23334 110.59605 c
139.70834 110.07165 139.28819 109.44286 139.00461 108.75715 c
138.72028 108.07176 138.57274 107.33006 138.57315 106.58802 c
138.57274 105.84599 138.72028 105.10428 139.00461 104.41889 c
139.28819 103.73318 139.70834 103.10439 140.23334 102.57999 c
140.75774 102.055 141.38652 101.63486 142.07224 101.35127 c
142.75763 101.06693 143.49933 100.9194 144.24136 100.91981 c
144.9834 100.9194 145.7251 101.06693 146.41049 101.35127 c
147.09621 101.63486 147.72499 102.055 148.24939 102.57999 c
148.77438 103.10439 149.19452 103.73318 149.4781 104.41889 c
149.76245 105.10428 149.90999 105.84599 149.90958 106.58802 c
h
149.90958 106.58802 m
f
203.75581 106.68097 m
203.75623 107.423 203.60869 108.1647 203.32434 108.8501 c
203.04076 109.5358 202.62062 110.16459 202.09563 110.689 c
201.57123 111.21398 200.94243 111.63412 200.25673 111.91771 c
199.57133 112.20206 198.82964 112.34959 198.0876 112.34918 c
197.34557 112.34959 196.60385 112.20206 195.91847 111.91771 c
195.23276 111.63412 194.60397 111.21398 194.07956 110.689 c
193.55458 110.16459 193.13443 109.5358 192.85085 108.8501 c
192.56651 108.1647 192.41898 107.423 192.41939 106.68097 c
192.41898 105.93893 192.56651 105.19723 192.85085 104.51183 c
193.13443 103.82613 193.55458 103.19734 194.07956 102.67294 c
194.60397 102.14795 195.23276 101.72781 195.91847 101.44422 c
196.60385 101.15987 197.34557 101.01234 198.0876 101.01275 c
198.82964 101.01234 199.57133 101.15987 200.25673 101.44422 c
200.94243 101.72781 201.57123 102.14795 202.09563 102.67294 c
202.62062 103.19734 203.04076 103.82613 203.32434 104.51183 c
203.60869 105.19723 203.75623 105.93893 203.75581 106.68097 c
h
203.75581 106.68097 m
f
203.29874 161.48239 m
203.29913 162.22443 203.15161 162.96614 202.86726 163.65152 c
202.58368 164.33723 202.16353 164.96602 201.63855 165.49043 c
201.11414 166.01541 200.48535 166.43556 199.79965 166.71915 c
199.11426 167.00348 198.37254 167.15102 197.63052 167.1506 c
196.88849 167.15102 196.14677 167.00348 195.46138 166.71915 c
194.77568 166.43556 194.1469 166.01541 193.62248 165.49043 c
193.0975 164.96602 192.67735 164.33723 192.39377 163.65152 c
192.10942 162.96614 191.9619 162.22443 191.9623 161.48239 c
191.9619 160.74036 192.10942 159.99866 192.39377 159.31326 c
192.67735 158.62756 193.0975 157.99876 193.62248 157.47437 c
194.1469 156.94937 194.77568 156.52924 195.46138 156.24565 c
196.14677 155.9613 196.88849 155.81377 197.63052 155.81418 c
198.37254 155.81377 199.11426 155.9613 199.79965 156.24565 c
200.48535 156.52924 201.11414 156.94937 201.63855 157.47437 c
202.16353 157.99876 202.58368 158.62756 202.86726 159.31326 c
203.15161 159.99866 203.29913 160.74036 203.29874 161.48239 c
h
203.29874 161.48239 m
f
0.15055998 0.15055998 0.15055998 sc
0 i
1 0 0 -1 -108.55846 485.92249 cm
/F1.1[ 18 0 0 -18 0 0]sf
115.88092 283.78604 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
126.9903 289.78604 m
("#$)[ 13.328125 8.898438 0.000000 ] xS
1 w
0.60000002 i
0 0 0 sc
161.17877 290.97995 m
236.50821 318.44308 l
S
CM
135.01256 164.90448 m
127.01256 164.90875 l
128.88695 170.05005 l
h
135.01256 164.90448 m
f
0.25 w
1 0 0 -1 -108.55846 485.92249 cm
243.57101 321.01801 m
235.57101 321.01373 l
237.4454 315.87244 l
h
243.57101 321.01801 m
S
0.15055998 0.15055998 0.15055998 sc
0 i
/F1.1[ 18 0 0 -18 0 0]sf
113.55846 430.95773 m
(!)s
/F1.1[ 16 0 0 -16 0 0]sf
124.66783 436.95773 m
("#$)[ 13.328125 8.898438 0.000000 ] xS
/F1.1[ 18 0 0 -18 0 0]sf
154.89439 430.95773 m
(%&')[ 5.994141 9.000000 0.000000 ] xS
1 w
0.60000002 i
0 0 0 sc
181.03201 423.17642 m
270.77414 358.56104 l
S
CM
168.31639 131.75403 m
163.81445 125.14098 l
160.61691 129.58192 l
h
168.31639 131.75403 m
f
0.25 w
1 0 0 -1 -108.55846 485.92249 cm
276.87485 354.16846 m
272.37292 360.78152 l
269.17538 356.34058 l
h
276.87485 354.16846 m
S
1 0.3764706 0 sc
CM
179.38037 133.57764 m
179.38077 134.31967 179.23325 135.06137 178.9489 135.74677 c
178.66531 136.43246 178.24516 137.06126 177.72018 137.58566 c
177.19577 138.11066 176.56699 138.53079 175.88129 138.81438 c
175.19589 139.09872 174.45418 139.24626 173.71216 139.24585 c
172.97012 139.24626 172.22841 139.09872 171.54301 138.81438 c
170.85732 138.53079 170.22853 138.11066 169.70412 137.58566 c
169.17914 137.06126 168.75899 136.43246 168.4754 135.74677 c
168.19106 135.06137 168.04353 134.31967 168.04393 133.57764 c
168.04353 132.8356 168.19106 132.0939 168.4754 131.40851 c
168.75899 130.72279 169.17914 130.09401 169.70412 129.5696 c
170.22853 129.04462 170.85732 128.62447 171.54301 128.34088 c
172.22841 128.05655 172.97012 127.90901 173.71216 127.90942 c
174.45418 127.90901 175.19589 128.05655 175.88129 128.34088 c
176.56699 128.62447 177.19577 129.04462 177.72018 129.5696 c
178.24516 130.09401 178.66531 130.72279 178.9489 131.40851 c
179.23325 132.0939 179.38077 132.8356 179.38037 133.57764 c
h
179.38037 133.57764 m
f
ep
end
%%Trailer
%%EOF
