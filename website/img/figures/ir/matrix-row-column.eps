%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.1 (Build 17B48) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 901 218
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 901 218
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: DYQQDL+Helvetica
%!FontType1-1.0: DYQQDL+Helvetica 1.0000.0.0000
14 dict begin/FontName /DYQQDL+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /equal put
dup 34 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<

002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020



00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/plus 1 def
/equal 2 def
/u20B8 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4072461 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C98FAD5EE6DEF8E2A946709BA3E02871DE2815743DB8E498E69E94CB8A7501EED33553FB0969440DDC44F6C8FF2DBE00656FA8545D720AB78CDD5DB83A2D48C3AC50A9ED0D3E79BC5471543F4EF7C36C12B084DCB46BC762F868B0B759F7F6DBC0D5B99255F32D5A1F7736BE59D217748965B1B556B5A218F7ECAD06F4230A7066D5E8D3E0B9298EEF4BBB30A6220F60655289952C7B970530028ABAA1B2E8DB3490387E938EF6A362D6F74A3155430081D6B5D073387187FDEB6BBC840E87439128F7D7191A68482CC2C037A1B4E759F3FA0DEFB39FD8511B4E7BF0BB714868E12F6C90D0C83A4B6D27D0AFE879D52C69E60523F0D066A4E8A54CB6265BA893768E94BB92FDFE4CDA121D3A3FB7AC14CC8E6F2E8770CE3835DACD612875BD6E1EFBBB2165B2B8ACE006E85A63D258098FF8BB7080F41396D3A79AD1E7B680692A76264098527BF8B7736D1E680FF46A8ADC415A85DC45E321C5F6BA494C40AB2F2294914A37EB29EE2EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/DYQQDL+Helvetica cguidfix
/F1.1/DYQQDL+Helvetica renmfont
%RBIBeginFontSubset: GMSMNE+PingFangSC-Regular
%!FontType1-1.0: AAAAAE+PingFangHK-Regular 001.003%%CreationDate: 11/5/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAE+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /gid11 putdup 2 /gid12 putdup 3 /gid42 putdup 4 /gid51 putdup 5 /gid56 putdup 6 /gid1285 putdup 7 /gid1380 putdup 8 /gid1426 putdup 9 /gid1567 putdup 10 /gid1591 putdup 11 /gid1658 putdup 12 /gid1692 putdup 13 /gid1746 putdup 14 /gid1982 putdup 15 /gid2230 putdup 16 /gid3182 putdup 17 /gid3659 putdup 18 /gid3674 putdup 19 /gid3686 putdup 20 /gid4505 putdup 21 /gid4696 putdup 22 /gid4913 putdup 23 /gid5027 putdup 24 /gid5029 putdup 25 /gid5330 putdup 26 /gid5475 putdup 27 /gid5565 putdup 28 /gid5688 putdup 29 /gid6408 putdup 30 /gid6535 putdup 31 /gid6954 putdup 32 /gid7459 putdup 33 /gid7518 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6CEEA72C73DFB002A8A659983F30109C91EB36FE6FDF422FC37A4D4324A7256E1A20BB90AA7163FD0F13A25E56342E0714567F23CD96597C5D22DB69F35772E559FDCFA63F4F2D255CC5901F0D3AF01E55645C563FA5DF3280640CD9C2C29BECD818498041D6EA297705FD67324F57AA4FBD30A630E38C8C8363D99A5DDE8C7C430FDC16CB5044BEE5E59E1A595832C40F30B0FD1C673D02D94BA03C21A3D8468DF671F60C3B0184C4FA7BC557214BF9A7021CE3C88D6C96D786CB1BAD6DA69B9449521403513963BB4E1DFD8C602DF24993F78F690A3A30FAD93C88AE1E46E78A3ACB603DE219A885753BAB2D6E2022D9D51A6017F58C73919247CB0D6B22194F6BB57A4DD87672765FDBC0A63F9980CA5B979956B521418D09EC9C5C544956EACC2D32B6D825526AA3DFC7312D06BB8A828C95C9B725AA68BC24DDB29EB6EDD3046CDDBEE527255843229B70B719EA938723DF31B0ED2F01D667C7585D13BF205216B737BA81D3640F2007C9E0C45A333052736087A1D198F161A0690B048EB7335C43F83F75E97CC70396236CE77278FCAB005A04BD7295C70D6AFCC895AB3BA7E5F0DE67606E45BC24E107F616B6C89D154A8E343DAB05130E623B784DD26E561CB3F884B1B1415A154DAD5B920C27A1B53BE6E179B06D217B74F7DE9C137F9A828D4B642C2B4F3FA982D3CCCA0525795C528A1C4F37C1E7684EF1551B04DF0E7E787B2A0968394C530DB3EA06EF96F226ECA869418DEEB36883971ADDDEB90033EEF7739E621970A85570665710565DF876FD78E27DD81E8751361DBB09CBF6511B631B6F87746EC69E8E26BC9E672168595B0651ECC78E2162361BEC0E545A43D079E8BBA983B58DB1CFE808D42D19D6B38B85B5BA97376A7616FF803F571D3C6767512DB5A39B1A71A724F441C795A601E9E85DE19A7B82ADBFCDE54287FA56160FD44C90D0FCB70A26D4FE99017DBEE16B9F8D2C800990A53BF956697932E0CE4123DFFC78523729C537CB819C3E159058064362D1DA307A721B9EFE230619E521E1C11167CF5F684249C39B70F8B7B8A7DF9506EBD97B5E592916E3E0155FC12C6AF7E2BC4952D1976F4C17E7DC6E245B9DA84DCD9783966392DC05B3D5BB3C2406DC11D08450412EDBD4DB8B4B14ABBDF01438B9122C80B56EEE6ED9601720B3D90F48DA5BDB8D013D3D0562D2EC380B891EA4C36C5BD9C02EC648EEEF5A99BF4BFED9E899036808F58743C1615A45211B55124CF9292216BDB43D244CD29FA1C1D3660696902241D3E01153441D4DEC9FF3BCE2B55F87DF64D1DF9BEC9AEFD931E74D9F127048F6FB4228976DB2630609FB1F2304C39D95A866A383AC7500E00C5893DB73F513CDAF62FF2FEA7D930F02430C3F9788F027B1E6A65A0D08E60B1FD8C1C40C0F5610EACE2E02716D15B39B4AFD5C09987AE6B07B36FE69C4C74FDFCAAAE811B1282C2581530EFED329EBC8CC06CA21CDFF321ADFD514B23ACF20F28862E341B06ABE2FDD78F3B64F569C0D095E8FC0359062110C54B2EA1238AD16355156141D25D2DD7E0D43E9193CBF15EDA49B92FCCDD94D5809F40BA07688BD8993DEB7E59157825C4D6A2B2A645DE432C26A3EF224ABFD12EA52B15208B4F7897C13888B29642CB3085CA84CA40A4CA28599AF59AD0CFEB31755EDD8D7F3CF9FB33D8261F4092F6D478900DE41DA16A265EB43AEC5BC2BE1F3B72D72C6DEDF3C6CD3CB9355EC1CC300905BF3064F1BF02B670C6FF5B2E14005CB89E680F51699910D916FF5579139E7855677B3BC6F1282FB091A8E938610BF1180382CBED9707A19C0E225F20E4D89225DCF91C1F80B9C7B7677708C79545C89EFEB9D448B71D5E90EC92B3317B646E1D00628B17B28FFCDD7799E7D22D049B2FE87AC42D20EF1EFB9A8D2A229A93A9E987384D3235FC94D736E380E2CC1824C8F153BB2AB1C79F4D8661B96A0C1863EB5FA195522FF8CBD3D19734FB0D943EFCC8F177EDC1E450AA4A0647727206A24037D5F8D2488CEF6EC1BA507C76129BF2ABF51C384E41FB37C1B3B6F6DEA869C4F93FD01ACA9ADFBB632EE927646CFA03B0D69411557B143824E2679937D2111DDAA3E951D78F34BDBAFBE84EEEF38F3F42FE05C332C046BCDF5BB9814537CC3494DFD45DA6F39D54B1FD68C0B862CA91C6D113AF24B82B8022D7BC42B29D087C00C3C5114244AC051B82280DB2C01D2243992C5B2D2017AE79B6136CD2EF9C1388E6727F9E430B7AD3763571020982E84BD49654B78C2A4B231062CAAF6985B5CFE8985AB7F612346168C1A83FE8BCF60BC5B53B1F43D12147C0AA2495BB0C1349C4F65910D82D62A49C9E2845A12727BCF967038D9169428D49910EC805356562C927309A7882F1E6D8AE129DAF018C2A6C422900E9373A521479568ED0A3E5144A5702ABEE66C69B4C03E82E3BD7E21C9B6C01931BD8BA48CFF7B082EAB644942D8346E27B068D1D54BCC39EFAB01290B05299BBBCE9936FAE7252A74AEC84CB528E0D2281A0A249D4AA9E4784EAE54979A1C89328AA9851DF75FFDBDE574A1A3968CB3626B7F7B0BA8C2B192AFEE0FE339C77F964087F5159E494796AE6D5F93A7DEB7DA08B301AA2558FD8848852EF0A6C6AA9525EB5AFC644139B753E7562B3B2086641C6C89D99FC9346F5C3224840F8EBCC6C2DCE366725B6E794AF7ACFF0B2574E93E3D3D93E0C766B671404648A8868C4671120808C1324666FB24D75AADAB8A89B56CB1774CB458EA2367E4FF56D72FE67F48303C1C2839386F740EE5CBC258016124F9E0770699E17F84827A04125020139AD20471BA19E97CFBD17E70B0CD79DD7531FA94C1FEDC75965637D0DB881BC0A7E2F05B675C56FE795E61327EEF48DFCD1760F648724DFB321E669D1FA2B2A09746CAE3D7F26259AE2E8A78D900D1FF2DB4E747E8F347E083F91B646632C210C16AE56D8F4E67E28EF3C3816F05B4C9305C5245DD566F13B9F86B4FEC26CA10DEAE8E75BC1794245EFE1D27403658D6E0600FFD3778D4EBA0C1659F9A8D0E011F520ABF58AF9DCC7E8854F2E1A9B70D18F44924A407D40877134101BFE6B67EF775181DD8C5C9DEA2085230EF48EC574AAB0E21442098A2302852881085ED125B1300EB32985BD1AA5C0842521B0DB484A74A24D31FD6ACF7177CAAFB32A9460703F295A42F4229D75F88EE155F80290D0BAEA06D2CD1DD769593BCBC8EC493EB1AAC70A8A8EC6E8BAD9931809996323DD2DCB2A5B839A3E4ABEF26A82F736BB204A976AB58E1F8D0AABB3D7779B1DD43B1191C7EE7D0381BCC3869E139DABB866176111EF657E8681FF8D3CC6DFEF7174EC09FEA182E84A9DE7875A6ED62334D793213DD75748C2C70C17ACBD7D93D504A4724526245219C0EF7A8A720E437D348EDA502348E1A1FEF5F6974CF76AEF9ED958D962F1AB3CF1B6B056B6AD75F2C751A7C0EF8AC5E94BFC90BC16298CEA8400C08B597C96E339E770E1698ED481CEC3C04B5589725348B9D086F0E316A69AD64414C5142E420356AB6E4359357F1B115005474664EB7A959369B62351CEECCE7A3E7C57BC4F3EFB62B5C7E7099672ACB124FBED6588C852D53E0CDC314CFFE7ED9CBD9312CA6D9AE0CDF47724E64AA2B2B00E337D2118CE2978DE68CEB6B2E1BDBE7B298FD7C12C834CAEB545388AFE60E0894C076E059098FBAF2C9263E7FA0A0700AE99335B7AF883545745BE883A16BAC6F06D56F47C3D83D34657FB5B07A4C75931883CFEA7F643703D5004156AB4FC2973BBDD255C36685B870F6AF6A9692EAA5BEE77D83C41D230694071B6705671F65572550E936A8864FD23751D42DAF400AA41C5508CC62AD84ACF3E46988944E71B73BB734BD95545784712CF5CC1ECF2915E98CB5AE282390817BA8CEDDEE954C267DD4E0D6DD27361556633723C443D175CDFE5A85B564373DB0EFA80582DFD277E0D2E272E8EA31BC246249A9C16D06E3716578CD58CB252C69BDC9B682590F8C68B88FDAE3E936733E8385A5C504B329769E84DEBA8D2A22141636DCF5C2B4981CD1B68835B9C58567EBEC701AA971058A080EA277B5E3E8E9452BEE3F2E93627401F6659BB1036D5D6FADBD82F0AFB01D6AEAACBBEA7CE0082E0A137996FE0F3233E7F3DCA8AC1E59701E06F9CB0C923D5BA8780D03CFC4A256C55F4F17188AA1FADCFF523F04DB3A66C507F56DF6170C12393DFE6042F95E8A1B6DB663261474E170A3684EF17083F2047EDE90DD53D5AEEF2F7C970CB389AF472E3B522F4D4AB322170BE5597BA9176F1DC01FCADD7F58F5A6055D72FA758897682173E294DEE5ECB9C8693F49523A15439F11EE30A5EE33457756A02789D63FBA98104AC040AF2FFF8FFA0164971BFA92C1E4CC9D8FEA72542D18DBB8F6928242CD32FF534D3F384C22A41A448F4DC44AD63CB383206AA2257F2AE25268CD8627CAF9AB461509BAE885FBE8999DCC98347D5600BDE3E02F641F66C68808F4D42175CB46A5D77D764DFA1B9823937559E762457A4D04AFBBE163A27D31E50634F52E8C9178EA455701F97C6AB96AB19144A90F684B8397C89C6F318A0411EEE907AA5EFC9D6CA122FB20F73112A6BA281FA0C0961FD3E5F6EEB1091B26E11F08DC1F5EA5A4D01ACA3B7AF3AACFC01674226BFFEE3AB5929DED5F84EC57DFABD8822ABF7FF149CEB308B9EC5739D4729545F2C7B831AFEFE700419DA704DFECC40F82C53042262FD724B1282D64C45AB333A33B554B05924DBD375E61E33214CB2201D36D051284999F2B8DE8696740BAFDC9862BAD4F3B403B26E9BD248204C54CBAA5B6A1A9115ABFD15ED60837F4745CBB1DCD780FFC51B842636C2E177CB0218077D6342E22A792BCCFB0C0262CC9D7A4CD87834706B0000D58C8949FD08529AD44EAA14F514309E980644F4D1985A1CE883BC7A437365696B024464C500DC4EE0BE03B14BB911BF7019127CD124AB515E8BF0C3E924CBF63F135D2AACBDAD70E8BC31530FC6543DFAC35AE4B59E50EF1B87A5189EBF29869672930391C0FB869BDE29D9227C4CBF70793A26C75D58C23ED00ADA5482C0843422EABBD86981F4685928D42AEF25AEC96F719CFCB2536C134CECE4FAC760C2410FBF6FA1B03EBD342DCFEE1F687173C52A8BE9811998F80B746DDD87DB5A37FBC910DA382788F04B6123F25D2E5978D85358A1BCA906F3FA96E3BC46619B518579D91C9C434C05C48CC13E6FBAA5022008CE64BD41F0205DBB2E68D013102B2E88058441EA062BD073CC5F5057E952F6ADDA1AEF11A5186D995ABD563480B5DD08E55C465C354397E49031CF61A1A70FCCF41791E6F15668FBBEBA73A9DB2FB379C8472F0035119AFD512839CABDA065A2F69A6F3CA34E6F2DA92949D12E24C8C8EAC09F3CA41DFD060EA8DDFDBC8D08EAF5A5E07BE9F864B7B4A001E7DCBA5874A3A798B83B1B62C35B9A8ABB50FB9A3783B0CC49BE3BA3702152188F6D9D627F14D0B455E70B126CFBFB45BB8E6481AED8CFD9226CD318681EF31D9E2AAD2028BB3308468E17CEC3B8876D26448A58634440B746CF2FAE33163CB5BE79E6A7FC98CB8EF1BAC323609E962430C85FFC9533615CAA62C209E902390F7B8524C1EA7136C3293CA6E85D47DF975C74C81D937566C0E5571F6A7D024A6A40141953FB73FEC6EDC5843C8CF8E707E427908ACA32F8892EFF85D547A4B3228B5345409CB15EBA8F01E0C02DAEC3CDBC7C8B84B49702F31622EAEE2BA166DC117B9FB3B29F3C010AC6BCDBD706B5F77BFB90E8AB5121CB55667BD975955AB82A0CBD4ACF414AA834B979B482AC7C88911263CF054366AE3F0C81F330A63173C1C3405B4CE22D70F936F3FD133B21874423A43662CB74B0D784C9E221DC2B0D034CDA7AC9BC05C7A851867316714090B6016A603D7F7B451A770FFB406590FEFB082FF50A66BDDCE364908D7F84018A1170A35995B26F23059D6275FD7033A1C226DECBBA2165677BF89294AE0B80C341AB1B62845EB2A7657C5851760588C341F0B3F317B3E5E2663C7ED4BA81CA46864363A285786D2872512C52BBFAFB933A8FFF7CFE579A7F5E0611DE0845C4CF35E1B3F0EED0AB57899A8477C916DF25695C9AD6370C4F17085AF852D2A26BC3466BB719C64BEDB79F6F6062A7B3D912E063F0DA8A1C943C6720E4868BAD84253AD9D2E929022FBBE69B81EE0D95A262CC1C0E561FFCDC817366531B408519979ED23271BEAC38CF7BFE4A06808BA155818E1F9375AE46BF6B60D98FF30765DD810554792484E6775E88A51390BADBBB29F3E3DAF4D9B58751F7DAA9260702C89F324A694E18D30083B9833039BC851B568CB785481C04022B9C48966BC3135917B472F432DDC6DCD9E09FAA93C1F5FBA78F44B96B9336D8C8693C6CD852A714CA921DC7141F0DEDF4615935FC64E53066CB5930DD0E0B1D6CEA31DD6CDC4796BB26B669A9136DE3B8CB2A1B9E62A6BCA09891B7157F15E499622F9C85A6A884A548055DFB715D4EBEAD2E49D6C0D442862AD7A38962A5EDD21AEAA4B49A45525603F5B83112210EA8DE7BD82F8F4ADC89D939D90969F914955B8EDA3A9CA96692EB582800CF8A8278DAF94F6F4A340336A5FE51125C4184C52549AECD5BFA0FB76561D3ED41DC05C0AB1552AE2F3E5EF8561A856F0B184A568ECFE993596700A40F8BC2C97ACFBDE22A75861F9E4173F3C37B6D20452D9D10CDCA35D41C0FAB8509BBF185704842D43E32DB54E02891D3A8D8E59059CD01E6CF6477AD190E9AF29A537666D2EAA2FB3B43B56094EE9A426584EC35849471C084F5D53C2388CFD066B4EA38D4011CAE5ADA758AB19E8410E7DB05B03D7607E0266F5BF67EB968BDEB9B05713651022883F93A86D27D29066F8AC0805AAABE74E00511985B7D47B0F0D9DD5509C9F3500E9DFB6DAE4772B8EB4F952AF5C190290B532A3434C69C4A5D4B58FA0E632377E457638FB7683DF34F2D94FD779A2369DE5B25921B9AAF1D43774A43CD1D329F17A62F40FDA27036F93617372C616BA53DD09258B79AA4F19A5766ED65A827140E68DE0B78AB51ADA82B85240FDDC23F8A84179CBDF7D4A309A3A3DFE3CF39E7C66D07178CF81731B2E72B0E675ACDC0339D8447B926452AFF688CF69F992AD6C54795A2642346E9AC49AF3EE24DE741239E8FA93C02A9EEE8834797F2A81AB27F3A563EE653A765A46EE3566F670DF4ADD939E98547D4B898E28F47E9AD03AAFE92BBF227E4AEDDF882FFE8C7CFAEA1F02CE4AA70F38055E2D8DBD8070F552748774A7639F934575E498550F865C001C1F80C90EEAF6DFFB9D1703834F1E53102A15EB31C94764F7A29EEB8BA955C6F31F6FF4174EBC07F055A997C2EA08E5E7F8E3B12502225B9D52B71E102BB9646D6736A96C348A3B10D4B0B67EAA5CD97CEBD0F82B9822373A71159C2C412B00467F5693ACFB5AAC35F2E227A5A32694D2E96E211807E3B59D6F617870D89045F6021B4EF2B6FFB748CFEEEEFE644045EBF213CB35549F9A28631C4934B4273E7B2BA849E0FAEA45FBE3ADB9D8019858293901A027319634D5491850D1729B0AF55F5F36932943D306DD7F7576046C829FA317BD330316B0B88F5083ACE645B5274EDFE525C4E66503C332178BDF8FDBBF92E7C2E9745BC3B956068DAC965B067CE034F0F104E8E8011DD15D2AB4CAC1DB8966836FEC7F60BD05999BAD8163E55D295663A1DEBAFE20EF45ED292F6C88C6C337A6D7A28A971CE84796D9A7CB8A1E72EE16BD2C6673504C2589A1454891D5BAEE061E195724C9C4052EE72C048AC0CA24856C353A3937E07C566E7F500F7AA29489955B6B721CFAAEC76B517FABD7FB878C3DE3C13312F87582400E258D37B9724865C0486C767677A4EDC2DB5BA42C2084C8F1B8F2C395C18BCE1DC8ACDA65184E0FDECDA9AD4F256D7C06045614FE103B7936FB5A1832BD9A00A8B17A471B716DAD491329ECBCC8C67D3A64CE12D387EE25453812ADDB42CA647044A78C124D125C3CE33FE8AB879CA7DE46E110D9272647BAA4C5A8854562B69FB21972E4FEB1B93CA583575490FD113841AABACBDBDE9BC76723FD2602CEE0EF2E9673C37C2B3CE9C7C41C86519F7E1B6723997A0183DE8F1D5BD06A84B27F0E7D8769080415F8916DA8DAD520B2B462F6823396389EBA84403698B8C54563ABD77A79318E199C7C16595E395C777A851211EBC676ED7CAC92E20CC6D598A898C9FD29D8F9D3F0C3EA2CD816AFBCE727F74D27DF07B81366801333304D7ADF103C4365DA6B85F53347D1838BF5BCB46EE81DC16A08A4EC9EA07758A4168A0E0E398530DB601C155D5EB4E6E4731CAA0CBC99B198E3BA96A08C500A07B4142F3DCB303E192EC7A96AF8C810559BF5650AAEE835213FB352CC58FBAC258F77B011FEE4F6CFD4BF9F4D3ABF6F8D38858C24BDD10AA9CFBB3B211A440553AF7664B8607E6174E4F93D0F69D82284FF67ACC6037C86CFA89FED056BE930679E94DCF5679BA96B2F172E8371C706DC9EDE6B7346FD01C69188ACE8A2D6F31CD6D1CFF7568036592892692ED66E5938E041FD708F1275B45C62A3B7E8547CC79A8DB9DE173AC688FA43EC8D522C3D9180CE179EDD499F158E463BE7282E6B8755612DE84D043C41B622C92603D04DD1C76DFDF2E0CB24F0B99716AD5425188794EE030040DC178C23F0714AB021DDA6BD10BAC1EF3957B7CE0AF8D5585D542D44B1FAFA2B9FBDBE595D6B5C1A649821EC478E96CB0902AB164EC17ABF03F68168D08BF7466977E7FBFB05245C7BB223A9D743A7D37ED2BC0E853390A8AE1FB1E07E907A0B5661EB10EC13C80C8788AC19ED86F6E7EFB17848E3F2FDDA399714ECAA7109C1DE0AA21BD4F4CC8FA78C3D4B466311A98C770EC69BDFA89C5B7FDCB8A700902E609AE93428AFD3B6871F6232745167FBE0907FE9D5BD13ECD5C0B5CE0334D8BE5058CDA8D53EBD2D0B5927A77B0C2A044042F87AC5B5E16C08CE276BA14C65FF6BA401DEE3C8059A7B96D021242F34CF930A4CF710A576349620A5277677093526803513CEF3699C143483457AFE1D32667C230FF6C7D10AA083DE08DAC831BA02FA53491E244AFE466DDCFA70B830C6F792EF080EE0011A82B459F901665B78A0892947646F1F9FDAC8654596EA1C6F8A4AAA7F001208C7AE6DEF4C4252840B641EB9C655F62A39AFF40F20EDBFB7C5FBC28EB7790F2FF5266F9CE522F3980EC20AAE4DFAA866050AC1843FC2FDEDA004BCA423E23CB49843408B78E595F98D302396920BC8CAF24FFF15FD20368AA5BD69398233EE8C5C43FA294F5307F05A72869D4ECA6230EB3487F1C13D938DA563BC00E002316184240896855C6504D089C233D52DBCAD362E63A73FEE141D9A7618F09DA46B5F71A54D5B32288DB929EC768EA3FBED270FBC4C4DBF5581291E311442CDB42AF279B068F89E294C8B8B9F5C66722E35F3ACED3874214E60F576AE2DA952562FF49DC4D7C04EC8A2D950BF522E51C4C753B45F8EF3D5EC66F8534E0FD671E3A31E2B8E33DD65B7BF8A08F8EE1E0D38491D2A6188F9686B2179FF700BDF0475DEF54CE1D287D2E2C0C865950D2C3758F8356AF9D39C9C19BB0965B86DD26593FB4781CD61167B4165AF7BCD9F4690593417E28C655F7E09F56BB8E6AAD0B5467A6037795F553024F5984FF7BD6E4F30B120863B2569AB54873B77E66D45208CCC865C771794E93A9171D337C394FE6A23421FDC8B210D63B4E2B0A4E45C65DD1DDC592CDA0C0B194A4D21F82924FB4CE836651FE94586CC51F2D5B9897EA1FA3E6C3BD0EAE7FCA4E259856E7D8FDA72E5D19F1C7D7AB065FE3B8499E9FD5BC58B54C6EB9001BA5EE7D8297654B9530F999C4C6E7DD8E986937C79BA5645A01E058CD24CEE6F2E78B98AA5BDFCB20B4F1030C7CBFE5433488A375F98283EA778D12E62FA4848E925F2BA755ED93169401292CA2FD669A5F94A10D5463E28E5EDF23D2567062DE12878BFB02C5E23C473301AD5C5401C94D5C2F3717DF6A33575C970A39366371C5EBD97266CAA131D5A7021D3CFE465301108CF44567D6FD24E043EE7AF9E8CBFD85C32A68A1227DA90D8E075F3D17B24AD2FD0E1C1961F4FF1CE9F3FB0109E5B291B20B857116200C1517C39FCF7D5BE9A4D8729E7616AEB761BCD0943AD90ABB4C560A9FA374D04BC79E8549FC735AB2B2A874FF15B9708B718972BD4A1F8EF5AB582D94D75F196D7F34CE1DB43844C6AD404AA0585E3094DAFFDDFB16B114CA9159022FAB924E3D9203D0099E77D2312647B9BED2D3CB111FC0892C4738273C0CE6427D1D2CEAB610CC8EE9AE17EA78925789D389C83E2129572BAF2B042D72536B8F8A2AD25588B2283436E8400E8CC0BC201D6F9537FAFC20418E5A65DB0231082A1D43887627304B3ECDAFA5E03A504F984B1349B1EC6F0BE3E287139D32A13006BDD436EC46A01584D814A4F5A4832DE7423E568230CBAAB2191647EA644B43D55F2415E0AC26CEA7DD79044C2315DE0E547BB06A0B361FBA5339C6EBE9ACA816F07A549CA4EE3B8BB31D3BA3E7A98AF5EA0DF35A414338B448D7C25E4F212EC755A7D7E5A09E48D9D97EC3600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: GMSMNE+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /GMSMNE+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /gid3674 putdup 34 /gid5027 putdup 35 /gid5029 putdup 36 /gid7459 putdup 37 /gid6535 putdup 38 /gid5330 putdup 39 /gid6408 putdup 40 /gid11 putdup 41 /gid42 putdup 42 /gid51 putdup 43 /gid56 putdup 44 /gid12 putdup 45 /gid1692 putdup 46 /gid5565 putdup 47 /gid1658 putdup 48 /gid4913 putdup 49 /gid5688 putdup 50 /gid7518 putdup 51 /gid3182 putdup 52 /gid1380 putdup 53 /gid4696 putdup 54 /gid1591 putdup 55 /gid4505 putdup 56 /gid3659 putdup 57 /gid5475 putdup 58 /gid2230 putdup 59 /gid1567 putdup 60 /gid6954 putdup 61 /gid1426 putdup 62 /gid1285 putdup 63 /gid1746 putdup 64 /gid3686 putdup 65 /gid1982 putreadonly def/$SubFontArray [/AAAAAE+PingFangHK-Regular findfont ] def/CharProcs 35 dictdup /gid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /gid11 {(\001) 0 $SP} putdup /gid12 {(\002) 0 $SP} putdup /gid42 {(\003) 0 $SP} putdup /gid51 {(\004) 0 $SP} putdup /gid56 {(\005) 0 $SP} putdup /gid1285 {(\006) 0 $SP} putdup /gid1380 {(\007) 0 $SP} putdup /gid1426 {(\010) 0 $SP} putdup /gid1567 {(\011) 0 $SP} putdup /gid1591 {(\012) 0 $SP} putdup /gid1658 {(\013) 0 $SP} putdup /gid1692 {(\014) 0 $SP} putdup /gid1746 {(\015) 0 $SP} putdup /gid1982 {(\016) 0 $SP} putdup /gid2230 {(\017) 0 $SP} putdup /gid3182 {(\020) 0 $SP} putdup /gid3659 {(\021) 0 $SP} putdup /gid3674 {(\022) 0 $SP} putdup /gid3686 {(\023) 0 $SP} putdup /gid4505 {(\024) 0 $SP} putdup /gid4696 {(\025) 0 $SP} putdup /gid4913 {(\026) 0 $SP} putdup /gid5027 {(\027) 0 $SP} putdup /gid5029 {(\030) 0 $SP} putdup /gid5330 {(\031) 0 $SP} putdup /gid5475 {(\032) 0 $SP} putdup /gid5565 {(\033) 0 $SP} putdup /gid5688 {(\034) 0 $SP} putdup /gid6408 {(\035) 0 $SP} putdup /gid6535 {(\036) 0 $SP} putdup /gid6954 {(\037) 0 $SP} putdup /gid7459 {( ) 0 $SP} putdup /gid7518 {(!) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/GMSMNE+PingFangSC-Regular cguidfix
/F2.1/GMSMNE+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.69497412 0.76374501 1 sc
q
0 0 900.56665 217.41316 rc
453.08649 152.71434 m
498.28314 152.71434 l
498.28314 120.14285 l
453.08649 120.14285 l
h
453.08649 152.71434 m
f
2 J
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
481.88501 187.85326 m
527.08167 187.85326 l
527.08167 220.42474 l
481.88501 220.42474 l
h
481.88501 187.85326 m
S
0.84332609 1 0.68428266 sc
CM
426.96045 152.77998 m
453.51904 152.77998 l
453.51904 120.07719 l
426.96045 120.07719 l
h
426.96045 152.77998 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
455.75897 187.7876 m
482.31757 187.7876 l
482.31757 220.4904 l
455.75897 220.4904 l
h
455.75897 187.7876 m
S
1 0.77280027 0.69095683 sc
CM
396.60794 152.77998 m
426.98807 152.77998 l
426.98807 120.07719 l
396.60794 120.07719 l
h
396.60794 152.77998 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
425.40646 187.7876 m
455.78659 187.7876 l
455.78659 220.4904 l
425.40646 220.4904 l
h
425.40646 187.7876 m
S
2.1259842 w
29.861509 124.21742 m
129.61855 124.21742 l
129.61855 283.64099 l
29.861509 283.64099 l
h
29.861509 124.21742 m
S
0.81568629 0.81568629 0.81568629 sc
CM
263.19888 152.58153 m
364.70926 152.58153 l
364.70926 120.69525 l
263.19888 120.69525 l
h
263.19888 152.58153 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
291.99741 187.98607 m
393.50778 187.98607 l
393.50778 219.87233 l
291.99741 219.87233 l
h
291.99741 187.98607 m
S
425.49518 188.19586 m
527.00555 188.19586 l
527.00555 220.08214 l
425.49518 220.08214 l
h
425.49518 188.19586 m
S
1 w
291.86676 198.15082 m
393.75223 198.15082 l
393.75223 210.00259 l
291.86676 210.00259 l
h
291.86676 198.15082 m
S
0.81568629 0.81568629 0.81568629 sc
CM
132.22113 193.03658 m
231.82198 193.03658 l
231.82198 180.8898 l
132.22113 180.8898 l
h
132.22113 193.03658 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
161.01965 147.53101 m
260.62048 147.53101 l
260.62048 159.6778 l
161.01965 159.6778 l
h
161.01965 147.53101 m
S
0.81568629 0.81568629 0.81568629 sc
CM
132.22113 145.42657 m
231.82198 145.42657 l
231.82198 133.2798 l
132.22113 133.2798 l
h
132.22113 145.42657 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
161.01965 195.14101 m
260.62048 195.14101 l
260.62048 207.2878 l
161.01965 207.2878 l
h
161.01965 195.14101 m
S
0.81568629 0.81568629 0.81568629 sc
CM
132.22113 93.849075 m
231.82198 93.849075 l
231.82198 81.702301 l
132.22113 81.702301 l
h
132.22113 93.849075 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
161.01965 246.71851 m
260.62048 246.71851 l
260.62048 258.8653 l
161.01965 258.8653 l
h
161.01965 246.71851 m
S
2.1259842 w
161.52023 124.21742 m
261.27728 124.21742 l
261.27728 283.64099 l
161.52023 283.64099 l
h
161.52023 124.21742 m
S
1 0 0 sc
CM
540.53741 216.19595 m
547.05212 216.19595 l
547.05212 56.160885 l
540.53741 56.160885 l
h
540.53741 216.19595 m
f
1 w
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
569.33594 124.37163 m
575.85065 124.37163 l
575.85065 284.40671 l
569.33594 284.40671 l
h
569.33594 124.37163 m
S
0.46956795 1 0 sc
CM
562.67548 216.29668 m
569.19019 216.29668 l
569.19019 56.160885 l
562.67548 56.160885 l
h
562.67548 216.29668 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
591.474 124.2709 m
597.98871 124.2709 l
597.98871 284.40671 l
591.474 284.40671 l
h
591.474 124.2709 m
S
0 0.18147266 1 sc
CM
595.88257 216.51088 m
602.39728 216.51088 l
602.39728 56.160885 l
595.88257 56.160885 l
h
595.88257 216.51088 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
624.68109 124.0567 m
631.1958 124.0567 l
631.1958 284.40671 l
624.68109 284.40671 l
h
624.68109 124.0567 m
S
2.1259842 w
560.8183 124.21742 m
660.57538 124.21742 l
660.57538 283.64099 l
560.8183 283.64099 l
h
560.8183 124.21742 m
S
1 0 0 sc
CM
738.35535 216.19595 m
744.87012 216.19595 l
744.87012 56.160885 l
738.35535 56.160885 l
h
738.35535 216.19595 m
f
1 w
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
767.15387 124.37163 m
773.66858 124.37163 l
773.66858 284.40671 l
767.15387 284.40671 l
h
767.15387 124.37163 m
S
0.46956795 1 0 sc
CM
807.49811 216.29668 m
814.01282 216.29668 l
814.01282 56.160885 l
807.49811 56.160885 l
h
807.49811 216.29668 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
836.29663 124.2709 m
842.81134 124.2709 l
842.81134 284.40671 l
836.29663 284.40671 l
h
836.29663 124.2709 m
S
0 0.18147266 1 sc
CM
893.55194 216.51088 m
900.06665 216.51088 l
900.06665 56.160885 l
893.55194 56.160885 l
h
893.55194 216.51088 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
922.35046 124.0567 m
928.86517 124.0567 l
928.86517 284.40671 l
922.35046 284.40671 l
h
922.35046 124.0567 m
S
0.25098041 0.25098041 0.25098041 sc
CM
664.27295 216.19595 m
670.78766 216.19595 l
670.78766 56.160885 l
664.27295 56.160885 l
h
664.27295 216.19595 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
693.07147 124.37163 m
699.58618 124.37163 l
699.58618 284.40671 l
693.07147 284.40671 l
h
693.07147 124.37163 m
S
0 i
/F1.1[ 24 0 0 -24 0 0]sf
703.52795 209.77161 m
(!)s
0.60000002 i
1 0.77280027 0.69095683 sc
CM
694.79443 152.77998 m
725.17456 152.77998 l
725.17456 120.07719 l
694.79443 120.07719 l
h
694.79443 152.77998 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
723.59296 187.7876 m
753.97308 187.7876 l
753.97308 220.4904 l
723.59296 220.4904 l
h
723.59296 187.7876 m
S
CM
734.90533 136.33589 m
734.90552 136.65973 734.84113 136.98344 734.71704 137.28256 c
734.59326 137.58183 734.40991 137.85626 734.18079 138.08513 c
733.9519 138.31424 733.67749 138.4976 733.37823 138.62138 c
733.0791 138.74547 732.75537 138.80986 732.43158 138.80968 c
732.10773 138.80986 731.784 138.74547 731.48486 138.62138 c
731.18561 138.4976 730.91119 138.31424 730.68231 138.08513 c
730.45319 137.85626 730.26984 137.58183 730.14606 137.28256 c
730.02197 136.98344 729.95758 136.65973 729.95776 136.33589 c
729.95758 136.01204 730.02197 135.68834 730.14606 135.38921 c
730.26984 135.08994 730.45319 134.81552 730.68231 134.58664 c
730.91119 134.35753 731.18561 134.17416 731.48486 134.0504 c
731.784 133.9263 732.10773 133.86191 732.43158 133.86209 c
732.75537 133.86191 733.0791 133.9263 733.37823 134.0504 c
733.67749 134.17416 733.9519 134.35753 734.18079 134.58664 c
734.40991 134.81552 734.59326 135.08994 734.71704 135.38921 c
734.84113 135.68834 734.90552 136.01204 734.90533 136.33589 c
h
734.90533 136.33589 m
f
1 0 0 -1 -28.798517 340.5676 cm
763.70386 204.2317 m
763.70404 203.90785 763.63965 203.58415 763.51556 203.28502 c
763.39178 202.98576 763.20844 202.71133 762.97931 202.48247 c
762.75043 202.25334 762.47601 202.06998 762.17676 201.94621 c
761.87762 201.82211 761.55389 201.75772 761.23004 201.7579 c
760.90625 201.75772 760.58252 201.82211 760.28339 201.94621 c
759.98413 202.06998 759.70972 202.25334 759.48083 202.48247 c
759.25171 202.71133 759.06836 202.98576 758.94458 203.28502 c
758.8205 203.58415 758.7561 203.90785 758.75629 204.2317 c
758.7561 204.55556 758.8205 204.87926 758.94458 205.17839 c
759.06836 205.47765 759.25171 205.75208 759.48083 205.98094 c
759.70972 206.21007 759.98413 206.39343 760.28339 206.5172 c
760.58252 206.6413 760.90625 206.70567 761.23004 206.70551 c
761.55389 206.70567 761.87762 206.6413 762.17676 206.5172 c
762.47601 206.39343 762.75043 206.21007 762.97931 205.98094 c
763.20844 205.75208 763.39178 205.47765 763.51556 205.17839 c
763.63965 204.87926 763.70404 204.55556 763.70386 204.2317 c
h
763.70386 204.2317 m
S
0 i
777.72632 209.77161 m
(")s
0.60000002 i
0.84332609 1 0.68428266 sc
CM
767.60883 152.77998 m
794.16742 152.77998 l
794.16742 120.07719 l
767.60883 120.07719 l
h
767.60883 152.77998 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
796.40735 187.7876 m
822.96594 187.7876 l
822.96594 220.4904 l
796.40735 220.4904 l
h
796.40735 187.7876 m
S
CM
803.72272 136.33589 m
803.7229 136.65973 803.65851 136.98344 803.53442 137.28256 c
803.41064 137.58183 803.22729 137.85626 802.99817 138.08513 c
802.76929 138.31424 802.49487 138.4976 802.19562 138.62138 c
801.89648 138.74547 801.57281 138.80986 801.24896 138.80968 c
800.92511 138.80986 800.60138 138.74547 800.30225 138.62138 c
800.00299 138.4976 799.72858 138.31424 799.49969 138.08513 c
799.27057 137.85626 799.08722 137.58183 798.96344 137.28256 c
798.83936 136.98344 798.77496 136.65973 798.77515 136.33589 c
798.77496 136.01204 798.83936 135.68834 798.96344 135.38921 c
799.08722 135.08994 799.27057 134.81552 799.49969 134.58664 c
799.72858 134.35753 800.00299 134.17416 800.30225 134.0504 c
800.60138 133.9263 800.92511 133.86191 801.24896 133.86209 c
801.57281 133.86191 801.89648 133.9263 802.19562 134.0504 c
802.49487 134.17416 802.76929 134.35753 802.99817 134.58664 c
803.22729 134.81552 803.41064 135.08994 803.53442 135.38921 c
803.65851 135.68834 803.7229 136.01204 803.72272 136.33589 c
h
803.72272 136.33589 m
f
1 0 0 -1 -28.798517 340.5676 cm
832.52124 204.2317 m
832.52142 203.90785 832.45703 203.58415 832.33295 203.28502 c
832.20917 202.98576 832.02582 202.71133 831.79669 202.48247 c
831.56781 202.25334 831.2934 202.06998 830.99414 201.94621 c
830.69501 201.82211 830.37128 201.75772 830.04749 201.7579 c
829.72363 201.75772 829.3999 201.82211 829.10077 201.94621 c
828.80151 202.06998 828.5271 202.25334 828.29822 202.48247 c
828.06909 202.71133 827.88574 202.98576 827.76196 203.28502 c
827.63788 203.58415 827.57349 203.90785 827.57367 204.2317 c
827.57349 204.55556 827.63788 204.87926 827.76196 205.17839 c
827.88574 205.47765 828.06909 205.75208 828.29822 205.98094 c
828.5271 206.21007 828.80151 206.39343 829.10077 206.5172 c
829.3999 206.6413 829.72363 206.70567 830.04749 206.70551 c
830.37128 206.70567 830.69501 206.6413 830.99414 206.5172 c
831.2934 206.39343 831.56781 206.21007 831.79669 205.98094 c
832.02582 205.75208 832.20917 205.47765 832.33295 205.17839 c
832.45703 204.87926 832.52142 204.55556 832.52124 204.2317 c
h
832.52124 204.2317 m
S
0 i
847.38794 209.77161 m
(")s
0.60000002 i
0.69497412 0.76374501 1 sc
CM
836.97308 152.71434 m
882.16974 152.71434 l
882.16974 120.14285 l
836.97308 120.14285 l
h
836.97308 152.71434 m
f
0 0 0 sc
1 0 0 -1 -28.798517 340.5676 cm
865.77161 187.85326 m
910.96826 187.85326 l
910.96826 220.42474 l
865.77161 220.42474 l
h
865.77161 187.85326 m
S
CM
891.04346 136.33589 m
891.04364 136.65973 890.97925 136.98344 890.8551 137.28256 c
890.73138 137.58183 890.54797 137.85626 890.31885 138.08513 c
890.09003 138.31424 889.81561 138.4976 889.5163 138.62138 c
889.21716 138.74547 888.89349 138.80986 888.56964 138.80968 c
888.24579 138.80986 887.92206 138.74547 887.62299 138.62138 c
887.32367 138.4976 887.04926 138.31424 886.82037 138.08513 c
886.59125 137.85626 886.4079 137.58183 886.28412 137.28256 c
886.16003 136.98344 886.09564 136.65973 886.09583 136.33589 c
886.09564 136.01204 886.16003 135.68834 886.28412 135.38921 c
886.4079 135.08994 886.59125 134.81552 886.82037 134.58664 c
887.04926 134.35753 887.32367 134.17416 887.62299 134.0504 c
887.92206 133.9263 888.24579 133.86191 888.56964 133.86209 c
888.89349 133.86191 889.21716 133.9263 889.5163 134.0504 c
889.81561 134.17416 890.09003 134.35753 890.31885 134.58664 c
890.54797 134.81552 890.73138 135.08994 890.8551 135.38921 c
890.97925 135.68834 891.04364 136.01204 891.04346 136.33589 c
h
891.04346 136.33589 m
f
1 0 0 -1 -28.798517 340.5676 cm
919.84198 204.2317 m
919.8421 203.90785 919.77777 203.58415 919.65363 203.28502 c
919.52991 202.98576 919.3465 202.71133 919.11737 202.48247 c
918.88855 202.25334 918.61407 202.06998 918.31482 201.94621 c
918.01569 201.82211 917.69202 201.75772 917.36816 201.7579 c
917.04431 201.75772 916.72058 201.82211 916.42145 201.94621 c
916.12219 202.06998 915.84778 202.25334 915.6189 202.48247 c
915.38977 202.71133 915.20642 202.98576 915.08264 203.28502 c
914.95856 203.58415 914.89417 203.90785 914.89435 204.2317 c
914.89417 204.55556 914.95856 204.87926 915.08264 205.17839 c
915.20642 205.47765 915.38977 205.75208 915.6189 205.98094 c
915.84778 206.21007 916.12219 206.39343 916.42145 206.5172 c
916.72058 206.6413 917.04431 206.70567 917.36816 206.70551 c
917.69202 206.70567 918.01569 206.6413 918.31482 206.5172 c
918.61407 206.39343 918.88855 206.21007 919.11737 205.98094 c
919.3465 205.75208 919.52991 205.47765 919.65363 205.17839 c
919.77777 204.87926 919.8421 204.55556 919.84198 204.2317 c
h
919.84198 204.2317 m
S
0 i
/F2.1[ 14 0 0 -14 0 0]sf
51.89003 312.34225 m
(!"#$)[ 14.000000 14.000000 14.000000 0.000000 ] xS
190.54877 312.34225 m
(%&')[ 14.000000 14.000000 0.000000 ] xS
192.15877 332.34225 m
(\(\)*+,)[ 4.662000 10.472000 8.988000 9.996000 0.000000 ] xS
314.90259 312.34225 m
(-./0)[ 14.000000 14.000000 14.000000 0.000000 ] xS
328.90259 332.34225 m
(#$)[ 14.000000 0.000000 ] xS
455.40039 312.34225 m
(123)[ 14.000000 14.000000 0.000000 ] xS
434.40039 332.34225 m
(-./0#$)[ 14.000000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
561.84686 312.34225 m
(%&45-67)[ 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
591.45685 332.34225 m
(\(\)*+,)[ 4.662000 10.472000 8.988000 9.996000 0.000000 ] xS
759.88666 312.34225 m
(89:;<=>)[ 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
759.88666 332.34225 m
(45-0?@A)[ 14.000000 14.000000 14.000000 14.000000 14.000000 14.000000 0.000000 ] xS
1.4173229 w
0.60000002 i
133.77701 198.28596 m
150.64893 198.28596 l
150.64893 189.82112 l
157.87975 203.9292 l
150.64893 218.03728 l
150.64893 209.57243 l
133.77701 209.57243 l
h
133.77701 198.28596 m
S
1.4173229 w
264.97125 198.28596 m
281.84317 198.28596 l
281.84317 189.82112 l
289.07397 203.9292 l
281.84317 218.03728 l
281.84317 209.57243 l
264.97125 209.57243 l
h
264.97125 198.28596 m
S
398.12131 198.28596 m
414.99319 198.28596 l
414.99319 189.82112 l
422.22403 203.9292 l
414.99319 218.03728 l
414.99319 209.57243 l
398.12131 209.57243 l
h
398.12131 198.28596 m
S
531.19855 198.28596 m
548.07043 198.28596 l
548.07043 189.82112 l
555.30127 203.9292 l
548.07043 218.03728 l
548.07043 209.57243 l
531.19855 209.57243 l
h
531.19855 198.28596 m
S
664.27118 198.28596 m
681.14307 198.28596 l
681.14307 189.82112 l
688.3739 203.9292 l
681.14307 218.03728 l
681.14307 209.57243 l
664.27118 209.57243 l
h
664.27118 198.28596 m
S
ep
end
%%Trailer
%%EOF
