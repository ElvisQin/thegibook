%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2548a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 524 80
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 524 80
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: VARXGX+Helvetica
%!FontType1-1.0: VARXGX+Helvetica 1.0000.0.0000
14 dict begin/FontName /VARXGX+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /zero put
dup 35 /one put
dup 36 /C put
dup 37 /S put
dup 38 /two put
dup 39 /three put
dup 40 /four put
dup 41 /seven put
dup 42 /six put
dup 43 /five put
dup 44 /B put
dup 45 /y put
dup 46 /t put
dup 47 /e put
dup 48 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/one 3 def
/two 4 def
/three 5 def
/four 6 def
/five 7 def
/six 8 def
/seven 9 def
/A 10 def
/B 11 def
/C 12 def
/S 13 def
/e 14 def
/t 15 def
/y 16 def
/u20B8 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BC64A62485D7C863002D39D4194FF17CC8AA420E752C449BD1094F4D1EC7207B0530DDF71009828522A260EFA1903C8C21148B5AEA74F5F54E03FE286DAB2E21B3D5193F167FB7002A92B0E61DF27B872185B9CE455AEE3573114DFC2D4183ED23D14D39C32F11D73ECE2D4C7F965CC09C6084D241D697A202C876AC6FEF5567D557D41AF35A1A15A75BBD868C7617B21481BF64EBF0F36C276D54E136015F31C769728AD65D6E99FB8521DFDDDD4F3EA459656D0F1D404282BD1EC7939AAAC474640240E0B7402686866C568A2E7E1FA2FA9C4FE394618B11C62367EAA313B3F39134D434553AF591CC6845F2093F0384ACFB49A8BEB6F845FA5CE168A97ACBA3B095405FCC28D31B766B7A4A2BBD40D0A8171236270D4801C90BE534D3C85F31D25CE9B8005B5770B1BFD53A0FB747F064774121DE85DF1C8E4308C5C59BE2F647C4F9B99B36CE917EA11631FA347749DE3056AA62903056A3CA1FFFD83991E1C193B13D4BC9E134235D38DD6954DB5A810D8FAB640FD396F286C81A58181B11B6FD81E9DEED63C7F8A833098FFC393CDC995DC9CFAA52349481E8DF16A3517FBE7924163FC33612B241C2161F88E5FF87C5269AD8D22F81357E4AA51571431C81DD9789063A7BF3B4B2B584CD1DF4CB9B6E60F17DBD8542C5E7E400BE98863D65114BFE9ECE4619B49D9AA5267524BFA03AB7691FE77B900A1E2F9769BDA3C70DB5CE75C03ACCCFEEC4A4215D18A0137B2A9B378CA2C76F3A54985C5F79DC
9FA13342E36D293CCC90E8DCB8CF9DA733BD61FEBDAFA574C8F380067C4A43DE6679BAAD413DD5A68600E8DBC9FD1B94BBEE6664D8F93CA89FB8FB89E8B84CAE3A2CEA57E1BD12FE3374043F9BFD307CC06EA105C8F48F56102E3502705F01E0004D672E0E01C1379C07F419FCDF862CB43EBBCEFB6D4E349CA7078955AC0A22E0C75BBAC1E9A2D5F4983BD32D2709C8113B2A6CB69368A509C996DEC8FA6C9492DB395539E9F20C8320B2509B466F8DDF8DAE96216AF5FAE1A93688FB9C12199A36D20B3F1205BF68E8CE41D566827504EDB3680F307840BB68ADCAEDB621D7944E32A9E4A013CDF265D632EDBCA4F06C902D9F79D6163E68CFA5514A9B890EBA124E77F8E525CCF4F72FA9D4A8F043C8BDD768F347649139795888F46DC8707DABEB66C4D9198FE2858419C416AFBDA99A3231DCC48040DD54CC42A26610C04C5C58416D398F828F4E7962591D28E71C9A8D379B4864AA4E1AED2A6C10246AA0DAD28BDA5561E2E508A69100A3839252E8A26C15158E14FA859EE97484BC3FBFB24F59E13386C8DA7B92598304E00CFCF6F303B78DAB3C0CE6B32A7431998D26E6307E9DCAD17E72190779EC050534A57861C3394676F14B6AF7395FED1F419FB86C6FAF1FABDF902DEB7C3B281993B55D4FA4205EBD062078C9D6E5CDBA239303A47832ED502DACE1AACCD377673340101D010FB2705E4301F854DD14153719D66AEC52322F7A360DC5260AE05ABF803030D924E721E0DB303EF44F4549EC4AADB8F26A28DB6AD52D237316B4C61CC4BF2C9D8A8F15B68A0E38982813B5D7A6FB5AFA914F9FE49285329D3B8603BC7B3ED2E9EB5BD997BF9231362F41E33182BAB9FAF3EEF9BFFF21EE38D6460C3E7B54F0470D8067E49D79B272A489E5E76018E286C3501D70148DE770741290A37BB07373B52F37A51B75965E122F1938C005B0720AF3466ECE34BA897720F1023D71715162C94D296EE6259B1A8C27BC2B84951A1A0D6C2C76F35287397337B8164A1F7485E5630E859C9C811AD520858F9BB519502927FA9B4738BF652A5C6683FA753DD435D72F19E7B696322F73F2B15F0AA77CD458DF0667976BA8CA0CC4A0628EF67D8C675DAB33F28E61B8305F1CCC88B157C3848DD458F517E4BFC9933BD80FB1CC72B16DEF3D210AEBA472E355F272BBFD479756F3287B0E29167DEB718E91DF730FF664529FC4FE0A88830604164A3497ABB7A469A0421ED9817D12464989F668345D1C9785620AAD6752FA67FD39653DBE11AF282D44E32B236CAA3DC6955CAB7325EAA12D855CB95BDD9ECC82D4E2F9A6378524F4DF8AF7DAB759EF7D790ABF1C7EFD788A7243AB8FA72343642AA0FE7E287D3DE364C96607FBDA46AFA92AB5076636799309D5444674159F30D67DC23FE5C309F929EF9A491B109176FF9EFF1368F89DBD667AC5338A8B

1BDD09E5B209A48CD34A7CE602F38D68425832203AC0A95E4F18D8EE1F5EBFB3888C0B7F1A24D7ED99471172FA22751A911AE233983B592F91B2CE82CE61531CDEC6C42F4034725BDE03D0945153F2940109E805AB00C3D48C08AE2979D4C8955855C93B533B086AD41BA9B9A97DCF809FB86E4B95692D38163B4AE1A86B90A666A52C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/VARXGX+Helvetica cguidfix
/F1.1/VARXGX+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.86847389 0.86847389 0.86847389 sc
q
0 0 523.03619 79.292152 rc
10.5 78.792152 m
177.8454 78.792152 345.1908 78.792152 512.53619 78.792152 c
517.53619 78.792152 522.53619 73.792152 522.53619 68.792152 c
522.53619 49.361435 522.53619 29.930717 522.53619 10.5 c
522.53619 5.5 517.53619 0.5 512.53619 0.5 c
345.1908 0.5 177.8454 0.5 10.5 0.5 c
5.5 0.5 0.5 5.5 0.5 10.5 c
0.5 29.930717 0.5 49.361435 0.5 68.792152 c
0.5 73.792152 5.5 78.792152 10.5 78.792152 c
h
10.5 78.792152 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
174.31912 396.71356 m
341.66452 396.71356 509.00992 396.71356 676.35529 396.71356 c
681.35529 396.71356 686.35529 401.71356 686.35529 406.71356 c
686.35529 426.14426 686.35529 445.57498 686.35529 465.00571 c
686.35529 470.00571 681.35529 475.00571 676.35529 475.00571 c
509.00992 475.00571 341.66452 475.00571 174.31912 475.00571 c
169.31912 475.00571 164.31912 470.00571 164.31912 465.00571 c
164.31912 445.57498 164.31912 426.14426 164.31912 406.71356 c
164.31912 401.71356 169.31912 396.71356 174.31912 396.71356 c
h
174.31912 396.71356 m
S
0.95197624 0.99813789 0.88594288 sc
CM
14.239408 52.731472 m
92.225601 52.731472 170.21181 52.731472 248.198 52.731472 c
251.24701 52.731472 254.29604 49.682453 254.29604 46.63343 c
254.29604 39.828247 254.29604 33.02306 254.29604 26.217873 c
254.29604 23.168852 251.24701 20.119833 248.198 20.119833 c
170.21181 20.119833 92.225601 20.119833 14.239408 20.119833 c
11.190388 20.119833 8.1413679 23.168852 8.1413679 26.217873 c
8.1413679 33.02306 8.1413679 39.828247 8.1413679 46.63343 c
8.1413679 49.682453 11.190388 52.731472 14.239408 52.731472 c
h
14.239408 52.731472 m
f
0.6205619 0.6205619 0.6205619 sc
1 0 0 -1 -163.81912 475.50571 cm
178.05853 422.77423 m
256.04474 422.77423 334.03091 422.77423 412.01712 422.77423 c
415.06613 422.77423 418.11517 425.82324 418.11517 428.87225 c
418.11517 435.67746 418.11517 442.48264 418.11517 449.28781 c
418.11517 452.33685 415.06613 455.38586 412.01712 455.38586 c
334.03091 455.38586 256.04474 455.38586 178.05853 455.38586 c
175.00951 455.38586 171.96049 452.33685 171.96049 449.28781 c
171.96049 442.48264 171.96049 435.67746 171.96049 428.87225 c
171.96049 425.82324 175.00951 422.77423 178.05853 422.77423 c
h
178.05853 422.77423 m
S
0.95197624 0.99813789 0.88594288 sc
CM
272.478 52.731472 m
350.4642 52.731472 428.45041 52.731472 506.43658 52.731472 c
509.48563 52.731472 512.53461 49.682453 512.53461 46.63343 c
512.53461 39.828247 512.53461 33.02306 512.53461 26.217873 c
512.53461 23.168852 509.48563 20.119833 506.43658 20.119833 c
428.45041 20.119833 350.4642 20.119833 272.478 20.119833 c
269.42899 20.119833 266.37997 23.168852 266.37997 26.217873 c
266.37997 33.02306 266.37997 39.828247 266.37997 46.63343 c
266.37997 49.682453 269.42899 52.731472 272.478 52.731472 c
h
272.478 52.731472 m
f
0.59320456 0.72677135 0.32937914 sc
1 0 0 -1 -163.81912 475.50571 cm
436.29712 422.77423 m
514.28333 422.77423 592.26953 422.77423 670.25574 422.77423 c
673.30475 422.77423 676.35376 425.82324 676.35376 428.87225 c
676.35376 435.67746 676.35376 442.48264 676.35376 449.28781 c
676.35376 452.33685 673.30475 455.38586 670.25574 455.38586 c
592.26953 455.38586 514.28333 455.38586 436.29712 455.38586 c
433.24811 455.38586 430.1991 452.33685 430.1991 449.28781 c
430.1991 442.48264 430.1991 435.67746 430.1991 428.87225 c
430.1991 425.82324 433.24811 422.77423 436.29712 422.77423 c
h
436.29712 422.77423 m
S
2 J
0.42267311 0.42267311 0.42267311 sc
177.4026 405.08514 m
177.93674 440.61624 l
S
0.49798244 0.49807191 0.49797678 sc
236.49109 405.08514 m
237.02524 440.61624 l
S
295.57959 405.08514 m
296.11374 440.61624 l
S
352.47961 405.08514 m
353.01376 440.61624 l
S
411.56812 405.08514 m
412.10226 440.61624 l
S
435.6412 405.08514 m
436.17535 440.61624 l
S
494.72968 405.08514 m
495.26382 440.61624 l
S
553.81818 405.08514 m
554.35236 440.61624 l
S
610.7182 405.08514 m
611.25238 440.61624 l
S
669.8067 405.08514 m
670.34088 440.61624 l
S
0.65567982 0.65567982 0.65567982 sc
CM
19.983446 47.696793 m
25.686253 47.696793 31.389057 47.696793 37.091862 47.696793 c
40.177666 47.696793 43.263466 44.610992 43.263466 41.525188 c
43.263466 38.418373 43.263466 35.311562 43.263466 32.204746 c
43.263466 29.118944 40.177666 26.03314 37.091862 26.03314 c
31.389057 26.03314 25.686253 26.03314 19.983446 26.03314 c
16.897644 26.03314 13.811841 29.118944 13.811841 32.204746 c
13.811841 35.311562 13.811841 38.418373 13.811841 41.525188 c
13.811841 44.610992 16.897644 47.696793 19.983446 47.696793 c
h
19.983446 47.696793 m
f
0 J
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
183.80257 427.8089 m
189.50537 427.8089 195.20818 427.8089 200.91098 427.8089 c
203.99678 427.8089 207.0826 430.89471 207.0826 433.9805 c
207.0826 437.08731 207.0826 440.19415 207.0826 443.30096 c
207.0826 446.38675 203.99678 449.47256 200.91098 449.47256 c
195.20818 449.47256 189.50537 449.47256 183.80257 449.47256 c
180.71677 449.47256 177.63097 446.38675 177.63097 443.30096 c
177.63097 440.19415 177.63097 437.08731 177.63097 433.9805 c
177.63097 430.89471 180.71677 427.8089 183.80257 427.8089 c
h
183.80257 427.8089 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
188.50482 442.64072 m
(!)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
49.397247 47.536106 m
55.100052 47.536106 60.80286 47.536106 66.505661 47.536106 c
69.591469 47.536106 72.677269 44.450306 72.677269 41.364502 c
72.677269 38.257687 72.677269 35.150875 72.677269 32.04406 c
72.677269 28.958256 69.591469 25.872454 66.505661 25.872454 c
60.80286 25.872454 55.100052 25.872454 49.397247 25.872454 c
46.311447 25.872454 43.225643 28.958256 43.225643 32.04406 c
43.225643 35.150875 43.225643 38.257687 43.225643 41.364502 c
43.225643 44.450306 46.311447 47.536106 49.397247 47.536106 c
h
49.397247 47.536106 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
213.21637 427.9696 m
218.91917 427.9696 224.62198 427.9696 230.32478 427.9696 c
233.41058 427.9696 236.4964 431.05539 236.4964 434.1412 c
236.4964 437.24802 236.4964 440.35483 236.4964 443.46164 c
236.4964 446.54745 233.41058 449.63324 230.32478 449.63324 c
224.62198 449.63324 218.91917 449.63324 213.21637 449.63324 c
210.13057 449.63324 207.04477 446.54745 207.04477 443.46164 c
207.04477 440.35483 207.04477 437.24802 207.04477 434.1412 c
207.04477 431.05539 210.13057 427.9696 213.21637 427.9696 c
h
213.21637 427.9696 m
S
0 i
217.91862 442.80142 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
196.79747 445.13446 m
(")s
225.45372 445.02423 m
(#)s
0.60000002 i
0.8256827 0.8256827 0.8256827 sc
CM
78.619789 47.404732 m
84.322594 47.404732 90.025398 47.404732 95.72821 47.404732 c
98.814011 47.404732 101.89981 44.318928 101.89981 41.233128 c
101.89981 38.126312 101.89981 35.019497 101.89981 31.912683 c
101.89981 28.826881 98.814011 25.741079 95.72821 25.741079 c
90.025398 25.741079 84.322594 25.741079 78.619789 25.741079 c
75.533989 25.741079 72.448189 28.826881 72.448189 31.912683 c
72.448189 35.019497 72.448189 38.126312 72.448189 41.233128 c
72.448189 44.318928 75.533989 47.404732 78.619789 47.404732 c
h
78.619789 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
242.43892 428.10095 m
248.14172 428.10095 253.84453 428.10095 259.54733 428.10095 c
262.63312 428.10095 265.71893 431.18677 265.71893 434.27258 c
265.71893 437.37939 265.71893 440.48621 265.71893 443.59302 c
265.71893 446.6788 262.63312 449.76462 259.54733 449.76462 c
253.84453 449.76462 248.14172 449.76462 242.43892 449.76462 c
239.35312 449.76462 236.2673 446.6788 236.2673 443.59302 c
236.2673 440.48621 236.2673 437.37939 236.2673 434.27258 c
236.2673 431.18677 239.35312 428.10095 242.43892 428.10095 c
h
242.43892 428.10095 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
247.14117 442.9328 m
(!)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
108.28287 47.404732 m
113.98567 47.404732 119.68848 47.404732 125.39129 47.404732 c
128.47708 47.404732 131.5629 44.318928 131.5629 41.233128 c
131.5629 38.126312 131.5629 35.019497 131.5629 31.912683 c
131.5629 28.826881 128.47708 25.741079 125.39129 25.741079 c
119.68848 25.741079 113.98567 25.741079 108.28287 25.741079 c
105.19707 25.741079 102.11127 28.826881 102.11127 31.912683 c
102.11127 35.019497 102.11127 38.126312 102.11127 41.233128 c
102.11127 44.318928 105.19707 47.404732 108.28287 47.404732 c
h
108.28287 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
272.10199 428.10095 m
277.80481 428.10095 283.5076 428.10095 289.21042 428.10095 c
292.2962 428.10095 295.38202 431.18677 295.38202 434.27258 c
295.38202 437.37939 295.38202 440.48621 295.38202 443.59302 c
295.38202 446.6788 292.2962 449.76462 289.21042 449.76462 c
283.5076 449.76462 277.80481 449.76462 272.10199 449.76462 c
269.0162 449.76462 265.93039 446.6788 265.93039 443.59302 c
265.93039 440.48621 265.93039 437.37939 265.93039 434.27258 c
265.93039 431.18677 269.0162 428.10095 272.10199 428.10095 c
h
272.10199 428.10095 m
S
0 i
276.80426 442.9328 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
255.88597 445.13446 m
(")s
284.54221 445.02423 m
(#)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
137.02246 47.696793 m
142.72527 47.696793 148.42807 47.696793 154.13089 47.696793 c
157.21669 47.696793 160.30249 44.610992 160.30249 41.525188 c
160.30249 38.418373 160.30249 35.311562 160.30249 32.204746 c
160.30249 29.118944 157.21669 26.03314 154.13089 26.03314 c
148.42807 26.03314 142.72527 26.03314 137.02246 26.03314 c
133.93666 26.03314 130.85086 29.118944 130.85086 32.204746 c
130.85086 35.311562 130.85086 38.418373 130.85086 41.525188 c
130.85086 44.610992 133.93666 47.696793 137.02246 47.696793 c
h
137.02246 47.696793 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
300.84158 427.8089 m
306.5444 427.8089 312.24719 427.8089 317.95001 427.8089 c
321.0358 427.8089 324.12161 430.89471 324.12161 433.9805 c
324.12161 437.08731 324.12161 440.19415 324.12161 443.30096 c
324.12161 446.38675 321.0358 449.47256 317.95001 449.47256 c
312.24719 449.47256 306.5444 449.47256 300.84158 449.47256 c
297.7558 449.47256 294.66998 446.38675 294.66998 443.30096 c
294.66998 440.19415 294.66998 437.08731 294.66998 433.9805 c
294.66998 430.89471 297.7558 427.8089 300.84158 427.8089 c
h
300.84158 427.8089 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
305.54385 442.64072 m
(!)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
166.43626 47.536106 m
172.13907 47.536106 177.84187 47.536106 183.54468 47.536106 c
186.63049 47.536106 189.71629 44.450306 189.71629 41.364502 c
189.71629 38.257687 189.71629 35.150875 189.71629 32.04406 c
189.71629 28.958256 186.63049 25.872454 183.54468 25.872454 c
177.84187 25.872454 172.13907 25.872454 166.43626 25.872454 c
163.35046 25.872454 160.26466 28.958256 160.26466 32.04406 c
160.26466 35.150875 160.26466 38.257687 160.26466 41.364502 c
160.26466 44.450306 163.35046 47.536106 166.43626 47.536106 c
h
166.43626 47.536106 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
330.2554 427.9696 m
335.95819 427.9696 341.66101 427.9696 347.3638 427.9696 c
350.44962 427.9696 353.5354 431.05539 353.5354 434.1412 c
353.5354 437.24802 353.5354 440.35483 353.5354 443.46164 c
353.5354 446.54745 350.44962 449.63324 347.3638 449.63324 c
341.66101 449.63324 335.95819 449.63324 330.2554 449.63324 c
327.16959 449.63324 324.0838 446.54745 324.0838 443.46164 c
324.0838 440.35483 324.0838 437.24802 324.0838 434.1412 c
324.0838 431.05539 327.16959 427.9696 330.2554 427.9696 c
h
330.2554 427.9696 m
S
0 i
334.95764 442.80142 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
313.83649 445.13446 m
(")s
342.49274 445.02423 m
(#)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
195.41147 47.404732 m
201.11427 47.404732 206.81708 47.404732 212.51988 47.404732 c
215.60568 47.404732 218.6915 44.318928 218.6915 41.233128 c
218.6915 38.126312 218.6915 35.019497 218.6915 31.912683 c
218.6915 28.826881 215.60568 25.741079 212.51988 25.741079 c
206.81708 25.741079 201.11427 25.741079 195.41147 25.741079 c
192.32567 25.741079 189.23987 28.826881 189.23987 31.912683 c
189.23987 35.019497 189.23987 38.126312 189.23987 41.233128 c
189.23987 44.318928 192.32567 47.404732 195.41147 47.404732 c
h
195.41147 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
359.23059 428.10095 m
364.93341 428.10095 370.6362 428.10095 376.33902 428.10095 c
379.4248 428.10095 382.51062 431.18677 382.51062 434.27258 c
382.51062 437.37939 382.51062 440.48621 382.51062 443.59302 c
382.51062 446.6788 379.4248 449.76462 376.33902 449.76462 c
370.6362 449.76462 364.93341 449.76462 359.23059 449.76462 c
356.14481 449.76462 353.05899 446.6788 353.05899 443.59302 c
353.05899 440.48621 353.05899 437.37939 353.05899 434.27258 c
353.05899 431.18677 356.14481 428.10095 359.23059 428.10095 c
h
359.23059 428.10095 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
363.93286 442.9328 m
(!)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
225.07455 47.404732 m
230.77736 47.404732 236.48016 47.404732 242.18297 47.404732 c
245.26877 47.404732 248.35457 44.318928 248.35457 41.233128 c
248.35457 38.126312 248.35457 35.019497 248.35457 31.912683 c
248.35457 28.826881 245.26877 25.741079 242.18297 25.741079 c
236.48016 25.741079 230.77736 25.741079 225.07455 25.741079 c
221.98874 25.741079 218.90294 28.826881 218.90294 31.912683 c
218.90294 35.019497 218.90294 38.126312 218.90294 41.233128 c
218.90294 44.318928 221.98874 47.404732 225.07455 47.404732 c
h
225.07455 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
388.89368 428.10095 m
394.59647 428.10095 400.29929 428.10095 406.00208 428.10095 c
409.08789 428.10095 412.17371 431.18677 412.17371 434.27258 c
412.17371 437.37939 412.17371 440.48621 412.17371 443.59302 c
412.17371 446.6788 409.08789 449.76462 406.00208 449.76462 c
400.29929 449.76462 394.59647 449.76462 388.89368 449.76462 c
385.80786 449.76462 382.72208 446.6788 382.72208 443.59302 c
382.72208 440.48621 382.72208 437.37939 382.72208 434.27258 c
382.72208 431.18677 385.80786 428.10095 388.89368 428.10095 c
h
388.89368 428.10095 m
S
0 i
393.59592 442.9328 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
372.67764 445.13446 m
(")s
401.33389 445.02423 m
(#)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
278.22205 47.696793 m
283.92484 47.696793 289.62766 47.696793 295.33047 47.696793 c
298.41626 47.696793 301.50208 44.610992 301.50208 41.525188 c
301.50208 38.418373 301.50208 35.311562 301.50208 32.204746 c
301.50208 29.118944 298.41626 26.03314 295.33047 26.03314 c
289.62766 26.03314 283.92484 26.03314 278.22205 26.03314 c
275.13623 26.03314 272.05045 29.118944 272.05045 32.204746 c
272.05045 35.311562 272.05045 38.418373 272.05045 41.525188 c
272.05045 44.610992 275.13623 47.696793 278.22205 47.696793 c
h
278.22205 47.696793 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
442.04117 427.8089 m
447.74399 427.8089 453.44678 427.8089 459.1496 427.8089 c
462.23538 427.8089 465.3212 430.89471 465.3212 433.9805 c
465.3212 437.08731 465.3212 440.19415 465.3212 443.30096 c
465.3212 446.38675 462.23538 449.47256 459.1496 449.47256 c
453.44678 449.47256 447.74399 449.47256 442.04117 449.47256 c
438.95535 449.47256 435.86957 446.38675 435.86957 443.30096 c
435.86957 440.19415 435.86957 437.08731 435.86957 433.9805 c
435.86957 430.89471 438.95535 427.8089 442.04117 427.8089 c
h
442.04117 427.8089 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
446.74341 442.64072 m
(!)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
307.63583 47.536106 m
313.33865 47.536106 319.04144 47.536106 324.74426 47.536106 c
327.83008 47.536106 330.91586 44.450306 330.91586 41.364502 c
330.91586 38.257687 330.91586 35.150875 330.91586 32.04406 c
330.91586 28.958256 327.83008 25.872454 324.74426 25.872454 c
319.04144 25.872454 313.33865 25.872454 307.63583 25.872454 c
304.55005 25.872454 301.46423 28.958256 301.46423 32.04406 c
301.46423 35.150875 301.46423 38.257687 301.46423 41.364502 c
301.46423 44.450306 304.55005 47.536106 307.63583 47.536106 c
h
307.63583 47.536106 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
471.45496 427.9696 m
477.15778 427.9696 482.8606 427.9696 488.56339 427.9696 c
491.6492 427.9696 494.73499 431.05539 494.73499 434.1412 c
494.73499 437.24802 494.73499 440.35483 494.73499 443.46164 c
494.73499 446.54745 491.6492 449.63324 488.56339 449.63324 c
482.8606 449.63324 477.15778 449.63324 471.45496 449.63324 c
468.36917 449.63324 465.28336 446.54745 465.28336 443.46164 c
465.28336 440.35483 465.28336 437.24802 465.28336 434.1412 c
465.28336 431.05539 468.36917 427.9696 471.45496 427.9696 c
h
471.45496 427.9696 m
S
0 i
476.15723 442.80142 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
455.03607 445.13446 m
(")s
483.69232 445.02423 m
(#)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
336.8584 47.404732 m
342.56119 47.404732 348.26401 47.404732 353.9668 47.404732 c
357.05261 47.404732 360.1384 44.318928 360.1384 41.233128 c
360.1384 38.126312 360.1384 35.019497 360.1384 31.912683 c
360.1384 28.826881 357.05261 25.741079 353.9668 25.741079 c
348.26401 25.741079 342.56119 25.741079 336.8584 25.741079 c
333.77258 25.741079 330.6868 28.826881 330.6868 31.912683 c
330.6868 35.019497 330.6868 38.126312 330.6868 41.233128 c
330.6868 44.318928 333.77258 47.404732 336.8584 47.404732 c
h
336.8584 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
500.67752 428.10095 m
506.38031 428.10095 512.08313 428.10095 517.78595 428.10095 c
520.8717 428.10095 523.95752 431.18677 523.95752 434.27258 c
523.95752 437.37939 523.95752 440.48621 523.95752 443.59302 c
523.95752 446.6788 520.8717 449.76462 517.78595 449.76462 c
512.08313 449.76462 506.38031 449.76462 500.67752 449.76462 c
497.59171 449.76462 494.50592 446.6788 494.50592 443.59302 c
494.50592 440.48621 494.50592 437.37939 494.50592 434.27258 c
494.50592 431.18677 497.59171 428.10095 500.67752 428.10095 c
h
500.67752 428.10095 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
505.37976 442.9328 m
(!)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
366.52145 47.404732 m
372.22427 47.404732 377.92709 47.404732 383.62988 47.404732 c
386.7157 47.404732 389.80148 44.318928 389.80148 41.233128 c
389.80148 38.126312 389.80148 35.019497 389.80148 31.912683 c
389.80148 28.826881 386.7157 25.741079 383.62988 25.741079 c
377.92709 25.741079 372.22427 25.741079 366.52145 25.741079 c
363.43567 25.741079 360.34985 28.826881 360.34985 31.912683 c
360.34985 35.019497 360.34985 38.126312 360.34985 41.233128 c
360.34985 44.318928 363.43567 47.404732 366.52145 47.404732 c
h
366.52145 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
530.34058 428.10095 m
536.0434 428.10095 541.74622 428.10095 547.44904 428.10095 c
550.53479 428.10095 553.62061 431.18677 553.62061 434.27258 c
553.62061 437.37939 553.62061 440.48621 553.62061 443.59302 c
553.62061 446.6788 550.53479 449.76462 547.44904 449.76462 c
541.74622 449.76462 536.0434 449.76462 530.34058 449.76462 c
527.25476 449.76462 524.16901 446.6788 524.16901 443.59302 c
524.16901 440.48621 524.16901 437.37939 524.16901 434.27258 c
524.16901 431.18677 527.25476 428.10095 530.34058 428.10095 c
h
530.34058 428.10095 m
S
0 i
535.04285 442.9328 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
514.12457 445.13446 m
(")s
542.78082 445.02423 m
(#)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
395.26108 47.696793 m
400.96387 47.696793 406.66669 47.696793 412.36948 47.696793 c
415.45529 47.696793 418.54108 44.610992 418.54108 41.525188 c
418.54108 38.418373 418.54108 35.311562 418.54108 32.204746 c
418.54108 29.118944 415.45529 26.03314 412.36948 26.03314 c
406.66669 26.03314 400.96387 26.03314 395.26108 26.03314 c
392.17526 26.03314 389.08945 29.118944 389.08945 32.204746 c
389.08945 35.311562 389.08945 38.418373 389.08945 41.525188 c
389.08945 44.610992 392.17526 47.696793 395.26108 47.696793 c
h
395.26108 47.696793 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
559.0802 427.8089 m
564.78302 427.8089 570.48578 427.8089 576.1886 427.8089 c
579.27441 427.8089 582.36023 430.89471 582.36023 433.9805 c
582.36023 437.08731 582.36023 440.19415 582.36023 443.30096 c
582.36023 446.38675 579.27441 449.47256 576.1886 449.47256 c
570.48578 449.47256 564.78302 449.47256 559.0802 449.47256 c
555.99438 449.47256 552.90857 446.38675 552.90857 443.30096 c
552.90857 440.19415 552.90857 437.08731 552.90857 433.9805 c
552.90857 430.89471 555.99438 427.8089 559.0802 427.8089 c
h
559.0802 427.8089 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
563.78247 442.64072 m
(!)s
0.60000002 i
0.71364659 0.71377099 0.71363878 sc
CM
424.67487 47.536106 m
430.37769 47.536106 436.08047 47.536106 441.78329 47.536106 c
444.86908 47.536106 447.9549 44.450306 447.9549 41.364502 c
447.9549 38.257687 447.9549 35.150875 447.9549 32.04406 c
447.9549 28.958256 444.86908 25.872454 441.78329 25.872454 c
436.08047 25.872454 430.37769 25.872454 424.67487 25.872454 c
421.58905 25.872454 418.50327 28.958256 418.50327 32.04406 c
418.50327 35.150875 418.50327 38.257687 418.50327 41.364502 c
418.50327 44.450306 421.58905 47.536106 424.67487 47.536106 c
h
424.67487 47.536106 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
588.49402 427.9696 m
594.19678 427.9696 599.8996 427.9696 605.60242 427.9696 c
608.68823 427.9696 611.77399 431.05539 611.77399 434.1412 c
611.77399 437.24802 611.77399 440.35483 611.77399 443.46164 c
611.77399 446.54745 608.68823 449.63324 605.60242 449.63324 c
599.8996 449.63324 594.19678 449.63324 588.49402 449.63324 c
585.4082 449.63324 582.32239 446.54745 582.32239 443.46164 c
582.32239 440.35483 582.32239 437.24802 582.32239 434.1412 c
582.32239 431.05539 585.4082 427.9696 588.49402 427.9696 c
h
588.49402 427.9696 m
S
0 i
593.19623 442.80142 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
572.07507 445.13446 m
(")s
600.73132 445.02423 m
(#)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
453.65005 47.404732 m
459.35287 47.404732 465.05566 47.404732 470.75848 47.404732 c
473.8443 47.404732 476.93008 44.318928 476.93008 41.233128 c
476.93008 38.126312 476.93008 35.019497 476.93008 31.912683 c
476.93008 28.826881 473.8443 25.741079 470.75848 25.741079 c
465.05566 25.741079 459.35287 25.741079 453.65005 25.741079 c
450.56427 25.741079 447.47845 28.826881 447.47845 31.912683 c
447.47845 35.019497 447.47845 38.126312 447.47845 41.233128 c
447.47845 44.318928 450.56427 47.404732 453.65005 47.404732 c
h
453.65005 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
617.46918 428.10095 m
623.172 428.10095 628.87482 428.10095 634.57764 428.10095 c
637.66339 428.10095 640.74921 431.18677 640.74921 434.27258 c
640.74921 437.37939 640.74921 440.48621 640.74921 443.59302 c
640.74921 446.6788 637.66339 449.76462 634.57764 449.76462 c
628.87482 449.76462 623.172 449.76462 617.46918 449.76462 c
614.38336 449.76462 611.29761 446.6788 611.29761 443.59302 c
611.29761 440.48621 611.29761 437.37939 611.29761 434.27258 c
611.29761 431.18677 614.38336 428.10095 617.46918 428.10095 c
h
617.46918 428.10095 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
622.17145 442.9328 m
(!)s
0.60000002 i
0.85872978 0.8588776 0.85872042 sc
CM
483.31314 47.404732 m
489.01596 47.404732 494.71875 47.404732 500.42157 47.404732 c
503.50735 47.404732 506.59317 44.318928 506.59317 41.233128 c
506.59317 38.126312 506.59317 35.019497 506.59317 31.912683 c
506.59317 28.826881 503.50735 25.741079 500.42157 25.741079 c
494.71875 25.741079 489.01596 25.741079 483.31314 25.741079 c
480.22736 25.741079 477.14154 28.826881 477.14154 31.912683 c
477.14154 35.019497 477.14154 38.126312 477.14154 41.233128 c
477.14154 44.318928 480.22736 47.404732 483.31314 47.404732 c
h
483.31314 47.404732 m
f
0 0 0 sc
1 0 0 -1 -163.81912 475.50571 cm
647.13226 428.10095 m
652.83508 428.10095 658.5379 428.10095 664.24066 428.10095 c
667.32648 428.10095 670.41229 431.18677 670.41229 434.27258 c
670.41229 437.37939 670.41229 440.48621 670.41229 443.59302 c
670.41229 446.6788 667.32648 449.76462 664.24066 449.76462 c
658.5379 449.76462 652.83508 449.76462 647.13226 449.76462 c
644.04645 449.76462 640.96069 446.6788 640.96069 443.59302 c
640.96069 440.48621 640.96069 437.37939 640.96069 434.27258 c
640.96069 431.18677 644.04645 428.10095 647.13226 428.10095 c
h
647.13226 428.10095 m
S
0 i
651.83453 442.9328 m
(!)s
/F1.1[ 9 0 0 -9 0 0]sf
630.91626 445.13446 m
(")s
659.57251 445.02423 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
197.11873 414.2963 m
($%)[ 8.666016 0.000000 ] xS
256.20721 414.2963 m
($%)[ 8.666016 0.000000 ] xS
315.29572 414.2963 m
($%)[ 8.666016 0.000000 ] xS
374.38422 414.2963 m
($%)[ 8.666016 0.000000 ] xS
455.35733 414.2963 m
($%)[ 8.666016 0.000000 ] xS
514.4458 414.2963 m
($%)[ 8.666016 0.000000 ] xS
573.5343 414.2963 m
($%)[ 8.666016 0.000000 ] xS
632.6228 414.2963 m
($%)[ 8.666016 0.000000 ] xS
/F1.1[ 9 0 0 -9 0 0]sf
213.60568 417.87967 m
(")s
272.43155 416.25552 m
(#)s
331.57095 417.70956 m
(&)s
390.55362 418.77643 m
(')s
471.77496 416.73798 m
(\()s
649.85498 417.12158 m
(\))s
590.86664 418.53497 m
(*)s
531.66541 415.59244 m
(+)s
/F1.1[ 12 0 0 -12 0 0]sf
287.17371 468.24454 m
(,-./0")[ 8.003906 6.000000 3.333984 6.673828 3.333984 0.000000 ] xS
536.65845 468.24454 m
(,-./0#)[ 8.003906 6.000000 3.333984 6.673828 3.333984 0.000000 ] xS
ep
end
%%Trailer
%%EOF
