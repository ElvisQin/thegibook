%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2333a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 525 242
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 525 242
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: APZQJN+Helvetica
%!FontType1-1.0: APZQJN+Helvetica 1.0000.0.0000
14 dict begin/FontName /APZQJN+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /two put
dup 34 /zero put
dup 35 /three put
dup 36 /six put
dup 37 /eight put
dup 38 /one put
dup 39 /four put
dup 40 /G put
dup 41 /P put
dup 42 /U put
dup 43 /five put
dup 44 /seven put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 14 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/seven 8 def
/eight 9 def
/G 10 def
/P 11 def
/U 12 def
/u20B8 13 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B0B7175CE49F0688B3F79EA3DBC898217EC91EE332F98D08B0D78E002610AC5858EAF625BF5D8B8D686ACAA7B013D7B906553D9D4F98B4DB515F739CF39A140529DCA5E96D750F1BC12C78084F282A5D85B51585D7E05277E434DE3D6167B9E90C48FFF277230D5C272D6FEB2F776FC5E0D08B1DB1A26354CCE209E9577903412ECA528A1529EABE6F88E2FE9BAB762993EE03D9050420EEF161A239A3BBB3C557F5F05C0ED9A59CBC136CE9BF7329A88EAD4CF8E09888A4364585242AE8D7E19FC93BE09AF2AAAF255023700D91E8FA68750F872499809A5F15816E76B1E771F9D31DCD0E9EF09AB679461EB694F0BC1A3DB219A7810B19D7EDF312F8932E911BC68BF9692BF0958EC486D36337C31E26F69E9B04539977AED1D329D899822E1660F462F4179420B6560320825287475926EE51351FF17780CC3F00EAEE3FC20531F14F44284608569B89AB0D786FC71EE12C42D1CEDD890C1CDA511BA5452CBBD0BEEFB2AC6C5225E850B6A192DBE69A7ECEEEC3C07C9BAF76A6E969531B7C17E0EB989F4F5326183BA1E6068AAD99F68F1A1A321FE56B2105BAA1109B7077B18B6673BC33236C933F137EC58435869F46026CB233AE4C457653E820B9B36497683090FBF2573E5F9802BDB4F97E05B11A21B08C295F1BFE22BFC8474E18198F7CA06B10831682E3037E98142639962E490CE3F84821E305CEA24D820D4C63ADB9204413987D20FE0542EF9F4F92F4BBB6EF1CF53EE8D4D1727FBF7F5986F4


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/APZQJN+Helvetica cguidfix
/F1.1/APZQJN+Helvetica renmfont
%RBIBeginFontSubset: FBRPGN+PingFangSC-Regular
%!FontType1-1.0: AAAAAB+PingFangHK-Regular 001.003%%CreationDate: 10/5/16% Copyright 2016 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAB+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid1622 putdup 2 /cid1742 putdup 3 /cid1760 putdup 4 /cid2562 putdup 5 /cid2620 putdup 6 /cid2819 putdup 7 /cid3028 putdup 8 /cid5330 putdup 9 /cid5766 putdup 10 /cid6535 putdup 11 /cid6781 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6E411C301CD88C978752A46D7F2BFEE446BD1FD8FDB07587963A4F528E9F27024CEC47C4147994ACC5349CA2D6C610E9F518692BED62E0FCE274E772DFDEF6A97592B16D4B84BC5AC7F9F779C53B43C4BB017B438E62BD147104ED5FB7B9E9122CD55343023EAECEC48D294B3D4A21225D3C166E79090883DED39EDF65E4D778E4A29F1F8207F386B8FAF9F7402147953CD6CCE382A7A34EDAC4B6353F4FA727FEA427FA3B47D140C4246E85BA709906CEC7944F2F350DFABBA28B8FF9CDA84FDFAF95A84E4D712CD2B7A2DA1D661B247BEFBE65307CBA692AA262A15C2BCF265295B142FBA262EB2C414E43589C53FB519A339F1B743F4082ECB6F867BE3BC42F853808AC28779F097D3DB92E6C11AC26A3E60560BE3AE8E334952E942DF9826E0CB8E3E351CA49294A804634C804ADE564E86D703CCD155615534D5B281A78DFC5AB87AEA278466C65BEBF616E967FB7A4385F20FE5F2AC3423D6EDC25EFB64AC513E67BD8B8157117E380CBAA9DBDA264C3371C10F33FAA47C0209472F391D1BCFAE30388380927E5F28FB61560551E2DD8004E32B13F9B6FF8FBFAB454B39B77CA9F3BB68D26F77B7128F9A41D4655907FE97529BC962B3B5315BE9BA50C475ECF8574E033760E8417E1724D6FA555F8FFD580CAB29549EA7DCD96A63DC9591B4B8EBB45B3736A03CB014621D299C0E54BEFF7E3AF2ECB068315D1B67D213AE0EBA2EC2EF8C34D48C87BC9C735DEF9A20A170F9964F1D9A88CD7EF6601097118E971A8D59034719AC90D51442ED5399739CA5227C5698E0ACE30EC3F4850E4BCB7BCF4D413F18D26498DB9E3D2D43F02ECAFDB077FA862D1940DFB1BEA148040833E9A6A077277193BCB3A1B0094F1E75B382862667914ADA028DC09C845258F17C32BE811B2E1BA7120745757EF92EF4E2F2752F19DEA70348F4653069374B7CF03C470B3231EF931DC41980F2C43DCBE994A84617B93F230C35468B7119CD389B80F0AB5BC389133137EABD1D56878BEBE3C45C82575DA2F180B06833DF2BFAFB7596D6F79595F269EBA3E6AF547802122AC7A601A6BF46D57B576239F70504939CB3B1FDFB3CF12C1157050372939520AD329A9B76B23C6D1C271E506428E99E4D1F1E9DBEEFA6800BBD78C5C7DD0A6D6AD3455BDE569BA4B74DAA2F0A502B1B5770A44F5AE970D67F34C6953FC30ED4393C9E9D9A23BAF38AC6AB07CA4EA0BD4C48D9088328D50ECC1EE7C7A6BA651B67CFFFDD2163960264EBE084FBE641E98B9139A2F68DFCD9069ECD0FCC6F43CAFFDBAD6DE4ED36492CAA320B3F118087DF862F45781F8BE31CDFC0DFB5D8C1477BCC825DAB527C80B0C0FBD8733874A9F0778D1DF408FD2C2A7046E0857236B7A2E11F49D0F53A5B6C91A5690F686E98AE1DEB60701BC47F44BBD7877D6A8CE8E76088617F88F26E27604D7013C0575FCEB165327389E75400FF4F04225DBDD0F803EC7CAA9FD960C84E6ACB29D1BD938AAB6A6672F8E65390BBEB2D29FA0F57AA1ABDE356746D5F337CDBF27B46AD3D396E073673AF11175406F13811BD1AC3B4C15B104C42E45A564ADF4ACBBCBC3DD5EC257185A09EB5994F9A0987D0F2F09C1DF6D822865784870617E842F19CB789CB3CF2D2D35F127C3780ECEB74E6AF54BAEBDF5EC94D1ED5F58710EAFD6F4B41E643D2414569EDE07587E83E22207DC2E40A06C728A9FDF8B1D29B866D45DB4C33BF1DC1085AC584E636DC962C1B1650D32903DE0C597C7B84E1B33D91EA98AF38C3707591E9DF699ACE949444F9E63A3241306BDBB98CAD46D0B9E90388A7EC9DDE1A690A8C1CE1ACA79496FE064A515C641E9818724ED023897DDB7FF90ABDA2C177B0F8AA8B69E3CB911309E092FF2263C6BF4ACE1EAA13331CD9BCC179307B6E6025576444FCAD42B87BE747E13A4D12D9DDFD37F52982387858B9B3285346E740121AD15E7D2A6BFEF70A2C85569FE40DF307CC9B10780429B0AD8EB522D6ADA73B9A5F4CBFA5AF2DED352B3C0A723AA043051973634C125636993E68562E8D38460606AAE3DBFF518D56F93A9C2F4341BA2799C1DE93A5624AC7EE200A4F3E45AB621180A6D6C67EFC77858F7ABD37A4CFA5CB748ED5DC7EB4DA9B209E2684CD6871662C38ED27CF12592193114C780330BA43DF114823A5D7EFAED566E4A53871004D9D790A9B82D0EF9F5AA730B62D868BA31F441C16A0D51CAA4791732AB08504B32EE765DE3185259B793C8E7AFE35224A1854D33A13F94569C23BD1B2E2A6E7536071315E30967C34BCE2BF5D59315C58B39A137214693DBD65655BA3DD528C7D27011143888F5FAAF50CC478952CD6D5686BE3257BD5589959963CF4670029CF3015613C30007ECCFE6664D90CB51E1A4DD6DE2E9283EA3659E47BC98C9FD94125ECCB7C784C0D9B5CA18F02B7BA79A84F7732F72A748BAF172018798B82D6F94083C5ECC05032B821B377708A4DFDDF9FCBFCD6E883A0D91BEBCF19A23509E33885129F73626043191D01C41FB0BE2853CCFF3DECF3662BBFD8D0B3D9FE789857A17887A0A31192F95BFF508CAE917DAFD801BFF3B09ED789E97A38212F2F018979924B45C66347504915771DA954DDD4DA18E617271DB8AEE90A630783D847B0055868F9764C8734BF9DFE5332262C12D82D58D5220AC0A69E06DB3A2B6DC4B39582E2BB0365781DA40D26E96529220B3F126759ECDA76FA60C2A8342407EA557B59D82D496F018D8E8CA0FEC7231BD4343253E40B337376B48CDBD59011B1E97A4503DA695A7AF1A3868FED6106C2DEE18D2B56D78F42EE4C3004DB41730165C19B510EF1884A2A2EEA6023731673164C6E05767ED1D7B96545899DE7ACA275FECA4C2DF60F002F5F389D46C9F628AFAA55E294D67E62D8BC93520B156761D5489BAA6B90CC3456A7B8C36698FA7AEF946BB75361FF0969881F29C33BD2BF657B90646C67BEC8EF5B1829F3B5A523A4B31D7083214E770DDD449E74BC3B5FC2141D1D4595C22DAC2ED29B1C5F48FF20A9D609536482AC7A545888D72B4FE32597347FFFE6E94296C1363A441EFC88A410A7D626D03CE449BFC3FAB1E71F6F37D5D4B1F369B5524D88A5C5CFCE7F58DAE2C4A8843F050A912F39C88B0CB92C6C15BD020DE6C908984BA38B4142A1A784E46E69CC9817D1BE7702D10DFF9E901394BE36D14EC33AECE09877588FA8D8F1950777E8AC8A370EDC53C71998A8B010BD4F586639DB6FFEBFD45F8867D84204F3CA4EE20813CF78A7C767AEC92D1B306312050944A754D48EBD1DDE29850C93C1E1A4BD8E25C654D77CE0DC0249897B0EC541C66A0437307C5D594C87E89BA81EE6E462B9848B492345C30AE203D160165F3BAC97A39D1ED586DA6359D0EEA369CC7661FB8BBE5647843DE585544EFB497B47267A25DE9C14F1FC5E1712252F3A489236798A7E17657508532EA7D06D42B0D74B0463CAF3F6FC3A84C64F2A51B82B08BAD8560A1554C82294AC17E7D581D601BBA263F950153D914D3EEB1993F7128A76768CACDD3B1375FA9A776ECF3E09207D53FD0847295D5B09EB9752CBD8220CC8BD89C4DD04ED6FB6C9CA6334A356FE07AAF9BD2D66EA237C8DDF64A1D1A454DC4BD3CF962386922ED1F46B6D348EFABE793CFC3807D2AB26808B9B7920C8776ACCE695B812238E015C21DF53BFFD12EBBDEE66C4E78EBE95E76559FA885FC8C9F8B028409F670AFBF04F1E0512EF197BD7AA747C2A8C814E89F469510318CA08340E79F9FD292D2170B295B2448775E1911D9A73BD39C5C428B12A0D4E814A0B206340A48F12FD79B4CE8E84047812C9561BDB227D9C0F6F94AC40A31220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: FBRPGN+PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /FBRPGN+PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid1622 putdup 34 /cid2562 putdup 35 /cid2819 putdup 36 /cid2620 putdup 37 /cid6535 putdup 38 /cid5330 putdup 39 /cid5766 putdup 40 /cid1742 putdup 41 /cid3028 putdup 42 /cid6781 putdup 43 /cid1760 putreadonly def/$SubFontArray [/AAAAAB+PingFangHK-Regular findfont ] def/CharProcs 13 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid1622 {(\001) 0 $SP} putdup /cid1742 {(\002) 0 $SP} putdup /cid1760 {(\003) 0 $SP} putdup /cid2562 {(\004) 0 $SP} putdup /cid2620 {(\005) 0 $SP} putdup /cid2819 {(\006) 0 $SP} putdup /cid3028 {(\007) 0 $SP} putdup /cid5330 {(\010) 0 $SP} putdup /cid5766 {(\011) 0 $SP} putdup /cid6535 {(\012) 0 $SP} putdup /cid6781 {(\013) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/FBRPGN+PingFangSC-Regular cguidfix
/F2.1/FBRPGN+PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 524.0802 241.70129 rc
1 0 0 -1 -217.12468 594.00403 cm
241.40343 406.7222 m
740.7049 406.7222 l
S
241.40343 460.46359 m
740.7049 460.46359 l
S
241.40343 511.31943 m
740.7049 511.31943 l
S
241.40343 565.06085 m
740.7049 565.06085 l
S
241.49094 379.72308 m
241.49094 574.55609 l
S
2 w
1 0.53051901 0.24705882 sc
242.78476 552.92786 m
246.54169 551.55469 l
S
250.29861 550.18158 m
254.05554 548.80847 l
S
257.81247 547.4353 m
261.5694 546.06219 l
S
265.32632 544.68909 m
269.08325 543.31592 l
S
272.84018 541.94281 m
276.59711 540.5697 l
S
280.35406 539.19653 m
284.11099 537.82343 l
S
287.86792 536.45032 m
291.62485 535.07715 l
S
295.38177 533.70404 m
299.1387 532.33093 l
S
302.89563 530.95776 m
306.65256 529.58466 l
S
310.40948 528.21155 m
314.16641 526.83838 l
S
317.92334 525.46527 m
321.68027 524.09216 l
S
325.43719 522.71899 m
329.19412 521.34589 l
S
332.95105 519.97278 m
336.70798 518.59961 l
S
340.46494 517.2265 m
344.22186 515.85339 l
S
347.97879 514.48022 m
351.73572 513.10712 l
S
355.49265 511.73398 m
359.24957 510.36087 l
S
363.0065 508.98773 m
366.76343 507.61459 l
S
370.52036 506.24149 m
374.27728 504.86835 l
S
378.03421 503.49521 m
381.79114 502.1221 l
S
385.54807 500.74896 m
389.30499 499.37582 l
S
393.06192 498.00272 m
396.81885 496.62958 l
S
400.57581 495.25644 m
404.33273 493.88333 l
S
408.08966 492.51019 m
411.84659 491.13705 l
S
415.60352 489.76395 m
419.36044 488.39081 l
S
423.11737 487.01767 m
426.8743 485.64456 l
S
430.63123 484.27142 m
434.38815 482.89828 l
S
438.14508 481.52515 m
441.90201 480.15204 l
S
445.65894 478.7789 m
449.41586 477.40576 l
S
453.17279 476.03265 m
456.92972 474.65952 l
S
460.68668 473.28638 m
464.4436 471.91327 l
S
468.20053 470.54013 m
471.95746 469.16699 l
S
475.71439 467.79388 m
479.47131 466.42075 l
S
483.22824 465.04761 m
486.98517 463.6745 l
S
490.7421 462.30136 m
494.49902 460.92822 l
S
498.25595 459.55511 m
502.01288 458.18198 l
S
505.76981 456.80884 m
509.52673 455.43573 l
S
513.28369 454.06259 m
517.04059 452.68945 l
S
520.79755 451.31635 m
524.55444 449.94321 l
S
528.3114 448.57007 m
532.0683 447.19696 l
S
535.82526 445.82382 m
539.58215 444.45068 l
S
543.33911 443.07758 m
547.09601 441.70444 l
S
550.85297 440.3313 m
554.60992 438.95819 l
S
558.36682 437.58505 m
562.12378 436.21191 l
S
565.88068 434.83881 m
569.63763 433.46567 l
S
573.39453 432.09253 m
577.15149 430.71942 l
S
580.90839 429.34628 m
584.66534 427.97314 l
S
588.42224 426.60004 m
592.1792 425.2269 l
S
595.9361 423.85376 m
599.69305 422.48065 l
S
603.44995 421.10751 m
607.20691 419.73438 l
S
610.96381 418.36127 m
614.72076 416.98813 l
S
618.47772 415.61499 m
622.23462 414.24188 l
S
625.99158 412.86874 m
629.74847 411.49561 l
S
633.50543 410.1225 m
637.26233 408.74936 l
S
641.01929 407.37622 m
644.77618 406.00311 l
S
648.53314 404.62997 m
652.29004 403.25684 l
S
656.047 401.88373 m
659.80389 400.51059 l
S
663.56085 399.13745 m
667.31775 397.76431 l
S
671.07471 396.3912 m
674.83167 395.01807 l
S
678.58856 393.64493 m
682.34552 392.27182 l
S
686.10242 390.89868 m
689.85938 389.52554 l
S
693.61627 388.15244 m
697.37323 386.7793 l
S
701.13013 385.40616 m
701.71759 385.19147 l
S
0 0.23529412 1 sc
244.40643 560.76941 m
248.31241 559.90723 l
S
252.21838 559.04504 m
256.12436 558.18292 l
S
260.03036 557.32074 m
263.93634 556.45862 l
S
267.84232 555.59644 m
271.74829 554.73431 l
S
275.65427 553.87213 m
279.56024 553.00995 l
S
283.46625 552.14783 m
287.37222 551.28564 l
S
291.2782 550.42352 m
295.18417 549.56134 l
S
299.09015 548.69916 m
302.99612 547.83704 l
S
306.90213 546.97485 m
310.80811 546.11273 l
S
314.71408 545.25055 m
318.62006 544.38843 l
S
322.52603 543.52625 m
326.43201 542.66406 l
S
330.33801 541.80194 m
334.24399 540.93976 l
S
338.14996 540.07764 m
342.05594 539.21545 l
S
345.96191 538.35327 m
349.86792 537.49115 l
S
353.7739 536.62897 m
357.67987 535.76685 l
S
361.58585 534.90466 m
365.49182 534.04254 l
S
369.3978 533.18036 m
373.3038 532.31818 l
S
377.20978 531.45605 m
381.11575 530.59387 l
S
385.02173 529.73175 m
388.9277 528.86957 l
S
392.83368 528.00745 m
396.73969 527.14526 l
S
400.64566 526.28308 m
404.55164 525.42096 l
S
408.45761 524.55878 m
412.36359 523.69666 l
S
416.26959 522.83447 m
420.17557 521.97229 l
S
424.08154 521.11017 m
427.98752 520.24799 l
S
431.89349 519.38586 m
435.79947 518.52368 l
S
439.70547 517.66156 m
443.61145 516.79938 l
S
447.51743 515.93719 m
451.4234 515.07507 l
S
455.32938 514.21289 m
459.23535 513.35077 l
S
463.14136 512.48859 m
467.04733 511.62643 l
S
470.95331 510.76428 m
474.85928 509.90213 l
S
478.76526 509.03995 m
482.67126 508.1778 l
S
486.57724 507.31564 m
490.48322 506.45349 l
S
494.38919 505.59134 m
498.29517 504.72919 l
S
502.20114 503.86703 m
506.10715 503.00485 l
S
510.01312 502.1427 m
513.91907 501.28055 l
S
517.82507 500.4184 m
521.73108 499.55624 l
S
525.63702 498.69409 m
529.54303 497.83191 l
S
533.44897 496.96976 m
537.35498 496.1076 l
S
541.26099 495.24545 m
545.16693 494.3833 l
S
549.07294 493.52115 m
552.97888 492.65897 l
S
556.88489 491.79681 m
560.79089 490.93466 l
S
564.69684 490.07251 m
568.60284 489.21036 l
S
572.50879 488.34821 m
576.41479 487.48602 l
S
580.32074 486.62387 m
584.22675 485.76172 l
S
588.13275 484.89957 m
592.0387 484.03741 l
S
595.9447 483.17526 m
599.85065 482.31308 l
S
603.75665 481.45093 m
607.66266 480.58878 l
S
611.5686 479.72662 m
615.47461 478.86447 l
S
619.38055 478.00232 m
623.28656 477.14014 l
S
627.19257 476.27798 m
631.09851 475.41583 l
S
635.00452 474.55368 m
638.91046 473.69153 l
S
642.81647 472.82938 m
646.72241 471.96722 l
S
650.62842 471.10504 m
654.53442 470.24289 l
S
658.44037 469.38074 m
662.34637 468.51859 l
S
666.25232 467.65643 m
670.15833 466.79428 l
S
674.06433 465.9321 m
677.97028 465.06995 l
S
681.87628 464.20779 m
685.78223 463.34564 l
S
1 0.53051901 0.24705882 sc
241.88322 561.95306 m
283.87814 543.92163 l
333.67731 510.67844 l
477.40451 457.16968 l
570.19208 439.48898 l
701.13934 387.68713 l
S
0 0.23529412 1 sc
243.23688 564.41797 m
283.99249 562.50018 l
376.452 520.44843 l
468.01001 497.44653 l
642.51678 485.59891 l
689.82947 463.75903 l
S
0 0 0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
230.28481 590.00403 m
(!""#)[ 6.673828 6.673828 6.673828 0.000000 ] xS
345.70685 590.00403 m
(!""$)[ 6.673828 6.673828 6.673828 0.000000 ] xS
464.08914 590.00403 m
(!""%)[ 6.673828 6.673828 6.673828 0.000000 ] xS
585.28229 590.00403 m
(!"&&)[ 6.673828 6.673828 5.789062 0.000000 ] xS
703.5152 590.00403 m
(!"&')[ 6.673828 6.673828 6.673828 0.000000 ] xS
1 w
0.60000002 i
361.134 566.38135 m
361.134 573.74023 l
S
479.44162 566.38135 m
479.44162 573.74023 l
S
597.74921 566.38135 m
597.74921 573.74023 l
S
716.05682 566.38135 m
716.05682 573.74023 l
S
[
4
4
] 0 d
262.19086 402.58054 m
379.64471 402.58054 l
379.64471 439.58426 l
262.19086 439.58426 l
h
262.19086 402.58054 m
S
2 w
[] 0 d
0 0.23529412 1 sc
289.97766 428.56036 m
271.62195 428.56036 l
S
1 0.3764706 0 sc
289.80249 415.60895 m
271.44678 415.60895 l
S
0 0 0 sc
0 i
295.80341 432.03629 m
(\(\)*)[ 9.333984 8.003906 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
321.80731 432.03629 m
(!"#$)[ 12.000000 12.000000 12.000000 0.000000 ] xS
1 w
0.60000002 i
241.40343 537.46552 m
740.7049 537.46552 l
S
241.40343 486.60965 m
740.7049 486.60965 l
S
241.40343 435.04709 m
740.7049 435.04709 l
S
241.40343 380.57611 m
740.7049 380.57611 l
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
222.12468 568.92633 m
(")s
222.12468 542.58777 m
(&)s
222.12468 516.24915 m
(!)s
222.12468 489.91058 m
(#)s
222.12468 463.57199 m
(')s
222.12468 437.2334 m
(+)s
222.12468 410.89484 m
($)s
222.12468 384.55624 m
(,)s
295.80341 418.96326 m
(\(\)*)[ 9.333984 8.003906 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
321.80731 418.96326 m
(%&'\()[ 12.000000 12.000000 12.000000 0.000000 ] xS
/F1.1[ 9 0 0 -9 0 0]sf
228.21536 564.1015 m
(!)s
228.21536 537.76294 m
(!)s
228.21536 511.42435 m
(!)s
228.21536 485.08578 m
(!)s
228.21536 458.74719 m
(!)s
228.21536 432.4086 m
(!)s
228.21536 406.07004 m
(!)s
228.21536 379.73145 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
442.08636 365.30273 m
(\(\)*)[ 9.333984 8.003906 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
468.09027 365.30273 m
(\)'*+)[ 12.000000 12.000000 12.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
