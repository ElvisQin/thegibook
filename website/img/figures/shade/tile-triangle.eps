%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 479 161
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 479 161
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KBDWSJ+TimesNewRomanPSMT
%!FontType1-1.0: KBDWSJ+TimesNewRomanPSMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /KBDWSJ+TimesNewRomanPSMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /parenleft put
dup 34 /a put
dup 35 /parenright put
dup 36 /space put
dup 37 /b put
dup 38 /c put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1164 1 index div -628 2 index div 4096 3 index div 2062 5 -1 roll div]cvx def
/sfnts [<







0239003C0000003B003B007D00BE02BB03DD050C0667069306AA000000010000000A00F2003C009D000700020010002F0056000005E204EB00050002B9005403ECB3032A1F3F411503E4006003E9009F03E500DF03E50004001003E4001003E5003F03E5007003E400FF03E40005FFC003E1B345453240B803E1B32B2E3240B803E1B2282932B9FFC003E1B21A1C32BD03E102AC0027001FFFC003DFB2161B32B9FFC003DEB2424232B9FFC003DEB2363832B9FFC003DEB32A2D32DF410A03DE00EF03DE000203DE03DF0028001FFFC003DFB3282E32F0410D03DF0001037E000F0101001F00A003DD00B003DD0002004003DAB32426329FBF03CC000103CA03C90064001FFFC003C9B20D1132410A03C703B70012001F03B603B50064001FFFC003B5B30E1132004173038D000100C0038D00D0038D00E0038D00F0038D0004006F03A7007F03A7008F03A700AF03A70004000F03A7001F03A7002F03A7004F03A7000403AB03AB00EF03A50001000F03A5002F03A5006F03A5008F03A50004005403AA0001006B03AA000103A8036A0022001F038C03940015001F038B03930015001F03A40393001A001F03A20394001E001F03A10393001E001F039F0394001E001F039B0394001A001F039A0393001E001F039903940016001F039803940016001F03970393001B001F03960394001B001F03950393001B001F03760375001A001F03740375001A001F03A00373B21E1F10411E03930020039300300393000300200394003003940040039400030000039400010383036C001E001F03B1036C0032001F036D036C0032001FFFC0037DB2212332B9FFC0037DB3171932A0410A037D00B0037D00C0037D00D0037D0004FFC0037CB2212332B9FFC0037CB3171932A0412D037C00B0037C00C0037C00D0037C000400300373004003730002000003730010037300200373000300E0037300F00373000200B0037300C0037300D003730003008403730090037300A0037300030377036A0029001F0389036AB2281F40B80367B33940323FBB0366000100400366B3191D328FBB0366000100400366B3090A3240B80366B3090E3240B80366B3090F323FBB0365000100400365B3090C3240B80365B31A1D3240B80365B3090E326B410E0363007B036300020014036300240363003403630044036300040363B2242F1FBA034E006D0800400E1F7F027F037F047F050430440112BF033200500800001F0012032D003C080040291F5F3C01376009700980090310092009300940095009056F037F038F03031F032F033F034F035F0305B8FFC0B2073A33B8FFC04047063A33900BA00BB00BC00BD00B05B006C006D006E006F0060520063006400650066006700680069006A006099006900702600B700B800B03100B200B300B400B500B051F0701A04185



00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/a 4 def
/b 5 def
/c 6 def
/i 7 def
/acute 8 def
/glyph3379 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1164 -628 4096 2062}def
/UniqueID 4291674 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA0D9B4A24FA5ACDC1FD41F12AFFBAE7A3DBDDC319F35270FF36565A1289F8937C19B5ACE5BE7001E5194837A27A42E44AD9559003984FF40701411A3AA3D52529122075CCE9BA9C6842C6A1BBA296F0AB09AFAEF93A90272FB4BEB6F3C4C0F327EDA4DDA5ECDEAC23AEEE2A6CCA5D819AB3BE2C6A9C2A9D0F7C577FB288784F1513700BDC3E48AE10998E8D38F0269D76A907A8898D11167455FA74BEB2397594274458A2E01513A364FD9C19C739990A19BFFBA4543A251FE6BABAC0E24F51918ADB3D639F87E772417C164CE6187DBD0D3AE469F0814A2E219BDA9488A3296AEFC463998BA2A709B4D84743E64BD754C4D851708C930953F505BF6B6E7B44E318F20B366967F391F87FA2CAD6D71D30AEBB6211C8110273D08DEDAEE27AAD58B61DF41F8D202D2ECA1FEA06685148A46FF1D193286AC4A5B42025C2E7CFC824BF925EF042F1AE5EE165E91817B4EF719469F3CA4F62E3AEB47C19BF78B4901B1080EEC22FC619F6E3722F321D3AB2A321FA7F80D04A2B6089A3191E759B40946D4FA31256DC2AA6894636CA0974426F4F3F505FAFED04EC56150DA13C8275F56D05501D0F09B764C5EDFECFE13208681BB5DDC2321663B7BFCEA18FE870D774182BE22B99D367127F19B3C971F96CDC041709CCC428D3B26CF6F84A8B83500AD3B96EE653BD2C8B31A5975B1ABD3E5B56B812DA6296E81696264CD7848951B501CC170374CC584F01CD5461C9788841F566030E6DDBBEC0BABA471DC677094F0BD93DF277AB159FCD34EFECBE5C6D68B69B9
269899EC6C6CEC235E259BFBFED2D79D93F0AF3D5A18CBB7FEE5794F4205F8EF74EE85E3C11701F80A329181DF8AC373EDE2D79D5085401A29527F04CDD696A57ECCECDF2DDAEC16E102B278FCDCEAFE755AE0A5FFEF43C8972FDA6FA1CDD2D2CDFA9F8FFA6DB6A87ADF5FCF6AD9833A4980EF38EF7655B5FE728EF67AA21AB52AAFE59F8A1A5B8FB9B39B62DCDBB436CEA8C766B92D63AB73FD0376E53B7A49CFA5DA4555700C7EABCF01723EE1830C6AA73873564CA412FFE0691F5CA4C71517747B79A544EC6879F4D5AA5AA95DF7D6B10CA442632471153EFF807B8691B9A530FD8695E2708F1819C8B6999DE288A45C64106A209EDAFADB4B1E6382C0EDC022E8782C4DD3B956B5DECFAF78C16A66174C4C3FBF12439EF0D69808E145D05DE191A9B5FAA69E0E40A31FE2D04154430F440D739C1C754FAD9EDC8328F6E048805DE3810474B060774553E5456DBDB37D8704252430636B59A47ABBEAC74DB1A63DA1670753FD02227F35BCF3B7AB563FB90CE2ABBEF6A2067769C8F51DB38510E7A0E0CFF778A6D316BC35823F9AE3ED70390D2BEBD8595C01DC81146991E0A8AE284B5D0C67229AB42F33C86FE44FFF61C129C2C66E422B936DCD7D57A1BA52F62A8FF891CBBD2A9131060D7FA6407404D31B7BDFA7E2098A38E48E236181D7EB73C48A5928DBBFD7F8CCCFE0C1B987AD2BFAD4C3F62EAC24B9A7D24962CDCBC2B6CB6ABDA94482114F567ED4F999A8AB230A8CC76AA41FBA353DB132C8AA1A8509D7D37D081A08E677734F9528D29AA92EBEEF2C4928E403A6B9AE72A106B501B43101562EC91CF7205DD438A9C684AE44D7E2ADD691A9013C4AF797DCBD988AD0792C9C096C46B789F39D61D0237F2B2936D1AD3CE15BBB7AAFAC87651BA3307E1D15B4C8250332DCC739A20872DF9BA91CB54736F242C648FA11463E66E939EFA01632A59929ED7B030DA80E9FE9AC7765ADFC727EEBB977D89B8CD6C952AAE4BAA9795F9EC8EE0BC5DC75FC0E9219103D25FE6EF9A3906C743AEC92F2312B1313589F25DDAEA34D13AF9069132DAE14B902B56EA551EE4E0A2A6AE856E560F51822B98188340A25049188D12E745BCC063BBFB45D91CE39F66F07CD257B7D8C6A8FCCAA3EBAE7EF33178D700A1E4FB511CBE05F493E5117DEDD496275CB60BFDB59CD6CACC5436DFBF406855E252246ABFE706F7C426370A300840B22B3DF2A032F5FC606C25468C38CE234BC07A6375A0836CABBA08FC8624464FFACD521685B80184849B027C7410CD67DD692DFF1D5EE6F23E554ECC8BE0EC15D530EBA2CBACB09734D0A2B3BA9973153E750DB1794
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KBDWSJ+TimesNewRomanPSMT cguidfix
/F1.1/KBDWSJ+TimesNewRomanPSMT renmfont
%RBIBeginFontSubset: PDNUGI+STSong
%!FontType1-1.0: PDNUGI+STSong 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /PDNUGI+STSong def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /gid1127 put
dup 34 /gid2144 put
dup 35 /gid2255 put
dup 36 /gid1527 put
dup 37 /gid2158 put
dup 38 /gid993 put
dup 39 /gid2508 put
dup 40 /gid1122 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -95 1 index div -200 2 index div 1004 3 index div 936 5 -1 roll div]cvx def
/sfnts [<

441D101702CB097FA00793680591281B1C2128A801035507072103BA204407FCF037481B111A12392A0363450D020607A6D05D4C3F1E0E090F4A15030705359A5E1C111B1E1C5A224207072218535E74B9E601F81452FA502722051824150E171734011B49D2E3560D69DEB70B27042A77482D04090413514731390609C21932292A1B3D4E26FD011128060407091B342F15723207031F9A01350B2203313206090516FEE62F42141E00000000060032FF550375030A00420048004C0050005400590000010711140E0122272E0127371632363D012315141F01140E012234363D01230E0107273E033D010607273E01371716140E01073337171614070E010733371716142521060717330535231523352307053523152335230607036F2010360A03082B440453360DFF020209220B03F40E4B57082D3B220C4E500B66BF334307192024F22142080E295231F31E4406FEF4FEFC3B3B27EC011DFF2FE2030213FF2FE6050601D51AFE142B262108191E150D0F0C0EBB93231A2B0909120E3D3D9769873F092C5C717C5CB7513D0D62EB58250305051A2B253A080601034B3D30310405A4463D17A791919191A48E8E8E5E300000030018FF5303D00305003A003F006200000526070623222E0127230E0107273E013723220727163B01363723220727163B0136271716140F01140733371716140F0115333717161423211217033523060F01050E02222F01371123220727163B013534271716140F011533371716142B01113703CF421D0303088A54132112C7C805C7A10FA0271C1C3019B90A0136271C1C30194C01014F0A091B028F213D0B091B2E2A370B0FFEC14FFEC9A5040BA6FEEC1D2312070720AE51221B1A2B1766044D080B174B2636090EA2AF59052704739575ADCC320C50B39C0B25046B920B26045F7E2505070613385B312E08080612EF39390C0AFEE22C0160FD807D7F710C14190B3434015F0A24049F3F4B290407070EE035390909FEAF3500050028FF5603C102FE000A003C0041004D005A000001161406070E01072736370316142B0115141F011406232234363D01230E0107273E013723220727163B01362723220727163321371716142B0111333707112314072516140706070E01072736371316140706070E0107273E0137038D0622095474590B8F8CD1070C9C020229040903A9055B7B0A694E0252271C1C30196804013E271C1C30190197263D080BA23C2792A306028E070B1B0B628C5E09B59258060B1A0B8CD2720694D46102D1050A030751613C0D74B3FE6D0709B56B2C47110F1A8D59B3E2B2510B56B7CD0B2504C8580B2504373D0808FEE0383801207AA667060902050B6B803A0E93D3FEB5050803040B998A231045B38D00040021FF5E03BC02F8003500510063006E0000011614232106073337171614

00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/gid993 1 def
/gid1122 2 def
/gid1127 3 def
/gid1527 4 def
/gid2144 5 def
/gid2158 6 def
/gid2255 7 def
/gid2508 8 def
/gid42949 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-95 -200 1004 936}def
/UniqueID 4448078 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B4F1C51BADFF3495C2924BE71970B75EDF2A199B50F98194813A33F0031D51718A2986D6930DDFD3A550FD4304408ECE6B4B660B4E996E58B5F510EACF6CD8AC4B25DCB8073B0D03227FE57895D56689E5BD4DC39825AD14C38A6F9EB6E47D6E4C2EC391D9306F750B2959B5D6AA5C8DEAA494075F136327B09405041C7B57E3FCD2361B698AA3CC8C50A558762013A9666445099ED4477BFA3784C63CC6038BF0F29B978ACCDE254CF38D90F941EF32762B48BD68ECB37334276FF66170EFCE2CB12B2BCD011DCD81EAFF7B9B6823788033611E5838EB91F0CA86B85AF398DDDC0E572D2AB6CFC314C4E11F0574F0C31DC2C2DC95AF8D486CCCA3A4C82F601F8E797CEA89CA7D77983F62CDFB66429580B42696DCD98A16FBDF0F7AAB1870A43FD1E4D733641744DD3302A68D122EF21EA011B63608A963E4B086DCB5369AA12F5008F3549C07619A118849005B5899F3E93092894A7C0F5E63044926E094D0BE3F9254C82BB7B8B1A200CA7E7AD103BE1A94661405B8C1C41A7874213416FDD005115253C5372BA5A4B70F54375674B4231679CDD9F8FA5BF53589B8C9ED0B55A5C9BD8685D90A4A90FB06126E72EF2CEE1CD7F1B4C71060F0A2B06431B776BF04928FB462DF01A120FDEBD87FE767018F7F410FA26CA773C554322063BFF4A70F038956ECCBDEB89A3798DC1E87F25B2CF4DCA3C409E074923C847A4DC89BF99388A5DB5CAE24AF981338C17CDF847DDACD74EA5792B3AB56A9F8B8985B55

5912DCF48BFC10F674BF14EA7C1C9F3A08970B934C53089705CB6483883DB023203D31EA830A85C2A91328434678D8567DA7414AE16B67E5E04E119480ED75BF4FCD1F6CD554EFB26C5CB2B26FCAD7D1A2F2DDEB5C5008C8246D45A24F565287E0C9F40F2EC020BDB5FD9062360AF387D06F5D07FC71346C9AC667D18D2C719A5A328B621AEA35E0348479979EE28DCF7B85ADA5A20CEFF03E184C7C32F74AFE36BADFA5AF937796F52591F8AAE5D57D4BBC30584059B5A55B348B5451580A021D1DD93FFD9765699F1E2AA1242C8355D662F4290C582139E50E6CA6F8C4A69535E583BDE5ACF56CB530FC12705AE5E35128438B6E7F70BF53B7D8DEC05F513C38924832F40EAF6D86459F18BADEB3BB3D32E79E0CC5C6A4EBA4CA078446671DA6017013B79AF849BCB283E99C425AA7E205576282014BD8DAA58E88622C76539E5EE6265B282D400F7A9957CFF96B6482C362D2D8D2495EE4EB685DEEBB1F8B43FC91EED15343E3C3FEBC2E49884A89278E76C8024794D6AE5BF2D2A6C4C7E5528F3A7B9C77941A81B539C6B81B1318A19A530332802ECEE31BD0FDA493F6AD3FD37361AB0826C470F8F2557F9BF39BB2A3E5D4ABA411843708B0EC4260989AAB5A175454E908F67B29991AEF2D36174B40BBC7991304FB33D22F553546B0276DB8F003A07381E190797A4247EA2950458FE258C684A5F175328A49E7760D7EBC747D0B2C8D07AAF2D79FCD84BCFF365EA99098FCBDCF55B972DD996DAAD8AB76221A1AC02B454223C06009D9033F4CF8EB4C37B700A64CD57C6D6E217DED922369654D790ABBAAF347F404114EE31D419DF62F52BF8A9B252AF786FB8B72F0F9A16DE01B92EE7F6AE121874BAA2CA82339E8274548E55DE478944EAF8ECBD273EC910FA0861B69B5C532337F5DCE7076145776518405BB6B22038A31ACD0077BFCF6CFA7AEFC436ACC71C5BF2B86FC630D8F963BF3404E2264E7003C7C55F0367C3F17CF9AA71D84913301F1F25C3C10ADC8A0094073BCCA9B4DDF801B3DC068197980164C7E8EA6F44214B4E548F4110B28B340180FDBC1A037F99F7AB50163B2A72678A4A84E36DDF17549E14E00AA4D7A3E3ED9B24BB51197D68DBF93560D327BB109E3E6AB780AE50FD49140278198542D8B5D9F399A113ACD0FD62E9B09ACEBEB805E885435E4D56BE61548A7AE1D40F2AD3B6EBE2B6D9AD612743957098CDBF9EAA304ED2F8AC7C4A7372E54D3AF68BA9A3FBEB2ADCC4734E265B3546BCD31E48DC6368932B10E8FFA2D50B23352DA40385CB3EF741B720C776EFF8C255D08196A9C9ED4C882591EDCF300A2662501E4B41CFCA466D02F04B1EE7EDB0980B3AFF39E2284F8B026A808871EC7C95180B59689A39E82C27B3CEACF673688E670E8349CC605267F663EE0B6332A75D71EBBAA953DC4DB5192ECB84873C6
0AE5433022E37BB041D7432ED8B77D343695804472F7708A61BFEEBE825FBF6E535EFA03B5F8C4E0B416E2253AE1BE119C5A42055E367683E5DA2384A98750B70AC1C7D496F77152682183990DBE8394DD0E42101BC86A1C34658052BA9388C46B9C0475A288A8609ED98E1C663B794270D365A2A8AC4B1AB0A24FD411A4AAB14FF14671370252C5FC5F317BCA59B304E97FD3E23A47AE103B7F4B2475AD87694D41575F2B799BFFC70ECD7529A92EF58E7C69EB20C1DE5F2E864A81C0AF98C1FD905F9EE6D503F04083D0F9EFE876057405B523173BB35FCCE0DD4A2BF2030EE6244F64ED5F73A5C48E904D05EEE44714DDEB770B42BF6E1707019136F9D567C1B30EE6CF22D0B85CECBCC36BAF3F98DC09AB2FFB47A31C11E87EE2D5E0E2FF0BB48BCDAC95B8A57B0F06E2E075BA35D932EEA7395CAD20083CB49E0B19A6D0D184C6C6DA01F5F3170CA34BF45CAD02E93FFFF8F537809438F3DEDA387BD002DD575B0DE5E80AB512F7213349E9233D2806503560217EF0752442FB126F436CC80F5D50FE5F88CAA4281354E7C05CE84C1B332A2B3AC6708347D072869FBF5AE10847DB01A912D076D31CCA966207953E987884227924BA2D6D45B44EC1CD89E4FE9A055D9A6E4B4543CB1596F79456E2AFD63BE52ECF719BCB421A35CB9AE9D6995EB90481BAFDB3872AC9B6C2EA3B5ECCBA4B5312D77C2483E9FDC18DD3951FE29ABCB249D6B91D73C2911F48A09DEB4EE19D45DD34D783FE822B54BD4A4E6D4B2E844D259E4D42508D027B609CC2BAAC12BFC59AA998AFDD9712F95A0D4EAE7268DC5831C41029FEE841203B82DF6E8342973B04D653350FC833953CDD7BF6B0A552A01FC964DE93F3F0D7012A47BF2F6100891B4E81798BECDDB96DA14990A32F98B673035F46DA874DEA32322C11567AD221D346295F5480479D59C818E0A4F13C2CAA0D85652A5D90A65A4E6CEB03D9E0325461AD5D45ED6A7332B8539849EF0EC098C430B0EF04CE216B8C77E44C804D514136F1FDF127439C8DB07B3B282415FFFF6A7BA3175E01A86DFE12F77E67736AFAB5BC78C66EE055A3980E1BF0444AEA1A79C7D036C1AD48283C18AD981DB3E6D7CCD1A91BE46F78DAE6168E949580646E0B2A894D01A638FFDC361F7DDEB36EBE8E6C3CC70572C3ABCD36280B7BE651B4F0A0C815F34E6CAF52305FEAA9D28DBF859AAF8F1D7738FB3E4139FA277CFB6477893C460AFE0A6D3A51198086EE42850974FC9760771588ADE9570B362E1DBBB40BF5975B008977F27C8506D33B1EF5F1FFD339BDCE2F543A97EB5838BA92769BFC4791EB204CDD1EE2D8B568814AC28BD9EFD03927D2B231902245E01B80A09CF007AC63AE0E73248C7FB8CC5144D3C91DD9D2F3FA1B37DF39BBBF761A52C638C6D5C0FEFADC202613C15D277BA1CDBD0A1B26EDA0AE9D2C8E
3044C23C7BFBB9C85490859797EAE4291CA0A301BF10C1D3568FF5BD1A11F409EE0ACFF8DDB220676E4A44BBE281E7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/PDNUGI+STSong cguidfix
/F2.1/PDNUGI+STSong renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
1 0 0.35294119 sc
q
0 0 478.66354 160.97968 rc
1 0 0 -1 -259.50507 344.51602 cm
644.84833 227.2229 m
664.21667 288.06616 l
724.49066 212.54521 l
h
644.84833 227.2229 m
S
0 0 0 sc
624.83221 195.04759 m
737.66858 195.04759 l
737.66858 307.884 l
624.83221 307.884 l
h
624.83221 195.04759 m
S
470.0997 234.7226 m
538.14227 234.7226 l
538.14227 302.76517 l
470.0997 302.76517 l
h
470.0997 234.7226 m
S
291.56219 195.04759 m
404.39859 195.04759 l
404.39859 307.884 l
291.56219 307.884 l
h
291.56219 195.04759 m
S
1 0 0.35294119 sc
411.46594 309.61044 m
615.70892 307.73572 l
493.05057 184.5533 l
h
411.46594 309.61044 m
S
328.32452 185.45589 m
260.96524 299.99884 l
456.43073 184.29588 l
h
328.32452 185.45589 m
S
0 0 0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
316.92606 337.67642 m
(!"#$)[ 3.996094 5.326172 3.996094 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
333.24442 337.67642 m
(!"#$)[ 12.000000 12.000000 12.000000 0.000000 ] xS
/F1.1[ 12 0 0 -12 0 0]sf
482.29117 337.67642 m
(!%#$)[ 3.996094 6.000000 3.996094 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
499.28336 337.67642 m
(%&")[ 12.000000 12.000000 0.000000 ] xS
/F1.1[ 12 0 0 -12 0 0]sf
644.95868 337.67642 m
(!&#$)[ 3.996094 5.326172 3.996094 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
661.27704 337.67642 m
(!"#'\()[ 12.000000 12.000000 12.000000 12.000000 0.000000 ] xS
0.60000002 i
0.14117648 0 1 sc
657.13684 228.28525 m
657.13763 226.84705 656.85168 225.40947 656.30054 224.08104 c
655.75092 222.75201 654.93658 221.53329 653.91907 220.51689 c
652.90265 219.49936 651.68396 218.68504 650.35492 218.13539 c
649.02649 217.58429 647.58893 217.29834 646.1507 217.29913 c
644.71252 217.29834 643.2749 217.58429 641.94647 218.13539 c
640.61749 218.68504 639.39874 219.49936 638.38232 220.51689 c
637.36481 221.53329 636.55048 222.75201 636.00085 224.08104 c
635.44977 225.40947 635.16382 226.84705 635.16461 228.28525 c
635.16382 229.72345 635.44977 231.16103 636.00085 232.48946 c
636.55048 233.8185 637.36481 235.03722 638.38232 236.05362 c
639.39874 237.07114 640.61749 237.88547 641.94647 238.4351 c
643.2749 238.98622 644.71252 239.27217 646.1507 239.27138 c
647.58893 239.27217 649.02649 238.98622 650.35492 238.4351 c
651.68396 237.88547 652.90265 237.07114 653.91907 236.05362 c
654.93658 235.03722 655.75092 233.8185 656.30054 232.48946 c
656.85168 231.16103 657.13763 229.72345 657.13684 228.28525 c
h
657.13684 228.28525 m
S
673.00684 287.79776 m
673.00763 286.35956 672.72168 284.92197 672.17053 283.59354 c
671.62091 282.2645 670.80658 281.04581 669.78906 280.02939 c
668.77264 279.01187 667.55396 278.19754 666.22491 277.64789 c
664.89648 277.09677 663.45892 276.81082 662.02069 276.81161 c
660.58252 276.81082 659.1449 277.09677 657.81653 277.64789 c
656.48749 278.19754 655.26874 279.01187 654.25232 280.02939 c
653.2348 281.04581 652.42047 282.2645 651.87085 283.59354 c
651.31976 284.92197 651.03381 286.35956 651.03461 287.79776 c
651.03381 289.23596 651.31976 290.67352 651.87085 292.00195 c
652.42047 293.33099 653.2348 294.54971 654.25232 295.5661 c
655.26874 296.58365 656.48749 297.39795 657.81653 297.9476 c
659.1449 298.49872 660.58252 298.78467 662.02069 298.78387 c
663.45892 298.78467 664.89648 298.49872 666.22491 297.9476 c
667.55396 297.39795 668.77264 296.58365 669.78906 295.5661 c
670.80658 294.54971 671.62091 293.33099 672.17053 292.00195 c
672.72168 290.67352 673.00763 289.23596 673.00684 287.79776 c
h
673.00684 287.79776 m
S
732.51935 212.41525 m
732.52014 210.97705 732.23419 209.53947 731.68304 208.21104 c
731.13342 206.882 730.31909 205.6633 729.30157 204.6469 c
728.28516 203.62936 727.06647 202.81503 725.73743 202.2654 c
724.409 201.71428 722.97144 201.42833 721.5332 201.42912 c
720.09497 201.42833 718.65741 201.71428 717.32898 202.2654 c
715.99994 202.81503 714.78125 203.62936 713.76483 204.6469 c
712.74731 205.6633 711.93298 206.882 711.38336 208.21104 c
710.83221 209.53947 710.54626 210.97705 710.54706 212.41525 c
710.54626 213.85345 710.83221 215.29103 711.38336 216.61946 c
711.93298 217.94849 712.74731 219.16721 713.76483 220.18361 c
714.78125 221.20114 715.99994 222.01546 717.32898 222.56511 c
718.65741 223.11621 720.09497 223.40216 721.5332 223.40137 c
722.97144 223.40216 724.409 223.11621 725.73743 222.56511 c
727.06647 222.01546 728.28516 221.20114 729.30157 220.18361 c
730.31909 219.16721 731.13342 217.94849 731.68304 216.61946 c
732.23419 215.29103 732.52014 213.85345 732.51935 212.41525 c
h
732.51935 212.41525 m
S
546.04681 236.22025 m
546.04761 234.78204 545.76166 233.34447 545.21057 232.01604 c
544.66089 230.68701 543.84662 229.46829 542.82904 228.45189 c
541.81268 227.43436 540.59393 226.62004 539.26489 226.0704 c
537.93646 225.51929 536.4989 225.23334 535.06073 225.23413 c
533.6225 225.23334 532.18494 225.51929 530.85651 226.0704 c
529.52747 226.62004 528.30878 227.43436 527.29236 228.45189 c
526.27484 229.46829 525.46051 230.68701 524.91083 232.01604 c
524.35974 233.34447 524.07379 234.78204 524.07458 236.22025 c
524.07379 237.65846 524.35974 239.09604 524.91083 240.42445 c
525.46051 241.75349 526.27484 242.97221 527.29236 243.98862 c
528.30878 245.00613 529.52747 245.82047 530.85651 246.3701 c
532.18494 246.92122 533.6225 247.20717 535.06073 247.20638 c
536.4989 247.20717 537.93646 246.92122 539.26489 246.3701 c
540.59393 245.82047 541.81268 245.00613 542.82904 243.98862 c
543.84662 242.97221 544.66089 241.75349 545.21057 240.42445 c
545.76166 239.09604 546.04761 237.65846 546.04681 236.22025 c
h
546.04681 236.22025 m
S
546.04681 303.66776 m
546.04761 302.22955 545.76166 300.79196 545.21057 299.46353 c
544.66089 298.13452 543.84662 296.9158 542.82904 295.89938 c
541.81268 294.88187 540.59393 294.06754 539.26489 293.51788 c
537.93646 292.9668 536.4989 292.68085 535.06073 292.68164 c
533.6225 292.68085 532.18494 292.9668 530.85651 293.51788 c
529.52747 294.06754 528.30878 294.88187 527.29236 295.89938 c
526.27484 296.9158 525.46051 298.13452 524.91083 299.46353 c
524.35974 300.79196 524.07379 302.22955 524.07458 303.66776 c
524.07379 305.10596 524.35974 306.54352 524.91083 307.87195 c
525.46051 309.20099 526.27484 310.41971 527.29236 311.43613 c
528.30878 312.45364 529.52747 313.26797 530.85651 313.8176 c
532.18494 314.36871 533.6225 314.65466 535.06073 314.65387 c
536.4989 314.65466 537.93646 314.36871 539.26489 313.8176 c
540.59393 313.26797 541.81268 312.45364 542.82904 311.43613 c
543.84662 310.41971 544.66089 309.20099 545.21057 307.87195 c
545.76166 306.54352 546.04761 305.10596 546.04681 303.66776 c
h
546.04681 303.66776 m
S
482.56683 303.66776 m
482.56763 302.22955 482.28168 300.79196 481.73056 299.46353 c
481.18091 298.13452 480.36661 296.9158 479.34906 295.89938 c
478.33267 294.88187 477.11395 294.06754 475.78491 293.51788 c
474.45648 292.9668 473.01892 292.68085 471.58072 292.68164 c
470.14249 292.68085 468.70493 292.9668 467.3765 293.51788 c
466.04745 294.06754 464.82874 294.88187 463.81235 295.89938 c
462.79483 296.9158 461.9805 298.13452 461.43085 299.46353 c
460.87973 300.79196 460.59378 302.22955 460.59457 303.66776 c
460.59378 305.10596 460.87973 306.54352 461.43085 307.87195 c
461.9805 309.20099 462.79483 310.41971 463.81235 311.43613 c
464.82874 312.45364 466.04745 313.26797 467.3765 313.8176 c
468.70493 314.36871 470.14249 314.65466 471.58072 314.65387 c
473.01892 314.65466 474.45648 314.36871 475.78491 313.8176 c
477.11395 313.26797 478.33267 312.45364 479.34906 311.43613 c
480.36661 310.41971 481.18091 309.20099 481.73056 307.87195 c
482.28168 306.54352 482.56763 305.10596 482.56683 303.66776 c
h
482.56683 303.66776 m
S
482.56683 236.22025 m
482.56763 234.78204 482.28168 233.34447 481.73056 232.01604 c
481.18091 230.68701 480.36661 229.46829 479.34906 228.45189 c
478.33267 227.43436 477.11395 226.62004 475.78491 226.0704 c
474.45648 225.51929 473.01892 225.23334 471.58072 225.23413 c
470.14249 225.23334 468.70493 225.51929 467.3765 226.0704 c
466.04745 226.62004 464.82874 227.43436 463.81235 228.45189 c
462.79483 229.46829 461.9805 230.68701 461.43085 232.01604 c
460.87973 233.34447 460.59378 234.78204 460.59457 236.22025 c
460.59378 237.65846 460.87973 239.09604 461.43085 240.42445 c
461.9805 241.75349 462.79483 242.97221 463.81235 243.98862 c
464.82874 245.00613 466.04745 245.82047 467.3765 246.3701 c
468.70493 246.92122 470.14249 247.20717 471.58072 247.20638 c
473.01892 247.20717 474.45648 246.92122 475.78491 246.3701 c
477.11395 245.82047 478.33267 245.00613 479.34906 243.98862 c
480.36661 242.97221 481.18091 241.75349 481.73056 240.42445 c
482.28168 239.09604 482.56763 237.65846 482.56683 236.22025 c
h
482.56683 236.22025 m
S
415.11932 216.38275 m
415.12012 214.94455 414.83417 213.50697 414.28305 212.17854 c
413.73343 210.84952 412.9191 209.6308 411.90158 208.6144 c
410.88516 207.59686 409.66644 206.78255 408.3374 206.23289 c
407.009 205.68178 405.57141 205.39583 404.13321 205.39662 c
402.69501 205.39583 401.25742 205.68178 399.92899 206.23289 c
398.59998 206.78255 397.38126 207.59686 396.36484 208.6144 c
395.34732 209.6308 394.53299 210.84952 393.98334 212.17854 c
393.43225 213.50697 393.1463 214.94455 393.14709 216.38275 c
393.1463 217.82095 393.43225 219.25853 393.98334 220.58696 c
394.53299 221.91599 395.34732 223.1347 396.36484 224.15111 c
397.38126 225.16864 398.59998 225.98296 399.92899 226.53261 c
401.25742 227.08371 402.69501 227.36967 404.13321 227.36887 c
405.57141 227.36967 407.009 227.08371 408.3374 226.53261 c
409.66644 225.98296 410.88516 225.16864 411.90158 224.15111 c
412.9191 223.1347 413.73343 221.91599 414.28305 220.58696 c
414.83417 219.25853 415.12012 217.82095 415.11932 216.38275 c
h
415.11932 216.38275 m
S
331.80182 196.54526 m
331.80261 195.10704 331.51666 193.66946 330.96555 192.34105 c
330.41592 191.01201 329.60159 189.79329 328.58408 188.77689 c
327.56766 187.75937 326.34894 186.94504 325.01993 186.3954 c
323.6915 185.84428 322.25391 185.55833 320.8157 185.55913 c
319.3775 185.55833 317.93991 185.84428 316.61151 186.3954 c
315.28247 186.94504 314.06375 187.75937 313.04733 188.77689 c
312.02982 189.79329 311.21548 191.01201 310.66586 192.34105 c
310.11475 193.66946 309.8288 195.10704 309.82959 196.54526 c
309.8288 197.98346 310.11475 199.42104 310.66586 200.74945 c
311.21548 202.07849 312.02982 203.29721 313.04733 204.31361 c
314.06375 205.33115 315.28247 206.14546 316.61151 206.6951 c
317.93991 207.24622 319.3775 207.53217 320.8157 207.53137 c
322.25391 207.53217 323.6915 207.24622 325.01993 206.6951 c
326.34894 206.14546 327.56766 205.33115 328.58408 204.31361 c
329.60159 203.29721 330.41592 202.07849 330.96555 200.74945 c
331.51666 199.42104 331.80261 197.98346 331.80182 196.54526 c
h
331.80182 196.54526 m
S
300.06183 248.12276 m
300.06262 246.68454 299.77667 245.24696 299.22556 243.91855 c
298.6759 242.58951 297.8616 241.37079 296.84406 240.35439 c
295.82767 239.33687 294.60895 238.52254 293.27991 237.9729 c
291.95148 237.42178 290.51392 237.13583 289.07571 237.13663 c
287.63751 237.13583 286.19992 237.42178 284.87149 237.9729 c
283.54248 238.52254 282.32376 239.33687 281.30734 240.35439 c
280.28983 241.37079 279.47549 242.58951 278.92584 243.91855 c
278.37473 245.24696 278.08878 246.68454 278.08957 248.12276 c
278.08878 249.56096 278.37473 250.99854 278.92584 252.32695 c
279.47549 253.65599 280.28983 254.87471 281.30734 255.89111 c
282.32376 256.90863 283.54248 257.72296 284.87149 258.27261 c
286.19992 258.82373 287.63751 259.10968 289.07571 259.10889 c
290.51392 259.10968 291.95148 258.82373 293.27991 258.27261 c
294.60895 257.72296 295.82767 256.90863 296.84406 255.89111 c
297.8616 254.87471 298.6759 253.65599 299.22556 252.32695 c
299.77667 250.99854 300.06262 249.56096 300.06183 248.12276 c
h
300.06183 248.12276 m
S
300.06183 279.86276 m
300.06262 278.42453 299.77667 276.98697 299.22556 275.65854 c
298.6759 274.3295 297.8616 273.11078 296.84406 272.09439 c
295.82767 271.07687 294.60895 270.26254 293.27991 269.71289 c
291.95148 269.16177 290.51392 268.87582 289.07571 268.87662 c
287.63751 268.87582 286.19992 269.16177 284.87149 269.71289 c
283.54248 270.26254 282.32376 271.07687 281.30734 272.09439 c
280.28983 273.11078 279.47549 274.3295 278.92584 275.65854 c
278.37473 276.98697 278.08878 278.42453 278.08957 279.86276 c
278.08878 281.30096 278.37473 282.73853 278.92584 284.06696 c
279.47549 285.396 280.28983 286.61472 281.30734 287.6311 c
282.32376 288.64865 283.54248 289.46295 284.87149 290.0126 c
286.19992 290.56372 287.63751 290.84967 289.07571 290.84888 c
290.51392 290.84967 291.95148 290.56372 293.27991 290.0126 c
294.60895 289.46295 295.82767 288.64865 296.84406 287.6311 c
297.8616 286.61472 298.6759 285.396 299.22556 284.06696 c
299.77667 282.73853 300.06262 281.30096 300.06183 279.86276 c
h
300.06183 279.86276 m
S
ep
end
%%Trailer
%%EOF
