%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 715 511
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 715 511
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: NWMRDS+Helvetica
%!FontType1-1.0: NWMRDS+Helvetica 1.0000.0.0000
14 dict begin/FontName /NWMRDS+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /one put
dup 35 /parenleft put
dup 36 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<

002A002A002A002A40292A292827262524232221201F1E1D1C1B1A191817161514131211100D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B9400000000A2D2C00B9000040000B2D2C2045B00043617D6818B0004360442D2C45B01A234445B01923442D2C2045B00325456164B050515845441B2121592D2C20B0032552582359212D2C69B04061B0008B0C6423648BB8400062600C642364615C58B0036159B002602D2C45B0112BB0172344B0177AE5182D2C45B0112BB01723442D2C45B0112BB017458CB0172344B0177AE5182D2CB002254661658A46B040608B482D2CB0022546608A46B040618C482D2C4B53205C58B002855958B00185592D2C20B0032545B019236A4445B01A23444565234520B00325606A20B009234223688A6A606120B0005258B21A401A4523614459B0005058B219401945236144592D2CB9187E3B210B2D2CB92D412D410B2D2CB93B21187E0B2D2CB93B21E7830B2D2CB92D41D2C00B2D2CB9187EC4E00B2D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C456920B00943B0022660B00325B005254961B0805358B21940194523616844B21A401A4523606A44B209191A45652345604259B00943608A103A2D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C20B001600110203C003C2D2C20B001610110203C003C2D2C764520B003254523616818236860442D2C7645B00325452361682318456860442D2C7645B0032545616823452361442D2C4569B014B0324B505821B0205961442DB8002B2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8002C2C2020456944B001602DB8002D2CB8002C2A212DB8002E2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8002F2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800302C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800312C2020456944B0016020




00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/zero 3 def
/one 4 def
/u20B8 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec

472537F67B5C4E489794E24B5C8A26443958A9B2279C70E29A0AF1134F9FD4112618999D1151C678297712842A0A3BF45337CFDC949FC034F8C3542122D8F6206DB68C503D9FD9246AB3686FFEC64D456770FEA169E3C80A457CAAAA5737EDE452C9D3F796A40C2DD6802F349249588B8D9FC6A0D7ED0396D6878EF5E9C4ECCEE2FFB3DC427C9C1445B020D0E058154C5A119A73E31B57FCDDA65F8A8BC0D6271CE35075DEDD6AC2A3FB36D5950CA3701084D216C0D6E68DE91F9BF7D865FBCFB1120899C8BF3ED39D08D4961D2D1A1F2E23A671A856F0D54D4B807E1DF3A2EC9B888C7F6E09F3F0BC7073867E441354CC30
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/NWMRDS+Helvetica cguidfix
/F1.1/NWMRDS+Helvetica renmfont
%RBIBeginFontSubset: LVBCCB+Helvetica-Oblique
%!FontType1-1.0: LVBCCB+Helvetica-Oblique 1.0000.0.0000
14 dict begin/FontName /LVBCCB+Helvetica-Oblique def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /b put
dup 34 /a put
dup 35 /x put
dup 36 /f put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1910 1 index div -985 2 index div 3218 3 index div 2331 5 -1 roll div]cvx def
/sfnts [<






6544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A62045694475
00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/a 1 def
/b 2 def
/f 3 def
/x 4 def
/u20B8 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1910 -985 3218 2331}def
/UniqueID 4162838 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C96AC05D8620AE2086072F250ADD3256490B02A185DDD3083C39A0A37A537BC048639785B6E55CAAB044EE668E4A3C4EAFC1FBF3D12464C49CFF3BE3B8621044371ABF5F5343CE290DDD1CB20612234D5FD84AA72CEDD1B22DCC70F6FB94FCD7F73DA6928E1E148FA8A319C902C97695CCBAF9FC6A087B5ED8B3C5DA3248CDAA0F20E53EE3978270F9A630F05B9CD7059FBE7782AB2E27E3606D8EEB58EC460DF9D9FDF383332F9DA4FC3BAFC9264664A1F847A4850E674B07B99E24713CFC17ACA43AFA5EDA7330C7A3A3FE7C5BD47A6F0092AE23CCF08D93767C8C8325D8CF9E4D4370658A04AE361A66752C21FB650F89421CFBAD3F08312F735B4B8A709825F9D08CAAE2C9F8F13D06686F65DF833C38CAF1F4AB1FFE44616195A2ED7231998D4713BA6D20C7CC5823AF20FBC775473C81D3DA78F500E899FFE45A89913713E7B11326FAEF7C5F36023DD3695693831BDAA89DF1CF1946920881D490076D57355B2985909B0D6C90778E950E704875941B412D49F09C0A54FAA895615CB824F55F9E4A1869A4B858C576446B3418D7F9C894169AD0472002479B13527B2B9F259CED2D5A8F3FCA396A39FD68D844AACDD2DB221B529E85E52595F30E119C91C1CA9FDE146943CFD1EB46068CBB19DECC6A6EEC337C3A1EEF36B135433325101F9CE3A3F3A16F715370B336592FB55F65026FD018E8D8DB320D5088A2CCBA475B3E0CC0090E3846248EAFE923EECB87B7A95A774CA0DAB459ECDE74E64C56B7C
10944FC69E03DE07974F0A63AF7B46970E7C137D707757D35A409934264FDE0DD3ABB9FD083D8539BB3ED4148D7E2E835AE492D6BF4E6DA79624880E6A0C23325975832FDA5CA7E749C10F5CFE7B6A1F55035AF6A516ED52D944F3ECEDB9ABCF4CC4609D72EB4372D82B8A578231E9F869025E9586117113605727F03FC74B1C64E2EAB33F185C8A44DA8405472EC76961BA8A47D0C7E8B1CD8B947145B1E988AFC6D3E45B9F075BE041A7ACDD89EB3D3181B78B62E53CED7684A31B89C60590FDC987219810B7C11A32BBD6E6A8F985E3E87348CAED16C53D7354145D55ED6B169AE21A104221A1A28959665012631F8C5A9F28734336EE1F1D1B6872B47527D5C9CD8E151018204A0A9C17AF8AF888A227F9E6F1F57735F2CBF26B1B56D7F184C0CDE9886DCB368D9726170685FBA790DF51B449C83132D6077974ABC93800FA8B074D11202275A3B49A5B0FFCBFC0EFF6DB9C5CD318B14FB5E5B00010132E2F8DB0F4A7BDD16F92E51B9B8C25A45FF9E1DF159C1C952CD417F6FB22CEAAEBA26F0A1045F1E3FF6E00A310BEE3CA25
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/LVBCCB+Helvetica-Oblique cguidfix
/F2.1/LVBCCB+Helvetica-Oblique renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.02834646 w
1 j
4 M
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 714.33081 510.23627 rc
1 0 0 -1 0 510.23627 cm
391.18115 439.37012 m
107.71655 439.37012 l
107.71655 56.692921 l
674.64575 56.692921 l
674.64575 439.37012 l
391.18115 439.37012 l
h
391.18115 439.37012 m
S
1.417323 w
107.71655 439.37012 m
107.71655 453.54337 l
S
107.71655 439.37012 m
93.54332 439.37012 l
S
107.71655 184.25198 m
93.54332 184.25198 l
S
2.834646 w
0 0.60000002 1 sc
107.71655 439.37012 m
277.79532 439.37012 l
S
1 1 1 sc
CM
284.88193 65.196861 m
283.57797 65.196861 282.47247 65.480324 281.33862 66.132294 c
280.20474 66.812607 279.41104 67.606308 278.73074 68.740166 c
278.07877 69.874023 277.79532 70.979538 277.79532 72.28347 c
277.79532 73.58741 278.07877 74.692924 278.73074 75.826782 c
279.41104 76.96064 280.20474 77.754341 281.33862 78.434654 c
282.47247 79.086624 283.57797 79.370087 284.88193 79.370087 c
286.18585 79.370087 287.29138 79.086624 288.42523 78.434654 c
289.55908 77.754341 290.35278 76.96064 291.03311 75.826782 c
291.68506 74.692924 291.96854 73.58741 291.96854 72.28347 c
291.96854 70.979538 291.68506 69.874023 291.03311 68.740166 c
290.35278 67.606308 289.55908 66.812607 288.42523 66.132294 c
287.29138 65.480324 286.18585 65.196861 284.88193 65.196861 c
284.88193 65.196861 l
h
284.88193 65.196861 m
f
0.02834646 w
0 0.60000002 1 sc
1 0 0 -1 0 510.23627 cm
284.88193 445.03943 m
283.57797 445.03943 282.47247 444.75595 281.33862 444.104 c
280.20474 443.42368 279.41104 442.62997 278.73074 441.49612 c
278.07877 440.36224 277.79532 439.25674 277.79532 437.95282 c
277.79532 436.64886 278.07877 435.54337 278.73074 434.40948 c
279.41104 433.27563 280.20474 432.48193 281.33862 431.80164 c
282.47247 431.14966 283.57797 430.86618 284.88193 430.86618 c
286.18585 430.86618 287.29138 431.14966 288.42523 431.80164 c
289.55908 432.48193 290.35278 433.27563 291.03311 434.40948 c
291.68506 435.54337 291.96854 436.64886 291.96854 437.95282 c
291.96854 439.25674 291.68506 440.36224 291.03311 441.49612 c
290.35278 442.62997 289.55908 443.42368 288.42523 444.104 c
287.29138 444.75595 286.18585 445.03943 284.88193 445.03943 c
284.88193 445.03943 l
h
284.88193 445.03943 m
S
1 1 1 sc
CM
497.45203 65.225204 m
496.1481 65.225204 495.04257 65.508667 493.90872 66.160637 c
492.77487 66.84095 491.98117 67.634651 491.30084 68.768509 c
490.64886 69.902367 490.36542 71.007881 490.36542 72.311821 c
490.36542 73.615753 490.64886 74.721268 491.30084 75.855125 c
491.98117 76.988983 492.77487 77.782684 493.90872 78.463005 c
495.04257 79.114967 496.1481 79.398438 497.45203 79.398438 c
498.75595 79.398438 499.86148 79.114967 500.99533 78.463005 c
502.12918 77.782684 502.92288 76.988983 503.60321 75.855125 c
504.25519 74.721268 504.53864 73.615753 504.53864 72.311821 c
504.53864 71.007881 504.25519 69.902367 503.60321 68.768509 c
502.92288 67.634651 502.12918 66.84095 500.99533 66.160637 c
499.86148 65.508667 498.75595 65.225204 497.45203 65.225204 c
497.45203 65.225204 l
h
497.45203 65.225204 m
f
0 0.60000002 1 sc
1 0 0 -1 0 510.23627 cm
497.45203 445.01108 m
496.1481 445.01108 495.04257 444.7276 493.90872 444.07565 c
492.77487 443.39532 491.98117 442.60162 491.30084 441.46777 c
490.64886 440.33392 490.36542 439.22839 490.36542 437.92447 c
490.36542 436.62051 490.64886 435.51501 491.30084 434.38116 c
491.98117 433.24728 492.77487 432.45358 493.90872 431.77328 c
495.04257 431.12131 496.1481 430.83786 497.45203 430.83786 c
498.75595 430.83786 499.86148 431.12131 500.99533 431.77328 c
502.12918 432.45358 502.92288 433.24728 503.60321 434.38116 c
504.25519 435.51501 504.53864 436.62051 504.53864 437.92447 c
504.53864 439.22839 504.25519 440.33392 503.60321 441.46777 c
502.92288 442.60162 502.12918 443.39532 500.99533 444.07565 c
499.86148 444.7276 498.75595 445.01108 497.45203 445.01108 c
497.45203 445.01108 l
h
497.45203 445.01108 m
S
CM
284.85358 320.34335 m
283.54965 320.34335 282.44412 320.6268 281.31027 321.27878 c
280.17642 321.95911 279.38272 322.75281 278.70239 323.88666 c
278.05042 325.02051 277.76697 326.12601 277.76697 327.42996 c
277.76697 328.73389 278.05042 329.83942 278.70239 330.97327 c
279.38272 332.10712 280.17642 332.90082 281.31027 333.58115 c
282.44412 334.23312 283.54965 334.51657 284.85358 334.51657 c
286.1575 334.51657 287.26303 334.23312 288.39688 333.58115 c
289.53073 332.90082 290.32443 332.10712 291.00476 330.97327 c
291.65674 329.83942 291.94019 328.73389 291.94019 327.42996 c
291.94019 326.12601 291.65674 325.02051 291.00476 323.88666 c
290.32443 322.75281 289.53073 321.95911 288.39688 321.27878 c
287.26303 320.6268 286.1575 320.34335 284.85358 320.34335 c
284.85358 320.34335 l
h
284.85358 320.34335 m
f
1 0 0 -1 0 510.23627 cm
284.85358 189.89293 m
283.54965 189.89293 282.44412 189.60947 281.31027 188.9575 c
280.17642 188.27719 279.38272 187.48349 278.70239 186.34962 c
278.05042 185.21577 277.76697 184.11026 277.76697 182.80632 c
277.76697 181.50238 278.05042 180.39687 278.70239 179.26302 c
279.38272 178.12915 280.17642 177.33545 281.31027 176.65514 c
282.44412 176.00317 283.54965 175.71971 284.85358 175.71971 c
286.1575 175.71971 287.26303 176.00317 288.39688 176.65514 c
289.53073 177.33545 290.32443 178.12915 291.00476 179.26302 c
291.65674 180.39687 291.94019 181.50238 291.94019 182.80632 c
291.94019 184.11026 291.65674 185.21577 291.00476 186.34962 c
290.32443 187.48349 289.53073 188.27719 288.39688 188.9575 c
287.26303 189.60947 286.1575 189.89293 284.85358 189.89293 c
284.85358 189.89293 l
h
284.85358 189.89293 m
S
CM
497.45203 320.34335 m
496.1481 320.34335 495.04257 320.6268 493.90872 321.27878 c
492.77487 321.95911 491.98117 322.75281 491.30084 323.88666 c
490.64886 325.02051 490.36542 326.12601 490.36542 327.42996 c
490.36542 328.73389 490.64886 329.83942 491.30084 330.97327 c
491.98117 332.10712 492.77487 332.90082 493.90872 333.58115 c
495.04257 334.23312 496.1481 334.51657 497.45203 334.51657 c
498.75595 334.51657 499.86148 334.23312 500.99533 333.58115 c
502.12918 332.90082 502.92288 332.10712 503.60321 330.97327 c
504.25519 329.83942 504.53864 328.73389 504.53864 327.42996 c
504.53864 326.12601 504.25519 325.02051 503.60321 323.88666 c
502.92288 322.75281 502.12918 321.95911 500.99533 321.27878 c
499.86148 320.6268 498.75595 320.34335 497.45203 320.34335 c
497.45203 320.34335 l
h
497.45203 320.34335 m
f
1 0 0 -1 0 510.23627 cm
497.45203 189.89293 m
496.1481 189.89293 495.04257 189.60947 493.90872 188.9575 c
492.77487 188.27719 491.98117 187.48349 491.30084 186.34962 c
490.64886 185.21577 490.36542 184.11026 490.36542 182.80632 c
490.36542 181.50238 490.64886 180.39687 491.30084 179.26302 c
491.98117 178.12915 492.77487 177.33545 493.90872 176.65514 c
495.04257 176.00317 496.1481 175.71971 497.45203 175.71971 c
498.75595 175.71971 499.86148 176.00317 500.99533 176.65514 c
502.12918 177.33545 502.92288 178.12915 503.60321 179.26302 c
504.25519 180.39687 504.53864 181.50238 504.53864 182.80632 c
504.53864 184.11026 504.25519 185.21577 503.60321 186.34962 c
502.92288 187.48349 502.12918 188.27719 500.99533 188.9575 c
499.86148 189.60947 498.75595 189.89293 497.45203 189.89293 c
497.45203 189.89293 l
h
497.45203 189.89293 m
S
2.834646 w
291.96854 184.25198 m
490.39377 184.25198 l
S
504.56699 439.37012 m
674.64575 439.37012 l
S
1.417323 w
286.29926 189.92128 m
286.29926 204.32129 l
S
286.29926 218.72128 m
286.29926 233.12129 l
S
286.29926 247.52129 m
286.29926 261.9213 l
S
286.29926 276.32129 m
286.29926 290.72128 l
S
286.29926 305.12131 m
286.29926 319.5213 l
S
286.29926 333.9213 m
286.29926 348.32129 l
S
286.29926 362.72131 m
286.29926 377.12131 l
S
286.29926 391.5213 m
286.29926 405.9213 l
S
286.29926 420.32132 m
286.29926 430.86618 l
S
498.89771 430.86618 m
498.89771 416.46619 l
S
498.89771 402.06619 m
498.89771 387.6662 l
S
498.89771 373.26617 m
498.89771 358.86618 l
S
498.89771 344.46619 m
498.89771 330.06619 l
S
498.89771 315.66617 m
498.89771 301.26617 l
S
498.89771 286.86618 m
498.89771 272.46619 l
S
498.89771 258.06616 m
498.89771 243.66617 l
S
498.89771 229.26617 m
498.89771 214.86617 l
S
498.89771 200.46617 m
498.89771 189.92128 l
S
0 0 0 sc
107.71655 184.25198 m
109.13387 184.25198 l
S
122.0882 184.25198 m
123.50552 184.25198 l
S
136.45985 184.25198 m
137.87718 184.25198 l
S
150.83151 184.25198 m
152.24884 184.25198 l
S
165.20317 184.25198 m
166.6205 184.25198 l
S
179.57483 184.25198 m
180.99214 184.25198 l
S
193.94647 184.25198 m
195.3638 184.25198 l
S
208.31813 184.25198 m
209.73546 184.25198 l
S
222.68979 184.25198 m
224.10712 184.25198 l
S
237.06145 184.25198 m
238.47878 184.25198 l
S
251.43311 184.25198 m
252.85042 184.25198 l
S
265.80475 184.25198 m
267.22208 184.25198 l
S
0 i
/F1.1[ 36.000004 0 0 -36.000004 0 0]sf
80.532295 484.21423 m
(!)s
/F1.1[ 33.647247 0 0 -33.647247 0 0]sf
44.220478 173.14018 m
(")s
0.60000002 i
CM
18.878742 326.49454 m
87.760643 326.49454 l
87.760643 324.82208 l
18.878742 324.82208 l
h
18.878742 326.49454 m
f
0 i
1 0 0 -1 0 510.23627 cm
/F2.1[ 33.647247 0 0 -33.647247 0 0]sf
21.033073 217.36066 m
(!)s
67.407883 217.36066 m
(")s
/F2.1[ 53.914967 0 0 -53.914967 0 0]sf
271.55908 489.51501 m
(")s
/F2.1[ 54.028355 0 0 -54.028355 0 0]sf
484.21423 492.32132 m
(!)s
668.89142 486.59534 m
(#)s
/F2.1[ 32.485043 0 0 -32.485043 0 0]sf
36.907089 48.217327 m
($)s
/F1.1[ 32.485043 0 0 -32.485043 0 0]sf
57.344887 48.217327 m
(#)s
/F2.1[ 32.485043 0 0 -32.485043 0 0]sf
71.603157 48.217327 m
(#)s
/F1.1[ 32.485043 0 0 -32.485043 0 0]sf
89.943321 48.217327 m
($)s
ep
end
%%Trailer
%%EOF
