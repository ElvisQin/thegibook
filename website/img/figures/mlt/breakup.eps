%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 350 185
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 350 185
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: DKTGRW+Helvetica-Bold
%!FontType1-1.0: DKTGRW+Helvetica-Bold 1.0000.1.0000
14 dict begin/FontName /DKTGRW+Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/x 1 def
/u20B8 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2084 -985 2942 2374}def
/UniqueID 4330650 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9301CB16965794C1772CA14F06910BCAE9D9B0B498A8D671A1AA6B0D65492E44D25112ECFC24B3E592C1F40C70C18EB4687B5D9654A170AFD451A393F9E6339570C2E832C89C658FDC39DDC4379A6EBCD747AA3D6CE9FB8E7EDDDC5854529B9F4B94EBF826C136E0CBB8C31FD9BB6B62CC96C8428A07D6C7D12A10A37F7182B21B257442C8D9FF185120D5A953865A2F2145DFA5AAC08B04659322EA97216CC5EBFFBB159E7409739331860DA97D076A6C1C3540202E2AF5B584B109FF3E8FB4D72684833160D8D68CE5AEBF6B3EB7755D3477F276F2254B0F7F7B0A8989C3359E8EAAB6795F2B3615E60AE2FA53DA58A329B76991820943C81C61401BCD1B783B5A6170DA95D13C690985A0C34EC2F01F207F7B83E485C64ED5159914864547610660367117833098E5CFF3BDA9E1D9892FF67746F662FC1D6388353A6BEFE76337BD2208DC295159CDF64E95DFC8D5220EB26865D090
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/DKTGRW+Helvetica-Bold cguidfix
/F1.1/DKTGRW+Helvetica-Bold renmfont
%RBIBeginFontSubset: BAXOBE+Helvetica
%!FontType1-1.0: BAXOBE+Helvetica 1.0000.0.0000
14 dict begin/FontName /BAXOBE+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /a put
dup 34 /b put
dup 35 /c put
dup 36 /quotesingle put
dup 37 /hyphen put
dup 38 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/quotesingle 1 def
/hyphen 2 def
/one 3 def
/a 4 def
/b 5 def
/c 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00D898BEEB4B0F2A6D1F2A5EFF0D07AC6DA64015526D2A5FA7F803B24ED154B27A088DE57F9FAE6770871018AAFE17175C965446B96CC50524AA6964A8E74AEDF9B4A6BB0664C93F75BB8F8E9E8B75ED4FBEE4E5E688FC0E92E0102E1BBDC2716B7F7BB5E0C76AEFDE8538E8BC0844725E0A0924787EDEC5B382BEDC583E67705F6248413F0BD70E3F4EBCCB71118542AE24C0CA75591E3692A19425AB52A096A0E0F071440E9903C49F345098D1FF32DB82B9E3219B15C617876BAF68B177FD904CFBC899311AB84EF232B15433F757612A03E242558CED861C70206C75614094332B74EA24717CCE62883C6B82BE6B9AD6752A9EBB4235A534B5A5027857FD70BEEC3BD971CD5E8DD8F4E550BD9F43A1255A04491352EF019B47F87652C0A8F653F126C17E898205FCD8888D375DB7A46FBEF4982FA71A3A84016E57F250DC9D6F32BBB660DF96B20D0CAE251C2CD435D089A613F375199F28E8602BA01385E460F2765040E0D503A188C9C8F357132C5C55EF462EE85137ED52A7DADCCD8AF5CF48BB12B7CC72A8FD808801EA88F3AE37FDA9BCCE80890DFCEA705138AFF51F595D797283B5412F7452EF12998691D50EB417EFB34A4A8408B99F74A61DB4CB762B10B0E466
715394517C08E95710F750B61712D21448BD2E852D6725C84D16FB4B4FA2E455458B98B9FCAFC451D2244545E8CE82C8DC4E9F502DC78EED8A63CB64FAD1705DEBB72B511BC9A84BF4BEE4BE67D569073D7A89CD1C92628638E39DDCB96BF6833BA59AF4E15C01AFBC1BA958EEF6B821A880DE8BE91158331DEFF6AAF54B6BCA243388F4F7B6360F3B3BEDB089A1D67E0BB590ADA851BCFC7878221344FDAA210009C47DFCA6AE35525FC91E13A82EF3CAEF57B886669C37EAAAE354138AE1D4CF22B4E57728AA03FB6ED14DC5D77ECB2B673F474B2CCE0B70F8A42C8DB07EA3C640F8BD5D5B4BC468C54E42017959BC83835C7B6017035DB76948D58B11D4F3F244F9B9B309EFF703971B48724AB34905AD11D0F14B48B9FBDFB5929B614883D5CBC5F2AEAA819C6EF1CDDE60B742D11A019DE159288DE7856DC99748AFA5DCE4DCB5876C7B573B01C66447429EC19F4EBF6C97AED073D839AB2F79B261EA892F118418F9CEC5930CD1DFE209F2D614033B7D788980F62A916895877EF27ACE61059E59C0EE64137875D83B6E355827BE97FDDAE47FB2541FBD00171A4C0D2C1BF26078426C3B3B3D9E85BF636EFD735BF7074E5A5FDA5A69F80B13FD0C2DB834D08521A4B4C678E4933E30A107B0659BD57A004D809FB6FA1CECEEB8F42F1279FBDCD233DC5F5D267DC4A462C6C0CC709BB575E5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/BAXOBE+Helvetica cguidfix
/F2.1/BAXOBE+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 349.18301 184.30769 rc
37.274429 116.82916 m
37.049351 117.02894 36.864052 117.2734 36.722778 117.5541 c
36.581314 117.83467 36.483864 118.15131 36.429462 118.49218 c
36.374897 118.83302 36.363277 119.19791 36.38929 119.57417 c
36.415207 119.95048 36.478611 120.33801 36.571609 120.72549 c
36.664581 121.11306 36.787014 121.50051 36.93029 121.87923 c
37.073589 122.25807 37.237644 122.62819 37.414494 122.98402 c
37.591396 123.33995 37.781055 123.68164 37.976925 124.0062 c
38.172852 124.33084 38.374985 124.6384 38.5784 124.92803 c
38.781868 125.2177 38.986633 125.4895 39.189274 125.74389 c
39.39196 125.99831 39.592541 126.23537 39.788826 126.45633 c
39.985123 126.67728 40.196899 126.9044 40.425667 127.13564 c
40.654415 127.36684 40.900185 127.60221 41.163876 127.83839 c
41.427521 128.07451 41.709122 128.31148 42.008415 128.54428 c
42.30764 128.77702 42.624603 129.00562 42.957214 129.22322 c
43.289734 129.44077 43.637943 129.64729 43.997257 129.83423 c
44.356464 130.02112 44.726788 130.18835 45.100708 130.32634 c
45.474529 130.46434 45.851898 130.57295 46.222534 130.64304 c
46.593105 130.7132 46.956825 130.74464 47.30172 130.73062 c
47.646629 130.71675 47.972538 130.65729 48.267826 130.54987 c
48.563213 130.44264 48.827801 130.28745 49.052708 130.08746 c
49.277786 129.88768 49.463085 129.64323 49.604355 129.36253 c
49.745819 129.08195 49.843273 128.76532 49.897675 128.42445 c
49.952236 128.0836 49.96386 127.71872 49.937847 127.34246 c
49.91193 126.96615 49.848522 126.57861 49.755527 126.19114 c
49.662556 125.80357 49.540119 125.41611 49.396847 125.03739 c
49.253548 124.65855 49.089493 124.28844 48.912643 123.9326 c
48.735741 123.57668 48.546082 123.23499 48.350212 122.91042 c
48.154285 122.58578 47.952152 122.27822 47.748737 121.98859 c
47.545269 121.69892 47.340504 121.42713 47.137863 121.17274 c
46.935177 120.91831 46.734596 120.68126 46.538311 120.4603 c
46.342014 120.23934 46.130238 120.01223 45.90147 119.78098 c
45.672722 119.54978 45.426949 119.31441 45.163261 119.07824 c
44.899616 118.84212 44.618011 118.60516 44.318722 118.37234 c
44.019497 118.1396 43.702534 117.911 43.369923 117.6934 c
43.037403 117.47586 42.689194 117.26934 42.32988 117.08241 c
41.970673 116.89551 41.600346 116.72828 41.226425 116.59029 c
40.852608 116.45229 40.475239 116.34367 40.104603 116.2736 c
39.734032 116.20344 39.370312 116.17198 39.025417 116.18601 c
38.680508 116.19987 38.354595 116.25934 38.059311 116.36676 c
37.763924 116.47398 37.499336 116.62919 37.274429 116.82916 c
f
2 J
-0.8233875 -0.061398018 -0.061398018 0.8233875 485.43518 49.900478 cm
535.25165 121.19696 m
535.50549 121.45853 535.70728 121.77047 535.8526 122.12221 c
535.99817 122.47382 536.08734 122.86502 536.12238 123.28162 c
536.15759 123.6982 536.13873 124.13995 536.07343 124.59205 c
536.00824 125.0442 535.89679 125.50656 535.74957 125.96617 c
535.60236 126.4259 535.41962 126.88283 535.21246 127.32734 c
535.00525 127.77198 534.7738 128.20422 534.52814 128.61807 c
534.28241 129.03203 534.02258 129.42763 533.75677 129.80199 c
533.49091 130.17642 533.21906 130.52969 532.94733 130.86118 c
532.67548 131.19272 532.40369 131.50253 532.13605 131.79153 c
531.86835 132.08057 531.60474 132.34882 531.34772 132.59802 c
531.09076 132.8472 530.81451 133.10243 530.5174 133.36113 c
530.22028 133.61977 529.90228 133.8819 529.5625 134.1434 c
529.22284 134.40483 528.86139 134.66566 528.47894 134.91991 c
528.09656 135.17406 527.69318 135.4216 527.27185 135.65446 c
526.85065 135.88725 526.4115 136.10533 525.96069 136.29874 c
525.51001 136.49213 525.04767 136.66075 524.58362 136.79373 c
524.11969 136.92674 523.65411 137.02394 523.2002 137.0752 c
522.74628 137.12656 522.3042 137.13179 521.88885 137.08379 c
521.47357 137.03598 521.08527 136.9348 520.73834 136.77847 c
520.39124 136.62238 520.08563 136.41109 519.83197 136.14931 c
519.57812 135.88774 519.37634 135.57581 519.23102 135.22406 c
519.08545 134.87245 518.99622 134.48125 518.96124 134.06465 c
518.92603 133.64807 518.94489 133.20633 519.01019 132.75423 c
519.07538 132.30206 519.18683 131.83971 519.33405 131.38011 c
519.48126 130.92038 519.664 130.46346 519.87115 130.01894 c
520.07837 129.5743 520.30981 129.14204 520.55548 128.72821 c
520.80121 128.31425 521.06104 127.91865 521.32684 127.54429 c
521.59271 127.16985 521.86456 126.81658 522.13629 126.4851 c
522.40814 126.15356 522.67993 125.84373 522.94757 125.55473 c
523.21527 125.2657 523.47888 124.99745 523.73584 124.74826 c
523.99286 124.49908 524.2691 124.24384 524.56622 123.98515 c
524.86328 123.72652 525.18134 123.46439 525.52112 123.20287 c
525.86078 122.94144 526.22223 122.6806 526.60468 122.42638 c
526.98706 122.17222 527.39044 121.92467 527.81177 121.69181 c
528.23297 121.45901 528.67212 121.24094 529.12292 121.04753 c
529.57361 120.85415 530.03595 120.68552 530.5 120.55254 c
530.96393 120.41953 531.42944 120.32233 531.88342 120.27108 c
532.33734 120.21971 532.77942 120.21449 533.19476 120.26249 c
533.61005 120.3103 533.99835 120.41147 534.34528 120.5678 c
534.69238 120.7239 534.99799 120.93519 535.25165 121.19696 c
S
515.71918 135.33208 m
550.63336 152.19212 l
533.49054 115.691 l
S
1.4173229 w
1 0 0 -1 -513.3327 277.75159 cm
861.70807 158.04825 m
830.35455 162.84279 l
S
856.74335 151.70108 m
835.31927 169.18996 l
S
851.79468 145.67082 m
840.26794 175.22021 l
S
836.11774 148.06693 m
855.94489 172.82411 l
S
843.81335 146.79655 m
848.24927 174.09447 l
S
833.10199 155.54187 m
858.96063 165.34917 l
S
0.91094005 0.70545441 0.33410352 sc
CM
341.67056 117.30605 m
341.6712 118.48058 341.43768 119.6546 340.98761 120.73948 c
340.53873 121.82485 339.87372 122.82013 339.04272 123.65019 c
338.21268 124.48116 337.21741 125.14619 336.13202 125.59506 c
335.04715 126.04514 333.87314 126.27866 332.69861 126.27802 c
331.52408 126.27866 330.35007 126.04514 329.26517 125.59506 c
328.17981 125.14619 327.18454 124.48116 326.35446 123.65019 c
325.5235 122.82013 324.85846 121.82485 324.40958 120.73948 c
323.9595 119.6546 323.72598 118.48058 323.72665 117.30605 c
323.72598 116.13152 323.9595 114.95751 324.40958 113.87263 c
324.85846 112.78726 325.5235 111.79198 326.35446 110.96192 c
327.18454 110.13094 328.17981 109.46592 329.26517 109.01704 c
330.35007 108.56697 331.52408 108.33345 332.69861 108.3341 c
333.87314 108.33345 335.04715 108.56697 336.13202 109.01704 c
337.21741 109.46592 338.21268 110.13094 339.04272 110.96192 c
339.87372 111.79198 340.53873 112.78726 340.98761 113.87263 c
341.43768 114.95751 341.6712 116.13152 341.67056 117.30605 c
h
341.67056 117.30605 m
f
2.5815804 w
0 0 0 sc
1 0 0 -1 -513.3327 277.75159 cm
855.0033 160.44551 m
855.00391 159.27098 854.77039 158.09697 854.32031 157.0121 c
853.87146 155.92673 853.20642 154.93144 852.37543 154.10138 c
851.54541 153.2704 850.55011 152.60538 849.46472 152.15651 c
848.37988 151.70644 847.20581 151.4729 846.03131 151.47356 c
844.85675 151.4729 843.68274 151.70644 842.5979 152.15651 c
841.51251 152.60538 840.51721 153.2704 839.68719 154.10138 c
838.8562 154.93144 838.19116 155.92673 837.74231 157.0121 c
837.29224 158.09697 837.05872 159.27098 837.05933 160.44551 c
837.05872 161.62004 837.29224 162.79407 837.74231 163.87894 c
838.19116 164.96431 838.8562 165.95959 839.68719 166.78964 c
840.51721 167.62062 841.51251 168.28566 842.5979 168.73453 c
843.68274 169.1846 844.85675 169.41812 846.03131 169.41748 c
847.20581 169.41812 848.37988 169.1846 849.46472 168.73453 c
850.55011 168.28566 851.54541 167.62062 852.37543 166.78964 c
853.20642 165.95959 853.87146 164.96431 854.32031 163.87894 c
854.77039 162.79407 855.00391 161.62004 855.0033 160.44551 c
h
855.0033 160.44551 m
S
0 i
/F1.1[ 24 0 0 -24 0 0]sf
566.20642 143.97746 m
(!)s
/F2.1[ 13 0 0 -13 0 0]sf
579.55408 149.97746 m
(!)s
2.1259842 w
0.60000002 i
0 0.23529412 1 sc
834.25421 150.92435 m
788.11261 112.12007 l
S
0.96538597 0.94218725 0.8794046 sc
CM
3.8027816 183.80769 m
348.3754 183.80769 l
348.3754 167.72484 l
3.8027816 167.72484 l
h
3.8027816 183.80769 m
f
1 w
0 0 0 sc
1 0 0 -1 -513.3327 277.75159 cm
517.1355 93.943878 m
861.70807 93.943878 l
861.70807 110.02673 l
517.1355 110.02673 l
h
517.1355 93.943878 m
S
0.96538597 0.94218725 0.8794046 sc
CM
3.8027816 16.815084 m
348.3754 16.815084 l
348.3754 0.5 l
3.8027816 0.5 l
h
3.8027816 16.815084 m
f
0 0 0 sc
1 0 0 -1 -513.3327 277.75159 cm
517.1355 260.93649 m
861.70807 260.93649 l
861.70807 277.25159 l
517.1355 277.25159 l
h
517.1355 260.93649 m
S
0.76257128 0.82619178 0.90943533 sc
CM
224.17012 101.48653 m
224.17297 106.65221 223.1459 111.81563 221.16644 116.587 c
219.19226 121.36056 216.26743 125.73789 212.61272 129.38857 c
208.96204 133.04327 204.5847 135.96811 199.81116 137.94229 c
195.03978 139.92175 189.87636 140.94882 184.71068 140.94597 c
179.545 140.94882 174.38158 139.92175 169.6102 137.94229 c
164.83664 135.96811 160.4593 133.04327 156.80864 129.38857 c
153.15393 125.73789 150.2291 121.36056 148.25491 116.587 c
146.27545 111.81563 145.24838 106.65221 145.25124 101.48653 c
145.24838 96.320847 146.27545 91.157425 148.25491 86.386055 c
150.2291 81.612495 153.15393 77.235161 156.80864 73.584488 c
160.4593 69.929787 164.83664 67.004944 169.6102 65.030762 c
174.38158 63.051304 179.545 62.024235 184.71068 62.027092 c
189.87636 62.024235 195.03978 63.051304 199.81116 65.030762 c
204.5847 67.004944 208.96204 69.929787 212.61272 73.584488 c
216.26743 77.235161 219.19226 81.612495 221.16644 86.386055 c
223.1459 91.157425 224.17297 96.320847 224.17012 101.48653 c
h
224.17012 101.48653 m
f
0 0 0 sc
1 0 0 -1 -513.3327 277.75159 cm
737.50281 176.26505 m
737.50568 171.09937 736.47864 165.93594 734.49915 161.16457 c
732.52496 156.39102 729.6001 152.01369 725.94543 148.36301 c
722.29474 144.7083 717.91742 141.78346 713.14386 139.80928 c
708.3725 137.82982 703.20905 136.80275 698.0434 136.8056 c
692.87769 136.80275 687.71429 137.82982 682.94293 139.80928 c
678.16937 141.78346 673.79199 144.7083 670.14136 148.36301 c
666.48663 152.01369 663.56183 156.39102 661.58765 161.16457 c
659.60815 165.93594 658.58112 171.09937 658.58392 176.26505 c
658.58112 181.43073 659.60815 186.59415 661.58765 191.36552 c
663.56183 196.13908 666.48663 200.51642 670.14136 204.16708 c
673.79199 207.82179 678.16937 210.74663 682.94293 212.72081 c
687.71429 214.70027 692.87769 215.72734 698.0434 215.72449 c
703.20905 215.72734 708.3725 214.70027 713.14386 212.72081 c
717.91742 210.74663 722.29474 207.82179 725.94543 204.16708 c
729.6001 200.51642 732.52496 196.13908 734.49915 191.36552 c
736.47864 186.59415 737.50568 181.43073 737.50281 176.26505 c
h
737.50281 176.26505 m
S
2.1259842 w
1 0.3764706 0 sc
560.00726 159.30634 m
635.53638 258.60971 l
S
0 0 0 sc
559.76447 158.92587 m
613.20251 259.62967 l
S
1 0.3764706 0 sc
675.74982 208.71916 m
635.85901 260.13101 l
S
0 0 0 sc
664.06934 199.22084 m
613.90979 260.12976 l
S
722.34595 148.48471 m
665.40942 198.33389 l
S
1 0.3764706 0 sc
730.19464 157.30006 m
675.0946 209.77791 l
S
0 0 0 sc
786.87421 111.86449 m
723.89142 147.06187 l
S
1 0.3764706 0 sc
786.38715 113.6011 m
731.44543 155.55687 l
S
0 0 0 sc
0 i
/F1.1[ 24 0 0 -24 0 0]sf
655.46875 251.1657 m
(!)s
/F2.1[ 13 0 0 -13 0 0]sf
668.81641 257.16568 m
(")s
/F1.1[ 24 0 0 -24 0 0]sf
778.43109 140.27727 m
(!)s
/F2.1[ 13 0 0 -13 0 0]sf
791.77875 146.27727 m
(#)s
/F1.1[ 24 0 0 -24 0 0]sf
569.29327 251.1657 m
(!)s
/F2.1[ 13 0 0 -13 0 0]sf
582.64093 257.16568 m
(")s
/F2.1[ 24 0 0 -24 0 0]sf
669.45184 248.02533 m
($)s
0.60000002 i
0.50196081 0.50196081 0.50196081 sc
664.06934 199.22084 m
662.39392 202.85304 l
S
660.71844 206.48526 m
659.04303 210.11746 l
S
657.36761 213.74966 m
655.69214 217.38187 l
S
654.01672 221.01407 m
652.34131 224.64627 l
S
650.66583 228.27849 m
648.99042 231.91069 l
S
647.315 235.54289 m
645.63953 239.17509 l
S
643.96411 242.8073 m
642.2887 246.43951 l
S
640.61322 250.07172 m
638.93781 253.70392 l
S
637.26239 257.33612 m
636.44989 259.09744 l
S
0 0 0 sc
0 i
/F1.1[ 24 0 0 -24 0 0]sf
628.53448 194.37166 m
(!)s
/F2.1[ 13 0 0 -13 0 0]sf
641.88214 200.37166 m
("%&)[ 7.229980 4.329102 0.000000 ] xS
ep
end
%%Trailer
%%EOF
