%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 534 168
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 534 168
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JSVLAC+Times-Roman
%!FontType1-1.0: JSVLAC+Times-Roman 1.0000.0.0000
14 dict begin/FontName /JSVLAC+Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Omegagreek put
dup 34 /x put
dup 35 /t put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<




003ED0303113331617161716172135262726273437363736373637161716171617161506070607152136373637363533112111363736270227262322070603061716171121A6290206060A19600140E8959A02272552548989CBCD8B8952522523029695EC0140601B0E060229FDBAD1504C02028585C7C7838902024E50CEFDBB0164141D1C19370283189895D160676456583736020236375856646760D1959818830237191C1D14FE9C01812F8D8C95010A75737375FEF6958C8D2FFE7F00FFFF0031FF190400057600270004000000000007000300FAFAB800000001000000000000BE665AE95F0F3CF50111080000000000A33D5B0000000000D03CCEACFE60FC930D9A0A2C000000090001000000000000000100000600FE0000000DC5FE60FE600D9A00010000000000000000000000000000000705C70021023900190400002302AAFFDE040000310625008704000031000000360098017C019E026C033E034C0001000000070071000600960009000200100010003B000007E806C300040001B800312BB800272B400F09CF54010F54013FD029019F540140410D01FB0001003001FB0001002001FB0001001001FB0001000001FB400B01002001900701900601F0414F0204000100EF0203000100C00201000100B001FF00B0020100BF0208000300AF020100AF02080002009F0202009F02080002007F0200007F0202007F0208008F0200008F020200800205008F02080007006F0200006F0202006F0205006F02080004005F020200500203005F02080003004F0202004F0204004F0208000300300202003F0204003002080003002F0201002F0204002F02080003001F0208B2010840BA01E5014D0152B50F1FC2710E1FBC014B014D0062001F0131B2864F1FBE01A60020000D018F0020000D0182400E200DDE200DDA200D8F200D7F200DBE018B0050000D016C0050000D0101400E500DD8500D43500D3F500D3A500DBB013B0028000D01034014280DBD280DB8280DA7280D7C280D76280D2D280DBE01B1004A000D01A7004A000D019440204A0DF74A0DC84A0D984A0D854A0D7A4A0D664A0D214A0D621C0D241C0D1B1C0DB8017EB60F920F900F0009B8017EB4900D92900DB801F5B3312F1F41B801F3B5331F2B2C361FB80189B2542C1FB80183B254AB1F4115018100290401001F018000290201001F017C00440201001F017901300201001F017801300401001F0177B22F291FB80173B23E9E1FB80171B23EE41FBC016B002E0401001F016AB233E41FB80138B2545E1F4109013300290401001F013200440801001F012DB23E931FB8012AB22CCD1F41110127002E0125001F012400330801001F012300330401001F012200330401001F0106B254261FB80105B4542C1FFF29B80101B21FFE88B80201B61FFB2F521FF62EB8

6820B003266165B045236544B0862344B10045455458B145406544B286408645236144592B2B2B2B4569534273737373737373737373737373737373737373737475755E73735E00
00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/t 1 def
/x 2 def
/macron 3 def
/dcroat 4 def
/Omegagreek 5 def
/dong 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec


0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JSVLAC+Times-Roman cguidfix
/F1.1/JSVLAC+Times-Roman renmfont
%RBIBeginFontSubset: DJBSEK+Helvetica
%!FontType1-1.0: DJBSEK+Helvetica 1.0000.0.0000
14 dict begin/FontName /DJBSEK+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /plus put
dup 34 /equal put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<



B080441BB04044591B21212045B0C05058B0C0441B2159592DB8004F2C2020456944B001602020457D691844B001602DB800502CB8004F2A2DB800512C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800522C4B535845441B2121592DB800532C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800542C2020456944B001602DB800552CB800542A212DB800562C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800572C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800582C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800592C2020456944B001602020457D691844B001602DB8005A2CB800592A2DB8005B2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8005C2C4B535845441B2121592D00000000020042000004D005BD000300070043B800532BB800082FB800042FB8000810B80000D0B800002FB8000410B80003DCB8000010B80007DCB8000310B80009DC00BA0007000000562BBA0002000500562B3031331121112711211142048EB8FCE205BDFA43B8044DFBB300000001005C0000046F0415000B0037401C037A050220080B7A0A0A0D17171A067A040920030A7A00190C3F52182B4E10F44DF43CFD3CF44E456544E6003F4DF43CFD3CF431301335211133112115211123115C01B4AB01B4FE4CAB01B6A801B7FE49A8FE4A01B600000002005C00DE046F03360003000700274015012000CD07200604001A0907021908095C213F52182B2B4EF43C10F63C002F4DEDFDFD31300115213501152135046FFBED0413FBED0336A8A8FE53ABAB000002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000006F400C9E5F0F3CF500110800000000005F4D8F0000000000D383C768F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B910001000000000000000000000000000000040512004204AC005C04AC005C0473002F00000036006A009200AC00000001000000040092

00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/plus 1 def
/equal 2 def
/u20B8 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/DJBSEK+Helvetica cguidfix
/F2.1/DJBSEK+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 533.52563 167.71495 rc
1 0 0 -1 -11.586505 314.07816 cm
27.619297 170.57047 m
155.09418 170.57047 l
155.09418 298.04535 l
27.619297 298.04535 l
h
27.619297 170.57047 m
S
12.086579 234.31963 m
163.10936 234.2973 l
S
CM
159.04039 79.781952 m
151.52325 77.044678 l
151.52245 82.516998 l
h
159.04039 79.781952 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
170.62689 234.29619 m
163.10976 237.03346 l
163.10895 231.56114 l
h
170.62689 234.29619 m
S
1 w
91.34613 162.5553 m
91.368454 313.57806 l
S
CM
79.758514 159.04039 m
82.495789 151.52325 l
77.023468 151.52245 l
h
79.758514 159.04039 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
91.345024 155.03775 m
94.082291 162.55489 l
88.60997 162.55569 l
h
91.345024 155.03775 m
S
0 i
/F1.1[ 14 0 0 -14 0 0]sf
162.98535 249.6944 m
(!)s
173.73828 250.6944 m
(")s
98.667435 160.3632 m
(!)s
109.42036 161.3632 m
(#)s
0.60000002 i
0.002450475 0.40103921 0.79995733 sc
CM
141.59175 79.164894 m
141.59264 79.619019 141.18294 80.073044 140.38663 80.513718 c
139.59183 80.954483 138.41138 81.381744 136.91032 81.784729 c
135.41017 82.187859 133.59088 82.56665 131.5417 82.914383 c
129.49272 83.262268 127.21523 83.579124 124.80318 83.862526 c
122.39075 84.146065 119.84464 84.396233 117.24831 84.614151 c
114.65131 84.832153 112.00441 85.017998 109.3725 85.175102 c
106.73984 85.332245 104.1221 85.460716 101.56395 85.565025 c
99.005142 85.669342 96.505661 85.749542 94.092361 85.810326 c
91.678551 85.871101 89.350609 85.912483 87.121628 85.938828 c
84.892296 85.965157 82.761642 85.976448 80.733154 85.976463 c
78.704674 85.976448 76.57402 85.965157 74.344688 85.938828 c
72.115707 85.912483 69.787766 85.871101 67.373955 85.810326 c
64.960655 85.749542 62.46117 85.669342 59.902363 85.565025 c
57.344212 85.460716 54.726475 85.332245 52.093819 85.175102 c
49.461903 85.017998 46.815006 84.832153 44.217999 84.614151 c
41.62167 84.396233 39.075565 84.146065 36.663139 83.862526 c
34.251087 83.579124 31.973587 83.262268 29.924603 82.914383 c
27.875439 82.56665 26.056149 82.187859 24.55599 81.784729 c
23.054939 81.381744 21.874483 80.954483 21.079681 80.513718 c
20.283371 80.073044 19.873684 79.619019 19.874559 79.164894 c
19.873684 78.71077 20.283371 78.256744 21.079681 77.816063 c
21.874483 77.375298 23.054939 76.948044 24.55599 76.545059 c
26.056149 76.141922 27.875439 75.76313 29.924603 75.415405 c
31.973587 75.067513 34.251087 74.750664 36.663139 74.467255 c
39.075565 74.183723 41.62167 73.933556 44.217999 73.715637 c
46.815006 73.497635 49.461903 73.311783 52.093819 73.154686 c
54.726475 72.997543 57.344212 72.869064 59.902363 72.764755 c
62.46117 72.660446 64.960655 72.580246 67.373955 72.519455 c
69.787766 72.458687 72.115707 72.417297 74.344688 72.390953 c
76.57402 72.364632 78.704674 72.353333 80.733154 72.353325 c
82.761642 72.353333 84.892296 72.364632 87.121628 72.390953 c
89.350609 72.417297 91.678551 72.458687 94.092361 72.519455 c
96.505661 72.580246 99.005142 72.660446 101.56395 72.764755 c
104.1221 72.869064 106.73984 72.997543 109.3725 73.154686 c
112.00441 73.311783 114.65131 73.497635 117.24831 73.715637 c
119.84464 73.933556 122.39075 74.183723 124.80318 74.467255 c
127.21523 74.750664 129.49272 75.067513 131.5417 75.415405 c
133.59088 75.76313 135.41017 76.141922 136.91032 76.545059 c
138.41138 76.948044 139.59183 77.375298 140.38663 77.816063 c
141.18294 78.256744 141.59264 78.71077 141.59175 79.164894 c
h
141.59175 79.164894 m
f
1 w
0 0 0 sc
1 0 0 -1 -11.586505 314.07816 cm
206.1568 170.57047 m
333.63168 170.57047 l
333.63168 298.04535 l
206.1568 298.04535 l
h
206.1568 170.57047 m
S
190.62408 234.31963 m
341.64685 234.2973 l
S
CM
337.57788 79.781952 m
330.06076 77.044678 l
330.05994 82.516998 l
h
337.57788 79.781952 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
349.1644 234.29619 m
341.64725 237.03346 l
341.64645 231.56114 l
h
349.1644 234.29619 m
S
1 w
269.88364 162.5553 m
269.90594 313.57806 l
S
CM
258.29602 159.04039 m
261.03329 151.52325 l
255.56096 151.52245 l
h
258.29602 159.04039 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
269.88251 155.03775 m
272.61978 162.55489 l
267.14746 162.55569 l
h
269.88251 155.03775 m
S
0 i
341.52286 249.6944 m
(!)s
352.27579 250.6944 m
(")s
277.20493 160.3632 m
(!)s
287.95786 161.3632 m
(#)s
0.60000002 i
0.002450475 0.40103921 0.79995733 sc
CM
309.77402 113.12339 m
309.52133 113.50073 308.92804 113.6489 308.02133 113.57027 c
307.11581 113.49254 305.8978 113.18842 304.42731 112.68526 c
302.95746 112.18272 301.23636 111.48192 299.34183 110.62707 c
297.44736 109.77245 295.38058 108.76456 293.22083 107.65385 c
291.06067 106.54303 288.8082 105.32993 286.53204 104.06204 c
284.25528 102.79385 281.95505 101.47113 279.68332 100.13292 c
277.41092 98.794327 275.1669 97.440269 272.98584 96.099403 c
270.8042 94.758179 268.68527 93.430046 266.64868 92.133896 c
264.61166 90.83744 262.65674 89.572815 260.79233 88.350929 c
258.92764 87.12883 257.1532 85.949318 255.46986 84.817459 c
253.78654 83.68557 252.02473 82.487312 250.18941 81.221527 c
248.3544 79.95591 246.44565 78.622597 244.47647 77.225288 c
242.50771 75.828247 240.47827 74.367004 238.41306 72.852646 c
236.34839 71.338669 234.24776 69.771378 232.15073 68.171982 c
230.05431 66.573029 227.96149 64.941856 225.92801 63.311848 c
223.89505 61.682281 221.92177 60.053978 220.07802 58.472576 c
218.23453 56.891495 216.52135 55.357731 215.01512 53.925724 c
213.50867 52.493748 212.21028 51.164261 211.19032 49.992649 c
210.16954 48.820663 209.42836 47.807423 209.01474 46.998161 c
208.59981 46.188133 208.51317 45.58276 208.7673 45.206394 c
209.01997 44.829052 209.61328 44.680882 210.51999 44.759521 c
211.42551 44.837242 212.64351 45.141369 214.11401 45.644524 c
215.58386 46.14706 217.30496 46.847866 219.19948 47.702717 c
221.09395 48.557335 223.16072 49.56522 225.3205 50.675934 c
227.48065 51.786755 229.73312 52.999855 232.00928 54.267742 c
234.28604 55.535934 236.58626 56.858654 238.858 58.196865 c
241.1304 59.535458 243.3744 60.889515 245.55548 62.230377 c
247.73711 63.571602 249.85605 64.899734 251.89264 66.195892 c
253.92964 67.49234 255.88458 68.756966 257.74899 69.978851 c
259.61368 71.200951 261.38809 72.380463 263.07144 73.512329 c
264.75476 74.644211 266.51657 75.842468 268.3519 77.108261 c
270.18692 78.373871 272.09567 79.707184 274.06485 81.1045 c
276.0336 82.501541 278.06305 83.962784 280.12827 85.477135 c
282.19293 86.991119 284.29355 88.558403 286.39059 90.157806 c
288.487 91.75676 290.57983 93.387924 292.61331 95.017937 c
294.64627 96.647499 296.61954 98.275803 298.46329 99.857208 c
300.30679 101.43829 302.01996 102.97205 303.52618 104.40406 c
305.03265 105.83604 306.33102 107.16552 307.35098 108.33714 c
308.37177 109.50912 309.11295 110.52236 309.52658 111.33163 c
309.9415 112.14165 310.02814 112.74702 309.77402 113.12339 c
h
309.77402 113.12339 m
f
1 w
0 0 0 sc
1 0 0 -1 -11.586505 314.07816 cm
384.69431 170.57047 m
512.16919 170.57047 l
512.16919 298.04535 l
384.69431 298.04535 l
h
384.69431 170.57047 m
S
369.16159 234.31963 m
520.18433 234.2973 l
S
CM
516.11542 79.781952 m
508.59827 77.044678 l
508.59744 82.516998 l
h
516.11542 79.781952 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
527.7019 234.29619 m
520.18475 237.03346 l
520.18396 231.56114 l
h
527.7019 234.29619 m
S
1 w
448.42114 162.5553 m
448.44345 313.57806 l
S
CM
436.83353 159.04039 m
439.5708 151.52325 l
434.09848 151.52245 l
h
436.83353 159.04039 m
f
0.25 w
1 0 0 -1 -11.586505 314.07816 cm
448.42001 155.03775 m
451.15729 162.55489 l
445.68497 162.55569 l
h
448.42001 155.03775 m
S
0 i
520.06036 249.6944 m
(!)s
530.81329 250.6944 m
(")s
455.74243 160.3632 m
(!)s
466.49536 161.3632 m
(#)s
0.60000002 i
0.002450475 0.40103921 0.79995733 sc
CM
494.76624 100.60194 m
494.22012 101.11869 493.28989 101.49071 492.01389 101.71136 c
490.7392 101.93264 489.11984 102.00272 487.22964 101.93226 c
485.34012 101.86228 483.18124 101.65222 480.84464 101.32586 c
478.508 100.99974 475.99484 100.55784 473.39609 100.0305 c
470.79678 99.503174 468.11258 98.890823 465.42023 98.224106 c
462.72711 97.557243 460.02603 96.836235 457.3736 96.087822 c
454.7204 95.339188 452.11572 94.56321 449.59592 93.780739 c
447.07547 92.998047 444.63959 92.208824 442.30774 91.427879 c
439.97546 90.646744 437.74686 89.873802 435.62903 89.118622 c
433.51086 88.363289 431.50317 87.625626 429.60468 86.911118 c
427.70621 86.196587 425.72574 85.433228 423.67099 84.618019 c
421.61658 83.802917 419.48767 82.935852 417.30176 82.016487 c
415.11633 81.097298 412.87366 80.125664 410.60446 79.105713 c
408.33591 78.085999 406.04068 77.017815 403.76599 75.911774 c
401.49197 74.806038 399.23853 73.662338 397.07053 72.499641 c
394.90305 71.33728 392.82141 70.155937 390.90509 68.983734 c
388.98895 67.811813 387.23901 66.649246 385.74033 65.531883 c
384.24127 64.414627 382.99478 63.343029 382.07629 62.356159 c
381.15677 61.369144 380.56656 60.467453 380.35352 59.686241 c
380.13898 58.904602 380.30234 58.243969 380.8501 57.72784 c
381.39618 57.211094 382.32642 56.839077 383.60242 56.618431 c
384.87711 56.397144 386.49649 56.327072 388.38666 56.397526 c
390.27618 56.467499 392.43506 56.677567 394.7717 57.003925 c
397.10834 57.330044 399.62146 57.771946 402.22025 58.299286 c
404.81952 58.826607 407.50372 59.438961 410.19611 60.105679 c
412.88922 60.772541 415.5903 61.493546 418.24274 62.241962 c
420.8959 62.990593 423.50061 63.766575 426.02042 64.549042 c
428.54086 65.331741 430.97672 66.120956 433.30856 66.901901 c
435.64087 67.683044 437.86945 68.455986 439.9873 69.211166 c
442.10544 69.966499 444.11316 70.704163 446.01163 71.418663 c
447.9101 72.133202 449.89059 72.896553 451.94534 73.711761 c
453.99973 74.526863 456.12863 75.393936 458.31454 76.313293 c
460.49997 77.232491 462.74268 78.204124 465.01184 79.224075 c
467.2804 80.243782 469.57565 81.311974 471.85031 82.418015 c
474.12436 83.523743 476.37778 84.66745 478.54578 85.830147 c
480.71326 86.9925 482.79489 88.173851 484.71121 89.346054 c
486.62738 90.517975 488.37729 91.680542 489.87598 92.797905 c
491.37503 93.915154 492.62152 94.986755 493.54001 95.973625 c
494.45953 96.96064 495.04977 97.862335 495.26279 98.643539 c
495.47736 99.425179 495.31396 100.08582 494.76624 100.60194 c
h
494.76624 100.60194 m
f
0 0 0 sc
0 i
1 0 0 -1 -11.586505 314.07816 cm
/F2.1[ 36 0 0 -36 0 0]sf
170.39922 206.57814 m
(!)s
348.93671 206.57814 m
(")s
ep
end
%%Trailer
%%EOF
