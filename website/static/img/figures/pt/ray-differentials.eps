%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 400 175
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 400 175
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SYNKKF+Helvetica
%!FontType1-1.0: SYNKKF+Helvetica 1.0000.0.0000
14 dict begin/FontName /SYNKKF+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /quotesingle put
dup 35 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<



B080441BB04044591B21212045B0C05058B0C0441B2159592DB8004F2C2020456944B001602020457D691844B001602DB800502CB8004F2A2DB800512C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800522C4B535845441B2121592DB800532C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800542C2020456944B001602DB800552CB800542A212DB800562C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800572C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800582C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800592C2020456944B001602020457D691844B001602DB8005A2CB800592A2DB8005B2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8005C2C4B535845441B2121592D00000000020042000004D005BD000300070043B800532BB800082FB800042FB8000810B80000D0B800002FB8000410B80003DCB8000010B80007DCB8000310B80009DC00BA0007000000562BBA0002000500562B3031331121112711211142048EB8FCE205BDFA43B8044DFBB300000001009C0371015205BD000300264013029D03000517171A002903190405C121BB48182B2B4EF44DFD4E456544E6003F4DED313001032303015221742105BDFDB4024C00000200A50000056305BD000D00180067401F871196120232080B1E0F02001E17080831131A1A0D250E19191AD6217689182B2B4EF44DFD4E10F64DED003FFD3FFD3130437940260116112515260607050704070307020705060A10083201011608320109120B320107140032002B2B012B2B2A2B2B815D2532373637363736351002232111032120171611140702290102D06541744A3B1A0FD9F1FE9FC80253012FA795589BFE86FDAFAA15276F598B53470111012EFB980513D7C2FED1EABDFEB20000000200AF000004F805BD000A001400614035690C6912790C7A12044814581468147A140407081E1110100A010E0F1E0100020A080206120C0409141431041A160F092500191516B8010BB3219589182B2B4EF44DFD3C4E10F64DFD11121739003F3F3CFD

622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/quotesingle 1 def
/D 2 def
/P 3 def
/u20B8 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D189384ACC33AF8878AF853B57AE3663AA6274DE642E597C20D551E64D4F7DDE4EFE8390F877832EE76EF58DCDA70A51F7B3A769124AD986A6B9785C583E4D2D6E0B4921C39224127D0544B02BC0FEF8788EE038CC81878D1D17FB940E0B03283A5C5AC695A80F84BA1DCFBB4E9FA475CA39AC190EE3EBA7D4F56B58AF101A62B057EFA152BD4BE9984FE6499FBAC8C75FF41F3CCFA463758D9B36AD8308FA8E0F6C23D265353CB1B0FEAE995C093DE2D19A9CCD385E614C487C147E4D3CFDB83EF08FAD90A43147394FC77DDA2B5252E32A2EB3C8723E1B62AFB49F3C6D2CF153E2751BD64A9D83D9654C9FF6A6DDF48CD125398081AD786AF042BB10A7791030618B604C2B8F617CC9B407CAF7CCAFD51EB59276A84E99C3722CF22796C469DC54969F548518FE03D7F9234519CACC33A5A292098E82A8B11FAD988AE0A513478CD8ED127A56433E6270930D8DCB1FA4A9DEA330D143996FA54F9943E5F1976200947CAFA961CAB23263DCEB7D18C4EBEEA6185F4C3E21B58F2B6B6F3DF70C21BB0FE139723439571044E5AA7E86150E68E41087288A8E10DD46478305A5061DF1E561AB0B4266D0EAF8CC95C6AF12FE7EE6EF146A3B34F0A34E41DC11C12BEBD5699F48E4F83E82E45E232D313AC610C35BB312BC30BFDEE5969A21DCEEDA06364096ABBF065D272B298056D30C4A962C43B625B5C261782786BB64DB4CE3B87DECDF295F6B87
5D6EC28D8D20D98AF6081FC640006B2E1218F4E795F23EB801CBF089
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SYNKKF+Helvetica cguidfix
/F1.1/SYNKKF+Helvetica renmfont
%RBIBeginFontSubset: YGRMLR+Times-Roman
%!FontType1-1.0: YGRMLR+Times-Roman 1.0000.0.0000
14 dict begin/FontName /YGRMLR+Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /partialdiff put
dup 34 /P put
dup 35 /x put
dup 36 /quotesingle put
dup 37 /y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<


2B2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8002C2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8002D2C2020456944B001602020457D691844B001602DB8002E2CB8002D2A2DB8002F2C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800302C4B535845441B2121592DB800312C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800322C2020456944B001602DB800332CB800322A212DB800342C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800352C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800362C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800372C2020456944B001602020457D691844B001602DB800382CB800372A2DB800392C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8003A2C4B535845441B2121592D0002002100000597054B000300070043B40201490506B80156401C0004074903000A0504490303021A090607490100190809EB214652182B2B4EF43C4DFD3C4E10F63C4D10FD3C003F3CFD3C10F43CFD3C31303311211127112111210576B8FBFA054BFAB5B803DBFC25000000010067031A00FD0568000E003A401C07CC0E1017024006700770210E0E020B051F0248081F0B190F9168182B4E10F44DE4F4E41112393D2F1AECEC181A10E64D007D2F18ED31301216151406070323032E0135343633E01D010431243403051B2F0568332C070E22FE4801971930191F3600000002002100000455054B000E002700C54048C61ACA1C02B619C91D0212400A1E2B08124A0F1B27282413211B17282322211B262D2312221E27130307212E1E2E0A4B0747072617032E181817022726080E54101B301B501B031BB8020AB5290622291312B80203B129282FCCF43CFD3C10F65DED003F3C3F3C10ED111239762F18F4EDED111239111239392B2B2B31304379401E191D0B0D00020C2501260B1D0E550102190E55010D1C0A5500001A0355012B2B012B2B2B2B818181004954794009091F075F000807202101103C103C2B015D005D00272623220615




00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/quotesingle 1 def
/P 2 def
/x 3 def
/y 4 def
/partialdiff_old 5 def
/macron 6 def
/dcroat 7 def
/partialdiff 8 def
/dong 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec

6CAAB056B87C00949211CD789BC1AEC619C24AF25295C18CFA89500115D5670AED6E716176ED63176C69996E1E160526E171EEA7D9BF616249779435081389A5B0EBA40907963920EBA258DAA1E8ADEB165DF2294EAA36FF4B3A3A63CFEE1079E4B52477AC2905B02D4C0E28F39B8FBB6B63FC883BA6A2574754129574CD8D31B477F6B30817D670E1D2F3E60E39487AC0760921803E68ED725400D549819D510B1241EF81F6BEF506C8DEDBD5C433B6CF8FFA12D3CA985969CC899834D0B4CEAEDB1988C32DC4D8F6322CDFEC9D5E0046A38A49B5FA073616558A446DDA7A3A6D22BC5FF841377D2B07269870E9CFCF6F8C1E6CF3D473DD36B195A02E07FFBD43DAE38513D2DD13F64D983788ADDBD57F9AE7442C0A00B505A1CA58F2CC8F34F5F02C0D7E36BAC0AE17984507C326847F2ED667AC0E74E6F01DE9963C28BA5B8784A4379860D51EB2B44F1C4D4609F9FE6EEE44CDF188709CDB4AF6F7B9895F738B8C291F24E9749584E323994CADEE9CC5D177D6C2F9B253CD661943145F15208DEBD9698D0800846D54FD8F693F342F701F63A73F0CA19E43B9EFE596A3AAF554E7730A723FD33EF81553073AAB19A49B9B5B6F296B15704E720967008D86619A98EE8E1B0BCA2D636687E8FEEC987C64B5B3F95CF0B34760D0ACB4823B871BB98745EFEA35E4CED6AC74AF27E5CE0EEBBDAABBE06ED770BEDEAF2E6671D5985D9B6CF4815E345BB022CEFE194924AEF3974F10256CCC0F01DBBD727FB7C286F5B15A5C90D6BFC7375A6ED29770FA4A27380775CBDC965468FDC65C548922A72BD635C8A7C891EF5BD0B3F7A59E07D83B1F4AF3430A0F5E8FC267DC2FB53294AD7CB13514269B5830275419187246697F7F34E478DB3C0421109489241EFEFAA3795E10C53375A1D7621DB2A38A5D37951E2B74A7BC5AA05C56EF8F990F0827C367570621B202F66BFDA94CA1C00FD609FE82071A184AFB299142FB7EF26E446B79CDF204A1DCB71E8210DB82DC8287A0C7508C8E23B4AEE7EEF5FBC3C4B6BCD0DF01998250B39A1672F5D74F92275427713E560C7379036E3A391600542CCE82887AEBFCD57D0B800D3F558EC8D7AB597FFDED755934AF7B38FBBAFDB475F5ECE27CBF7FEF2268571A4DC3142E5888A3ACBFED9D5F86DC8F1412F788A44090FBFDFA4730A40566BA12E56D0CC58A0C0B930FF79D589FAF5C563F56998C5F20E8D758003406295335DFE3E346CE10BA58FDF16C0EBD763017A61C172C8515DDE68C32C914E83B561EFE62704C44B5512BC587612A8BC89B0A2BFB167E5344D69550C133F8CF911437D2341BFD25F6AAC4D6EAF6FC92B5BFAADE4F7C0CB6916B084099E8E847CFE7A5BF13F0BCC8E0325CEEBD6C1221C9826425B81562D2BE0531405728C356E64A24713222B455D1DE47D7660608CEFB0DDF4F465BBF1020
6EA0A9CD8F0B844F9974A171D68D4BDF4916908813752E6C8EFFD8D8646A70511CDCDBE0AB97FC0657656E5D760083F51EF321DCD206E87B39A91B903C722740D6AD4550F347E2CBF99F15F7C17EAE76B94B530143B6EA993B59473270E4AE53BB21F33534B70DC64127C5D0E0897F4E060ADC9ED7CC619BDC3C2FC0337CFD9182DBCB182F689FBC701F7F30A4DB75A8153BCBAD571813903AD61C75700DDC49F3E70B424ED4439567433E5C040E4FCCC73B78FE06E4A2B80D095644C33FFF213B5A6B860E16616DEDF58002E24572A5A8C6915B9476A2C7AD84785F21D89F1052AB537A3DC033ECC2018C32EC2007E742
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/YGRMLR+Times-Roman cguidfix
/F2.1/YGRMLR+Times-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 399.27838 174.3187 rc
1 0 0 -1 -79.379692 416.67334 cm
84.141808 303.41928 m
69.629745 339.28821 94.602585 400.43121 122.52167 409.07138 c
145.39339 416.14954 189.60318 419.20544 210.58038 406.61047 c
226.10747 397.28781 215.97026 308.92673 207.03003 294.52438 c
197.64301 279.40228 144.31367 276.36905 101.85918 296.25409 c
84.158363 304.54489 84.257904 303.11005 84.436363 303.62823 c
S
333.12885 253.4744 m
318.61679 289.34332 303.08041 391.6991 323.19659 396.99283 c
345.40198 402.83636 409.3963 407.40564 432.79123 400.2395 c
456.5451 392.96344 482.86325 242.09729 461.14682 242.85751 c
405.15533 244.81758 373.46283 241.94907 332.91391 253.82199 c
332.91391 253.82199 332.91391 253.82199 332.91391 253.82199 c
S
2 w
121.66639 357.8418 m
179.94301 354.13931 l
S
CM
108.06572 63.010674 m
100.73679 59.803368 l
100.38982 65.264679 l
h
108.06572 63.010674 m
f
0.5 w
1 0 0 -1 -79.379692 416.67334 cm
187.44542 353.66266 m
180.11649 356.86996 l
179.76952 351.40866 l
h
187.44542 353.66266 m
S
2 w
339.22513 345.85837 m
415.8988 341.25586 l
S
CM
344.02316 75.867928 m
336.68307 72.686241 l
336.35516 78.148727 l
h
344.02316 75.867928 m
f
0.5 w
1 0 0 -1 -79.379692 416.67334 cm
423.40283 340.80542 m
416.06277 343.98709 l
415.73486 338.52463 l
h
423.40283 340.80542 m
S
1 w
181.17889 353.8743 m
185.17372 353.67117 l
S
189.16856 353.46808 m
193.16341 353.26498 l
S
197.15825 353.06186 m
201.15309 352.85876 l
S
205.14793 352.65567 m
209.14276 352.45258 l
S
213.1376 352.24945 m
217.13245 352.04636 l
S
221.12729 351.84326 m
225.12213 351.64014 l
S
229.11697 351.43704 m
233.11182 351.23395 l
S
237.10664 351.03082 m
241.10149 350.82773 l
S
245.09633 350.62463 m
249.09117 350.42154 l
S
253.08601 350.21841 m
257.08084 350.01532 l
S
261.07568 349.81223 m
265.07053 349.6091 l
S
269.06537 349.40601 m
273.06021 349.20291 l
S
277.05505 348.99979 m
281.0499 348.79669 l
S
285.04474 348.5936 m
289.03958 348.3905 l
S
293.03442 348.18738 m
297.02927 347.98428 l
S
301.02411 347.78119 m
305.01892 347.57806 l
S
309.01376 347.37497 m
313.00861 347.17188 l
S
317.00345 346.96875 m
320.99829 346.76566 l
S
324.99313 346.56256 m
328.98798 346.35947 l
S
332.98282 346.15634 m
336.97766 345.95325 l
S
340.9725 345.75015 m
344.96735 345.54703 l
S
348.96219 345.34393 m
352.95703 345.14084 l
S
356.95187 344.93771 m
358.70108 344.84879 l
S
110.75293 319.80176 m
171.99866 307.06717 l
S
CM
99.97908 111.13655 m
93.175964 106.92732 l
92.061951 112.28506 l
h
99.97908 111.13655 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
179.35878 305.5368 m
172.55566 309.74603 l
171.44165 304.38828 l
h
179.35878 305.5368 m
S
1 w
176.61348 306.39688 m
180.51674 305.52243 l
S
184.41998 304.64801 m
188.32324 303.77359 l
S
192.22649 302.89914 m
196.12975 302.02472 l
S
200.03299 301.1503 m
203.93625 300.27588 l
S
207.83949 299.40143 m
211.74275 298.52701 l
S
215.646 297.65259 m
219.54926 296.77817 l
S
223.4525 295.90372 m
227.35576 295.0293 l
S
231.259 294.15488 m
235.16226 293.28046 l
S
239.06552 292.40601 m
242.96877 291.53159 l
S
246.87202 290.65717 m
250.77527 289.78275 l
S
254.67853 288.90829 m
258.58179 288.03387 l
S
262.48502 287.15945 m
266.38828 286.28503 l
S
270.29153 285.41058 m
274.19479 284.53616 l
S
278.09802 283.66174 m
282.00128 282.78729 l
S
285.90454 281.91287 m
289.8078 281.03845 l
S
293.71103 280.16403 m
297.61429 279.28958 l
S
301.51755 278.41516 m
305.42081 277.54074 l
S
309.32404 276.66632 m
313.22729 275.79187 l
S
317.13055 274.91745 m
321.03381 274.04303 l
S
324.93704 273.16861 m
328.8403 272.29416 l
S
332.74356 271.41974 m
336.64682 270.54532 l
S
340.55005 269.6709 m
344.45331 268.79645 l
S
348.35657 267.92203 m
352.25983 267.04761 l
S
356.16309 266.17319 m
360.06631 265.29874 l
S
363.96957 264.42432 m
367.87283 263.5499 l
S
2 w
369.49249 263.22849 m
427.96674 249.01242 l
S
CM
355.89182 169.43683 m
349.23343 165.0022 l
347.94067 170.31964 l
h
355.89182 169.43683 m
f
0.5 w
1 0 0 -1 -79.379692 416.67334 cm
435.27151 247.23651 m
428.61313 251.67114 l
427.32037 246.35371 l
h
435.27151 247.23651 m
S
1 w
423.93686 339.87216 m
433.84906 255.04715 l
S
CM
355.34189 169.09294 m
357.18701 161.30862 l
351.75168 161.94377 l
h
355.34189 169.09294 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
434.72156 247.58041 m
436.56671 255.36472 l
431.13138 254.72957 l
h
434.72156 247.58041 m
S
1 w
121.43152 357.87924 m
112.65417 326.61819 l
S
CM
31.242317 97.292824 m
35.908772 90.794807 l
30.640182 89.315521 l
h
31.242317 97.292824 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
110.62201 319.38052 m
115.28847 325.87854 l
110.01988 327.35782 l
h
110.62201 319.38052 m
S
1 w
122.14819 358.54813 m
146.94386 368.99774 l
S
CM
74.491661 44.756145 m
66.501572 45.154194 l
68.626762 50.197002 l
h
74.491661 44.756145 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
153.87135 371.91721 m
145.88127 371.51913 l
148.00645 366.47635 l
h
153.87135 371.91721 m
S
1 w
154.85242 372.07834 m
186.29878 372.63199 l
S
CM
114.43546 43.909035 m
106.87092 41.30563 l
106.96725 46.777107 l
h
114.43546 43.909035 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
193.81516 372.76431 m
186.25061 375.36771 l
186.34694 369.89624 l
h
193.81516 372.76431 m
S
1 w
189.94881 372.56525 m
193.94881 372.55685 l
S
197.94879 372.54846 m
201.94879 372.54007 l
S
205.94878 372.53168 m
209.94876 372.52332 l
S
213.94876 372.51492 m
217.94875 372.50653 l
S
221.94875 372.49814 m
225.94873 372.48975 l
S
229.94872 372.48138 m
233.94872 372.47299 l
S
237.9487 372.4646 m
241.9487 372.45621 l
S
245.94868 372.44781 m
249.94868 372.43945 l
S
253.94867 372.43106 m
257.94867 372.42267 l
S
261.94864 372.41428 m
265.94864 372.40588 l
S
269.94864 372.39752 m
273.94864 372.38913 l
S
277.94861 372.38074 m
281.94861 372.37234 l
S
285.94861 372.36395 m
289.94858 372.35559 l
S
293.94858 372.3472 m
297.94858 372.33881 l
S
301.94858 372.33041 m
305.94855 372.32202 l
S
309.94855 372.31366 m
313.94855 372.30527 l
S
317.94852 372.29688 m
321.94852 372.28848 l
S
325.94852 372.28009 m
329.94852 372.27173 l
S
333.94849 372.26334 m
337.94849 372.25494 l
S
341.94849 372.24655 m
345.94846 372.23816 l
S
423.87698 341.71686 m
353.05695 369.18362 l
S
CM
266.6684 44.771412 m
272.68787 50.040745 l
274.66666 44.938709 l
h
266.6684 44.771412 m
f
0.25 w
1 0 0 -1 -79.379692 416.67334 cm
346.0481 371.90192 m
352.06757 366.6326 l
354.04636 371.73465 l
h
346.0481 371.90192 m
S
1 w
346.28378 370.96164 m
346.74805 366.98868 l
S
347.21231 363.01572 m
347.67654 359.04276 l
S
348.14081 355.06979 m
348.60507 351.0968 l
S
349.06934 347.12384 m
349.5336 343.15088 l
S
349.99786 339.17792 m
350.46213 335.20496 l
S
350.92636 331.23199 m
351.39062 327.259 l
S
351.85489 323.28604 m
352.31915 319.31308 l
S
352.78342 315.34012 m
353.24768 311.36716 l
S
353.71194 307.3942 m
354.17618 303.4212 l
S
354.64044 299.44824 m
355.10471 295.47528 l
S
355.56897 291.50232 m
356.03323 287.52936 l
S
356.4975 283.5564 m
356.96176 279.5834 l
S
434.65335 248.31003 m
430.92401 249.75641 l
S
427.19467 251.2028 m
423.46533 252.64919 l
S
419.73599 254.09557 m
416.00665 255.54195 l
S
412.27731 256.98834 m
408.54797 258.43472 l
S
404.81863 259.8811 m
401.08929 261.32748 l
S
397.35995 262.77386 m
393.63062 264.22025 l
S
389.90128 265.66663 m
386.17194 267.11301 l
S
382.4426 268.55942 m
378.71326 270.0058 l
S
374.98392 271.45218 m
371.25458 272.89856 l
S
367.52524 274.34494 m
363.7959 275.79132 l
S
360.06656 277.2377 m
356.82446 278.49512 l
S
111.58681 320.54202 m
115.27286 322.09543 l
S
118.95891 323.64883 m
122.64495 325.20224 l
S
126.33099 326.75565 m
130.01704 328.30905 l
S
133.70308 329.86246 m
137.38913 331.41586 l
S
141.07518 332.96927 m
143.30998 333.9111 l
S
153.90787 372.15073 m
152.82657 368.29965 l
S
151.74529 364.44858 m
150.664 360.59747 l
S
149.5827 356.7464 m
148.50142 352.89532 l
S
147.42012 349.04425 m
146.33884 345.19318 l
S
145.25755 341.3421 m
144.17625 337.491 l
S
0 i
/F1.1[ 24 0 0 -24 0 0]sf
105.07094 382.59671 m
(!)s
427.65128 355.63669 m
(!")[ 16.007812 0.000000 ] xS
182.17426 347.14624 m
(#)s
/F2.1[ 18 0 0 -18 0 0]sf
87.689682 329.46335 m
(!")[ 8.894531 0.000000 ] xS
130.86815 406.50708 m
(!#)[ 8.894531 0.000000 ] xS
440.25336 273.82352 m
(!"$)[ 8.894531 10.010742 0.000000 ] xS
440.84998 294.97879 m
(!%)[ 8.894531 0.000000 ] xS
0.60000002 i
440.55533 279.37524 m
461.53369 279.58676 l
S
0 i
379.85562 374.68344 m
(!"$)[ 8.894531 10.010742 0.000000 ] xS
0.60000002 i
379.36432 379.36072 m
400.34265 379.57224 l
S
0 i
380.63016 396.81161 m
(!#)[ 8.894531 0.000000 ] xS
130.94293 385.34631 m
(!")[ 8.894531 0.000000 ] xS
0.60000002 i
86.941071 333.19705 m
107.91943 333.40857 l
S
0 i
87.688873 348.91516 m
(!%)[ 8.894531 0.000000 ] xS
0.60000002 i
129.51511 389.5033 m
150.49345 389.71481 l
S
ep
end
%%Trailer
%%EOF
