%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 348 132
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 348 132
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SUVETO+Helvetica
%!FontType1-1.0: SUVETO+Helvetica 1.0000.0.0000
14 dict begin/FontName /SUVETO+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /a put
dup 34 /one put
dup 35 /two put
dup 36 /three put
dup 37 /four put
dup 38 /N put
dup 39 /zero put
dup 40 /u put
dup 41 /x put
dup 42 /b put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 12 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/N 6 def
/a 7 def
/b 8 def
/u 9 def
/x 10 def
/u20B8 11 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B64DFC330C1264D9E86DB21FFDE360EA73793134E310C3576495659FA930C228F2795196FF3E6FF3F588F9E3B1B3849A2BC2982CBBE7E36632530D7D022F3B1D5F5BB72C556137326233141B7D42148ED23C383940CF5B95F9DB51978B7FBABD4BBE7E009D6F40FFFD0C3171AF15CE32FB11584B94A7EB4E3005C329FDBD5C52C89FC79D53D378F507B2E1DA5DCA04C61EF165FF07989A2BA7328CEDEC34864F144E224BBFFD278F6BA2E6C368F87092ED4CD9889F9F4F29E9A8D88960793BF43C5C617C4B3D7DB1AEE2A1ED8848FB757E38E75114624C6243C47F81F25C7AED36B8CBA25D95A1B99357B3C075CE5B3CA99731F3884149725FE5E99BCBBF29F88914FDD2FF7435173FE30EBE404D318181AD4269C26B3A9AA407B81113B756C8094DA6EB4E7CC9D7105D5380E6254066B9C50F77F038D24C0C95DC6A5FFFC2B95861A49D88FAADFBC5844C30C3CBAEF3AACDC97FFBAEF8B5D7D086A6927AD230CDA08018D66FF2077E1B0B5AA19943597E9401C194CA58EFE247365DE7B491C8616D49BA1EFEC00A650A7CCB09C7D6C34AB5916C0AFD3586040C4A0F57FB6F0FE0439264744BAA3B081F381818024F63617470E3695D3BC3F27324BA1268A1E0CFEA080D1D4324F6EAEDECFC2ACFC86524E50E13E0A50ED6C33F828891056735DA402AA596A6CD1C1C405A6FD782991A9391469CE2B75B6E5DBE71860EB89E03C9CE1F13AA7291EE80160DEDE8608AEDFF4684114FDBBC8610225E2244A81869
EE82C5E7A79EC94F61D1794AAF7E92B8CA77A6013043F93F1280A0ABDDF2F5E49440B59F76A61EA5C1244AF9960C788D6D8313ADBF60EF94D9C8917AA1BB359C5263ACB4DB9E4322FD738BA8B9F95D05BFE39D5E64A06FDC0E9460DA5E7FBACECC3BB17976ADE4569B8AC48C2C6809970AB2AFB1D0853A96CCCD10BCF9ACA6C79ECE753BD6BB2F799CBEB66C76DCFE65A3011B0E59E12A0F965182066EBA88ABC3B50F9F53B9B23433CF3F31E230906452BE9616DF5EDF3201BEF0AD56B39A86EFCEA03B3CB4FB0CEAC51F84F6EDF09AC105DCBF0664E330C7E6C8562E8E0B97356003C1209527F33B3BFE7C944616DF82E98B343AC87F0DD008277C1B04E1F3BCE939A198A288C66FC746836EC8AE25F4F0901FD1BAB67E387A7305515E2D72C2D0E4B10A4EC343706F545B9D0FB6221E00FF9C865008A066A29A192690EDA1550018340B70A7164552AE6B40C7A6E7AC3181587DDBDF40BE8B9C0897F60D7690901E4627601DA1097F186594D0876FB21751872BDF485E73EF6E2B8808258EB37312FCB3EA56CF280B83B33CD16C3C4F2FB74AC9EC8D9895E1765BB031AB46AA145E0B64D3B44B16FB0176AA342DB786DD4231B5B3816A5641916E45DA6A7B6AC2E90C102A08A971A6F257E1B1091E5134F91E480ADC31209D91D6D59EB2159905F08395F849267530F58B0C645663BF102AE17E754DB2DA1CF9D889A561EFEA3EC2898BFE3B3547CF6FE2E5B3AA8E2DE8F839A3C363CB353416DBD2A805F59C28200B92FA201837B02DA821FD3CDD992413D1C0A3C54B0887B5DE53E7306215805477F55AA8C97ACB23AFD206D6E8434443BA7AE1D49206B35DA0F6898130F4ABEE753EB35AB3ED40C650C82D6B49DD39B4D165C753D3D9DEB92821BB39E4C5577B8BE3A5474509C8B0EDFFABFBA654927FE64D2E62587586A7D2D562157F1117EAC4997C566016F93556C4837DF4EFF9B20F63EEE67399DD88749B0193C8DC118BF31031EA8D319268749200C8CBA20A3F976D128A2C4F6E9FF1E8864CD224ED73B6E3815FF289118EC7E7F267E383001C0E630F6B7156C10C9161B7DFDF8B0C5D1B0658E7891977D748592D4D6E007811FF22D36CE5B6EC23822974774404975E9A384AD44A3D7451E61D9225088A9B1531A7C149A6D7C3CE421D4DC9C026ADA3CD7FF4F5F55FE3D4631BE713001F3F21855E18370D0667CD9DE97358C518FC962334C30A5F3D13FC74750C7B8B19715F1E37932CB8D1AE97AC8DBAF7093E28850361202710604F842DB67D6FF2A14182D20B955E1E7A8716E5E77F2FF8DC081818B8326A799C430F10228752770900BDF8B9067CE8000128C0BFD539D9183D94E01B49A69BDC4F9D7C891275CFA3DEC74678454C71D85CAACCF9ED799FE004FFBB1908F6DB0F2F065EC222FDDDE820086E650EF6A8095BBC2B0C5C7E01
9332A7A7A1619AB0912D808B5C126DB422714DD6F1B2D5FDD87BB0DD25A2EE16D52CC5CAF1D86FD960B543136FC2D33498B11B9F0D73FD8D6C76EEECB3F5F1F9CD92F97A10F6110768A2EBC5DF2B3074F49725DD30246A11B954A755028D12A706920DC379B47672C11E6FE72FA2E29A6110EE402318064D12A773108E4004CBC6360B9CC36148EC089E06E634A4A783A18F148061F26FE90679A3D45D1B53221B2AD61E9BBC9AE338C1F31A6EB3BE16BA3310DA587C900D979833B871AB71517772A538
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SUVETO+Helvetica cguidfix
/F1.1/SUVETO+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.75294119 0.75294119 0.75294119 sc
q
0 0 347.78506 131.75101 rc
266.62463 36.195297 m
241.18611 49.169949 153.54002 100.32727 152.3015 100.2587 c
122.10995 98.587151 240.66269 99.577477 268.5791 98.769981 c
269.79276 98.734879 257.12106 61.201546 268.60126 37.677364 c
269.02182 36.815594 268.60126 37.677364 268.60126 37.677364 c
f
1.4173229 w
2 J
0 0 0 sc
1 0 0 -1 -104.67226 257.95511 cm
139.09308 157.61662 m
422.15463 157.61662 l
S
CM
324.99991 100.3385 m
317.48236 97.602341 l
317.48236 103.07466 l
h
324.99991 100.3385 m
f
0.35433072 w
1 0 0 -1 -104.67226 257.95511 cm
429.67218 157.61662 m
422.15463 160.35278 l
422.15463 154.88046 l
h
429.67218 157.61662 m
S
1.4173229 w
[
4
4
] 0 d
0.3764706 0.3764706 0.3764706 sc
139.09308 225.06412 m
422.15463 225.06412 l
S
CM
324.99991 32.890999 m
317.48236 30.154837 l
317.48236 35.627159 l
h
324.99991 32.890999 m
f
0.35433072 w
[] 0 d
1 0 0 -1 -104.67226 257.95511 cm
429.67218 225.06412 m
422.15463 227.80029 l
422.15463 222.32796 l
h
429.67218 225.06412 m
S
0 0 0 sc
0 i
/F1.1[ 18 0 0 -18 0 0]sf
168.55989 247.78114 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
178.57063 252.78114 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
246.80553 247.78114 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
256.81625 252.78114 m
(#)s
0.89411765 0 1 sc
/F1.1[ 18 0 0 -18 0 0]sf
366.62994 247.78114 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
376.64069 252.78114 m
($)s
0 0 0 sc
/F1.1[ 18 0 0 -18 0 0]sf
424.86337 247.78114 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
434.87411 252.78114 m
(%)s
/F1.1[ 18 0 0 -18 0 0]sf
167.81667 214.19083 m
(&")[ 12.999023 0.000000 ] xS
245.43285 213.81703 m
(&#)[ 12.999023 0.000000 ] xS
0.89411765 0 1 sc
364.40646 213.81703 m
(&$)[ 12.999023 0.000000 ] xS
0 0 0 sc
423.39197 213.81703 m
(&%)[ 12.999023 0.000000 ] xS
2.8346457 w
0.60000002 i
0.89411765 0 1 sc
256.81161 157.61662 m
375.01926 157.61662 l
S
0 0 0 sc
0 i
133.20448 144.20412 m
(')s
426.41653 144.20412 m
(")s
2.1259842 w
0.60000002 i
256.49728 149.08653 m
256.49728 166.14671 l
S
375.52228 149.08653 m
375.52228 166.14671 l
S
0 i
109.67226 164.4445 m
(\()s
/F1.1[ 10 0 0 -10 0 0]sf
119.683 168.4445 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
109.67226 231.06412 m
(\))s
/F1.1[ 10 0 0 -10 0 0]sf
118.67226 235.06412 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
251.33974 144.20412 m
(!)s
372.94333 144.20412 m
(*)s
0.60000002 i
CM
76.899429 33.529472 m
76.899796 34.185726 76.76931 34.841694 76.517838 35.447853 c
76.267036 36.054291 75.895462 36.610394 75.43116 37.074177 c
74.967377 37.538475 74.411278 37.910049 73.80484 38.160854 c
73.198677 38.412327 72.542709 38.542805 71.886459 38.542442 c
71.230202 38.542805 70.574234 38.412327 69.968079 38.160854 c
69.361641 37.910049 68.805534 37.538475 68.341751 37.074177 c
67.877449 36.610394 67.505875 36.054291 67.255074 35.447853 c
67.003601 34.841694 66.873123 34.185726 66.873482 33.529472 c
66.873123 32.873219 67.003601 32.217251 67.255074 31.61109 c
67.505875 31.004652 67.877449 30.448549 68.341751 29.984766 c
68.805534 29.520468 69.361641 29.148891 69.968079 28.898088 c
70.574234 28.646616 71.230202 28.516136 71.886459 28.5165 c
72.542709 28.516136 73.198677 28.646616 73.80484 28.898088 c
74.411278 29.148891 74.967377 29.520468 75.43116 29.984766 c
75.895462 30.448549 76.267036 31.004652 76.517838 31.61109 c
76.76931 32.217251 76.899796 32.873219 76.899429 33.529472 c
h
76.899429 33.529472 m
f
1 w
1 0 0 -1 -104.67226 257.95511 cm
181.57169 224.42566 m
181.57205 223.76939 181.44157 223.11343 181.19009 222.50726 c
180.9393 221.90083 180.56772 221.34473 180.10342 220.88095 c
179.63963 220.41664 179.08354 220.04507 178.4771 219.79427 c
177.87094 219.5428 177.21497 219.41232 176.55872 219.41267 c
175.90247 219.41232 175.24649 219.5428 174.64034 219.79427 c
174.03391 220.04507 173.4778 220.41664 173.01401 220.88095 c
172.54971 221.34473 172.17813 221.90083 171.92734 222.50726 c
171.67586 223.11343 171.54538 223.76939 171.54575 224.42566 c
171.54538 225.08191 171.67586 225.73787 171.92734 226.34404 c
172.17813 226.95047 172.54971 227.50658 173.01401 227.97035 c
173.4778 228.43466 174.03391 228.80623 174.64034 229.05704 c
175.24649 229.3085 175.90247 229.43898 176.55872 229.43863 c
177.21497 229.43898 177.87094 229.3085 178.4771 229.05704 c
179.08354 228.80623 179.63963 228.43466 180.10342 227.97035 c
180.56772 227.50658 180.9393 226.95047 181.19009 226.34404 c
181.44157 225.73787 181.57205 225.08191 181.57169 224.42566 c
h
181.57169 224.42566 m
S
CM
156.838 33.529472 m
156.83836 34.185726 156.70789 34.841694 156.45641 35.447853 c
156.20561 36.054291 155.83403 36.610394 155.36974 37.074177 c
154.90594 37.538475 154.34985 37.910049 153.74341 38.160854 c
153.13725 38.412327 152.48128 38.542805 151.82503 38.542442 c
151.16878 38.542805 150.51282 38.412327 149.90665 38.160854 c
149.30022 37.910049 148.74411 37.538475 148.28032 37.074177 c
147.81602 36.610394 147.44446 36.054291 147.19365 35.447853 c
146.94217 34.841694 146.81169 34.185726 146.81206 33.529472 c
146.81169 32.873219 146.94217 32.217251 147.19365 31.61109 c
147.44446 31.004652 147.81602 30.448549 148.28032 29.984766 c
148.74411 29.520468 149.30022 29.148891 149.90665 28.898088 c
150.51282 28.646616 151.16878 28.516136 151.82503 28.5165 c
152.48128 28.516136 153.13725 28.646616 153.74341 28.898088 c
154.34985 29.148891 154.90594 29.520468 155.36974 29.984766 c
155.83403 30.448549 156.20561 31.004652 156.45641 31.61109 c
156.70789 32.217251 156.83836 32.873219 156.838 33.529472 c
h
156.838 33.529472 m
f
1 0 0 -1 -104.67226 257.95511 cm
261.51025 224.42566 m
261.51062 223.76939 261.38016 223.11343 261.12866 222.50726 c
260.87787 221.90083 260.50629 221.34473 260.04199 220.88095 c
259.57822 220.41664 259.02213 220.04507 258.41568 219.79427 c
257.80951 219.5428 257.15353 219.41232 256.49728 219.41267 c
255.84103 219.41232 255.18507 219.5428 254.5789 219.79427 c
253.97247 220.04507 253.41637 220.41664 252.95259 220.88095 c
252.48828 221.34473 252.11671 221.90083 251.86591 222.50726 c
251.61444 223.11343 251.48396 223.76939 251.48431 224.42566 c
251.48396 225.08191 251.61444 225.73787 251.86591 226.34404 c
252.11671 226.95047 252.48828 227.50658 252.95259 227.97035 c
253.41637 228.43466 253.97247 228.80623 254.5789 229.05704 c
255.18507 229.3085 255.84103 229.43898 256.49728 229.43863 c
257.15353 229.43898 257.80951 229.3085 258.41568 229.05704 c
259.02213 228.80623 259.57822 228.43466 260.04199 227.97035 c
260.50629 227.50658 260.87787 226.95047 261.12866 226.34404 c
261.38016 225.73787 261.51062 225.08191 261.51025 224.42566 c
h
261.51025 224.42566 m
S
CM
275.86301 33.529472 m
275.86337 34.185726 275.73288 34.841694 275.48141 35.447853 c
275.23062 36.054291 274.85904 36.610394 274.39474 37.074177 c
273.93094 37.538475 273.37485 37.910049 272.7684 38.160854 c
272.16226 38.412327 271.50629 38.542805 270.85004 38.542442 c
270.19379 38.542805 269.53781 38.412327 268.93164 38.160854 c
268.32523 37.910049 267.7691 37.538475 267.30533 37.074177 c
266.84103 36.610394 266.46945 36.054291 266.21866 35.447853 c
265.96716 34.841694 265.8367 34.185726 265.83707 33.529472 c
265.8367 32.873219 265.96716 32.217251 266.21866 31.61109 c
266.46945 31.004652 266.84103 30.448549 267.30533 29.984766 c
267.7691 29.520468 268.32523 29.148891 268.93164 28.898088 c
269.53781 28.646616 270.19379 28.516136 270.85004 28.5165 c
271.50629 28.516136 272.16226 28.646616 272.7684 28.898088 c
273.37485 29.148891 273.93094 29.520468 274.39474 29.984766 c
274.85904 30.448549 275.23062 31.004652 275.48141 31.61109 c
275.73288 32.217251 275.86337 32.873219 275.86301 33.529472 c
h
275.86301 33.529472 m
f
1 0 0 -1 -104.67226 257.95511 cm
380.53525 224.42566 m
380.53561 223.76939 380.40515 223.11343 380.15369 222.50726 c
379.90286 221.90083 379.53128 221.34473 379.06699 220.88095 c
378.60321 220.41664 378.04712 220.04507 377.44067 219.79427 c
376.8345 219.5428 376.17856 219.41232 375.52228 219.41267 c
374.86603 219.41232 374.21008 219.5428 373.60391 219.79427 c
372.99747 220.04507 372.44138 220.41664 371.97757 220.88095 c
371.51328 221.34473 371.14172 221.90083 370.8909 222.50726 c
370.63943 223.11343 370.50894 223.76939 370.50931 224.42566 c
370.50894 225.08191 370.63943 225.73787 370.8909 226.34404 c
371.14172 226.95047 371.51328 227.50658 371.97757 227.97035 c
372.44138 228.43466 372.99747 228.80623 373.60391 229.05704 c
374.21008 229.3085 374.86603 229.43898 375.52228 229.43863 c
376.17856 229.43898 376.8345 229.3085 377.44067 229.05704 c
378.04712 228.80623 378.60321 228.43466 379.06699 227.97035 c
379.53128 227.50658 379.90286 226.95047 380.15369 226.34404 c
380.40515 225.73787 380.53561 225.08191 380.53525 224.42566 c
h
380.53525 224.42566 m
S
CM
336.53644 33.101517 m
336.5368 33.757771 336.40631 34.413738 336.15485 35.019897 c
335.90402 35.626335 335.53247 36.182438 335.06815 36.646221 c
334.60437 37.110519 334.04828 37.482098 333.44183 37.732899 c
332.83566 37.984371 332.17972 38.114853 331.52347 38.114487 c
330.86719 38.114853 330.21124 37.984371 329.60507 37.732899 c
328.99863 37.482098 328.44254 37.110519 327.97876 36.646221 c
327.51443 36.182438 327.14288 35.626335 326.89206 35.019897 c
326.64059 34.413738 326.51013 33.757771 326.51047 33.101517 c
326.51013 32.445263 326.64059 31.789295 326.89206 31.183136 c
327.14288 30.576696 327.51443 30.020596 327.97876 29.55681 c
328.44254 29.092512 328.99863 28.720938 329.60507 28.470135 c
330.21124 28.218662 330.86719 28.088182 331.52347 28.088545 c
332.17972 28.088182 332.83566 28.218662 333.44183 28.470135 c
334.04828 28.720938 334.60437 29.092512 335.06815 29.55681 c
335.53247 30.020596 335.90402 30.576696 336.15485 31.183136 c
336.40631 31.789295 336.5368 32.445263 336.53644 33.101517 c
h
336.53644 33.101517 m
f
1 0 0 -1 -104.67226 257.95511 cm
441.20868 224.85361 m
441.20905 224.19736 441.07858 223.54138 440.82709 222.93523 c
440.57629 222.32878 440.20471 221.77269 439.74042 221.3089 c
439.27664 220.8446 438.72052 220.47302 438.11411 220.22223 c
437.50793 219.97075 436.85196 219.84027 436.19571 219.84064 c
435.53946 219.84027 434.88348 219.97075 434.27734 220.22223 c
433.6709 220.47302 433.11481 220.8446 432.651 221.3089 c
432.18671 221.77269 431.81512 222.32878 431.56433 222.93523 c
431.31287 223.54138 431.18237 224.19736 431.18274 224.85361 c
431.18237 225.50986 431.31287 226.16583 431.56433 226.77199 c
431.81512 227.37843 432.18671 227.93452 432.651 228.39832 c
433.11481 228.86261 433.6709 229.23419 434.27734 229.48499 c
434.88348 229.73647 435.53946 229.86694 436.19571 229.86658 c
436.85196 229.86694 437.50793 229.73647 438.11411 229.48499 c
438.72052 229.23419 439.27664 228.86261 439.74042 228.39832 c
440.20471 227.93452 440.57629 227.37843 440.82709 226.77199 c
441.07858 226.16583 441.20905 225.50986 441.20868 224.85361 c
h
441.20868 224.85361 m
S
2.1259842 w
432.06833 149.08653 m
432.06833 166.14671 l
S
176.55872 149.08653 m
176.55872 166.14671 l
S
139.41223 149.08653 m
139.41223 166.14671 l
S
ep
end
%%Trailer
%%EOF
