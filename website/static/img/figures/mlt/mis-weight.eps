%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 428 183
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 428 183
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JFTKYF+JCfg
%!FontType1-1.0: JFTKYF+JCfg 1.0000.1.0000
14 dict begin/FontName /JFTKYF+JCfg def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /gid84 put
dup 34 /gid77 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1024 -14 1 index div -214 2 index div 1051 3 index div 821 5 -1 roll div]cvx def
/sfnts [<

000A000000AA0138000100014001018DB801FF85
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/gid1 1 def
/gid77 2 def
/gid84 3 def
/gid5263 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.0009765625 0 0 0.0009765625 0 0 ] def
/FontBBox{-14 -214 1051 821}def
/UniqueID 4312528 def
currentdict currentfile eexec

4CFA488FF1B02F55E9667969E1DC0FCD466104321548765AA75D66F6134F5CD88AAD6C48DF4F847835FC2C7E825B6D507D4DC15E61BA8D0FD883DD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JFTKYF+JCfg cguidfix
/F1.1/JFTKYF+JCfg renmfont
%RBIBeginFontSubset: CIPUSX+Helvetica
%!FontType1-1.0: CIPUSX+Helvetica 1.0000.0.0000
14 dict begin/FontName /CIPUSX+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /one put
dup 35 /two put
dup 36 /u put
dup 37 /space put
dup 38 /equal put
dup 39 /parenleft put
dup 40 /a put
dup 41 /comma put
dup 42 /b put
dup 43 /c put
dup 44 /period put
dup 45 /parenright put
dup 46 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







6820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/period 5 def
/zero 6 def
/one 7 def
/two 8 def
/equal 9 def
/a 10 def
/b 11 def
/c 12 def
/d 13 def
/u 14 def
/u20B8 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4003230 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA926699F2E8022F1D1331DFE6254733147DDB94E77EAC1EAD51170D66C31355D7FFC56C96F93071D2CDD5F60123EB639124E6FA384D09402728516BADCC77378B258B448C4E6A3F1BEB963171E0A57B529B7AF9E2DECB511A9918E27E64F7FD02A30DA5F4DE76625446B3C9697A9DC254AB5998E0B21E386921C16DB40AB5D250BC087F921EE39EFEA12C527394D8DCCBAE91535590E44101244A982B3B619EA4D06DF31A710F34A5CB91E07822B9CB55D28EF5A8F4F62286C8F56011F9D32C2A3813220F753B260F6F0ECB71D82DF8D4EB21A8E3F88FB6A62DCDC25ACBE1E66C10DB1B8F0E72E1E150B75E16BC5A66417709D8EE494389462A88DAB78611EB5841C4D62D814207CED3E53BDEC85AB0F0DFAA190B0B8C00204BBA3048CFEF3CBDA887ADF20E5832A36B8BF77DCBC08CC9B3FD92C2B979A2E66A4847AE53B76E87E8E969619B5387C2E959A9A15D19AAFB0323AC8ABCCD69AC8F7CCB8DC95118734CB7712E108F3295D7B5B5DD85C54C1C7ECA41E4AF08689C864AD14EDB4700174CFB9A115B95DF2595B60DB231A4AC1E28299473EF404068D3493CC339941CBEF3CB5B4BCE0E7ED16E1EB3C45F77B25C197BAD8A3F0E00CD1EA9896B123CDC0855C59CFF653EE0B4B03DDB5967FCF377274DA88778900D7D4A6DD767C7445B97C58F68848A5367E6B32B7010D7D659543FD9AB2CF7005EC3ABD5DA43F09D46F9C714F27D6A5

D166F813F2862C68614C7717CA94D75DDF8CB15D7B967FDCD027605F427B874BDC200EB88307DF6440BA1FE91A743CB1172035CA4D38762EAB9DF1613609C70F69A30416747E98997341CB39829A337596039735E420F76BC482D260A0F2DB32DED65D7646FA407BCF014D443CD75891560E38586256D7FE5E0984FCE24E21D4DCFED211E529F7BDB2CAA8918A305EBB883A5628DA4A89D3A2042DC6BBEA07EA679C11952F7988942D35BA8B5F6C14CF426ED5B93169B23A56C135BADC81E452ED76AAA1E93FE092B4476D27A414940490376FAD4DA79521A2E369E9A23190A69446C46C69461C8948C036ED95BABFA297ED907BAD0441411EACD6919963212F59C6D33F3320A23D9630BF2BF81981B383952CB3C42E0259EAA61D6D2521039412454E42C932A3379D287962B10D97023AE9EE2F2025BF51171EB87F077FE2899FAC265670332017ADBC31B4AC187A9076BF709588599EC6CA2EDE3BC5794C3B983915CFE5B559AA2AF495BC095529BAE25E89895DFBB2BCADA29C77B75DFE218C39E8A2D33485266D0C55C5A1921B60255532F5554D5AD51849B57BF2686296C8BEAC211A128E1CDFCB937C2225E3179833C9BDB733306C7E1111EE7A4CA7B0A106941A42EAACC1DCD0B091C71AE115BB3C7DB2AAEDDD969AC3EDD1E0C02114DEF281F13534A4FB1708F51D90F0ECEBC3A0BFFE9D7B7D1628A4D0D8CEBA1426EC46B24EE3CB2FDC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CIPUSX+Helvetica cguidfix
/F2.1/CIPUSX+Helvetica renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
1.4173229 w
2 J
0.60000002 i
/Cs1 SC
0.0031433066 0.65237671 0.31543767 sc
q
0 0 427.20422 182.02452 rc
1 0 0 -1 -68.093819 362.78183 cm
338.71872 251.10712 m
434.05826 221.57129 l
S
CM
269.52109 113.28497 m
271.08319 111.72287 271.08319 109.19021 269.52109 107.62811 c
267.95901 106.06602 265.42633 106.06602 263.86426 107.62811 c
262.30215 109.19021 262.30215 111.72287 263.86426 113.28497 c
265.42633 114.84706 267.95901 114.84706 269.52109 113.28497 c
372.72513 145.25717 m
374.2872 143.69507 374.2872 141.16241 372.72513 139.60031 c
371.16302 138.03821 368.63037 138.03821 367.06827 139.60031 c
365.50616 141.16241 365.50616 143.69507 367.06827 145.25717 c
368.63037 146.81926 371.16302 146.81926 372.72513 145.25717 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
337.61493 249.49687 m
339.177 251.05898 339.177 253.59163 337.61493 255.15373 c
336.05283 256.71582 333.52017 256.71582 331.95807 255.15373 c
330.39597 253.59163 330.39597 251.05898 331.95807 249.49687 c
333.52017 247.93478 336.05283 247.93478 337.61493 249.49687 c
440.81894 217.52467 m
442.38104 219.08678 442.38104 221.61943 440.81894 223.18153 c
439.25684 224.74362 436.72418 224.74362 435.16208 223.18153 c
433.59998 221.61943 433.59998 219.08678 435.16208 217.52467 c
436.72418 215.96259 439.25684 215.96259 440.81894 217.52467 c
S
1.4173229 w
0.43921569 0.43921569 0.43921569 sc
219.26826 214.56056 m
223.06355 215.82382 l
S
226.85884 217.08708 m
230.65413 218.35033 l
S
234.4494 219.61359 m
238.24469 220.87685 l
S
242.03998 222.14011 m
245.83527 223.40337 l
S
249.63054 224.66663 m
253.42583 225.92987 l
S
257.2211 227.19313 m
261.01639 228.45639 l
S
264.81168 229.71965 m
268.60696 230.98291 l
S
272.40225 232.24617 m
276.19754 233.50941 l
S
279.99283 234.77267 m
283.78809 236.03593 l
S
287.58337 237.29919 m
291.37866 238.56245 l
S
295.17395 239.82571 m
298.96924 241.08896 l
S
302.76453 242.35222 m
306.55981 243.61548 l
S
310.35507 244.87874 m
314.15036 246.142 l
S
317.94565 247.40526 m
321.74094 248.6685 l
S
325.53622 249.93176 m
329.33151 251.19502 l
S
333.1268 252.45828 m
334.25162 252.83269 l
S
1 0.50256407 0.50031406 sc
219.72774 214.59433 m
311.44846 213.52153 l
S
CM
250.29939 152.13689 m
251.86148 150.57478 251.86148 148.04213 250.29939 146.48003 c
248.73729 144.91794 246.20464 144.91794 244.64253 146.48003 c
243.08043 148.04213 243.08043 150.57478 244.64253 152.13689 c
246.20464 153.69897 248.73729 153.69897 250.29939 152.13689 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
318.39322 210.64496 m
319.95529 212.20706 319.95529 214.73972 318.39322 216.30182 c
316.83112 217.86391 314.29846 217.86391 312.73636 216.30182 c
311.17426 214.73972 311.17426 212.20706 312.73636 210.64496 c
314.29846 209.08286 316.83112 209.08286 318.39322 210.64496 c
S
1.4173229 w
0.82889348 0.11954721 0.14389059 sc
120.41858 245.23645 m
215.75812 215.70064 l
S
CM
51.220947 119.15562 m
52.783047 117.59353 52.783047 115.06087 51.220947 113.49877 c
49.658852 111.93667 47.12619 111.93667 45.564095 113.49877 c
44.001995 115.06087 44.001995 117.59353 45.564095 119.15562 c
47.12619 120.71772 49.658852 120.71772 51.220947 119.15562 c
154.42497 151.12782 m
155.98706 149.56572 155.98706 147.03307 154.42497 145.47096 c
152.86287 143.90887 150.33022 143.90887 148.76811 145.47096 c
147.20601 147.03307 147.20601 149.56572 148.76811 151.12782 c
150.33022 152.68993 152.86287 152.68993 154.42497 151.12782 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
119.31477 243.62622 m
120.87686 245.18831 120.87686 247.72098 119.31477 249.28307 c
117.75267 250.84517 115.22001 250.84517 113.65791 249.28307 c
112.09582 247.72098 112.09582 245.18831 113.65791 243.62622 c
115.22001 242.06412 117.75267 242.06412 119.31477 243.62622 c
222.51878 211.65402 m
224.08089 213.21611 224.08089 215.74878 222.51878 217.31087 c
220.95668 218.87297 218.42403 218.87297 216.86192 217.31087 c
215.29984 215.74878 215.29984 213.21611 216.86192 211.65402 c
218.42403 210.09192 220.95668 210.09192 222.51878 211.65402 c
S
0 0 0 sc
CM
398.67215 110.48137 m
398.97308 110.48178 399.27402 110.42238 399.56619 110.30664 c
399.8584 110.19112 400.14169 110.01939 400.40897 109.80094 c
400.67636 109.58262 400.92764 109.31779 401.15836 109.01944 c
401.38919 108.72112 401.59949 108.38949 401.78766 108.03823 c
401.97589 107.68691 402.14203 107.3161 402.2868 106.93795 c
402.43164 106.5597 402.55518 106.17416 402.65967 105.79079 c
402.76416 105.4073 402.84967 105.02597 402.91916 104.65331 c
402.98865 104.28056 403.04214 103.91643 403.08276 103.56484 c
403.12338 103.21318 403.15112 102.87402 403.16891 102.54927 c
403.18668 102.22447 403.19446 101.91404 403.19473 101.61848 c
403.19501 101.32293 403.18784 101.01248 403.17068 100.68764 c
403.15356 100.36286 403.12646 100.02365 403.08652 99.671913 c
403.04657 99.320251 402.99377 98.956024 402.92499 98.583138 c
402.85623 98.210342 402.77145 97.82885 402.66769 97.445168 c
402.56393 97.061592 402.44116 96.675812 402.29703 96.297287 c
402.15298 95.918854 401.98755 95.547722 401.79999 95.196053 c
401.61252 94.844429 401.40286 94.51239 401.17258 94.213631 c
400.94244 93.914841 400.69165 93.649521 400.42471 93.430687 c
400.15787 93.211731 399.87488 93.039459 399.58289 92.923378 c
399.29095 92.807068 398.99014 92.747086 398.68918 92.746925 c
398.38821 92.746513 398.08728 92.805916 397.79514 92.921654 c
397.50293 93.037178 397.2196 93.2089 396.95233 93.427353 c
396.68497 93.645676 396.43369 93.910507 396.20294 94.208855 c
395.97211 94.507172 395.76181 94.838806 395.57367 95.190063 c
395.38544 95.541382 395.21927 95.912193 395.07449 96.290344 c
394.92966 96.668594 394.80612 97.054138 394.70166 97.437508 c
394.59714 97.820992 394.51163 98.202324 394.44214 98.574982 c
394.37265 98.947739 394.31915 99.311867 394.27853 99.663452 c
394.23792 100.01511 394.21017 100.35427 394.19241 100.67902 c
394.17465 101.00382 394.16687 101.31425 394.16656 101.60981 c
394.16629 101.90536 394.17349 102.21581 394.19061 102.54065 c
394.20776 102.86543 394.23486 103.20464 394.27481 103.55638 c
394.31476 103.90804 394.36755 104.27227 394.43631 104.64516 c
394.5051 105.01795 394.58984 105.39944 394.69363 105.78313 c
394.79736 106.1667 394.92017 106.55248 395.06427 106.93101 c
395.20831 107.30944 395.37375 107.68057 395.56131 108.03224 c
395.74881 108.38387 395.95847 108.7159 396.18872 109.01466 c
396.41888 109.31345 396.66965 109.57877 396.93661 109.79761 c
397.20346 110.01656 397.48645 110.18884 397.77841 110.30492 c
398.07034 110.42123 398.37119 110.48121 398.67215 110.48137 c
f
1 w
0.57421893 0.59330374 0.59330374 -0.57421893 -1.1575829 -27.498957 cm
456.85385 231.74568 m
457.1077 232.00725 457.30948 232.31918 457.45483 232.67093 c
457.60043 233.02254 457.68961 233.41374 457.72461 233.83034 c
457.75983 234.24692 457.741 234.68867 457.67569 235.14076 c
457.6105 235.59293 457.49902 236.05528 457.35181 236.51489 c
457.20459 236.97462 457.02182 237.43155 456.81467 237.87605 c
456.60748 238.32069 456.37601 238.75294 456.13037 239.16679 c
455.88464 239.58075 455.62482 239.97635 455.35901 240.35071 c
455.09314 240.72514 454.82132 241.07841 454.54956 241.4099 c
454.27771 241.74144 454.00592 242.05125 453.73828 242.34026 c
453.47055 242.62929 453.20694 242.89754 452.94998 243.14673 c
452.69299 243.39592 452.41678 243.65115 452.11963 243.90984 c
451.82254 244.16849 451.50452 244.43062 451.16476 244.69212 c
450.82507 244.95355 450.46362 245.21439 450.08118 245.46863 c
449.69879 245.72278 449.29538 245.97032 448.87408 246.20319 c
448.45288 246.43597 448.0137 246.65405 447.5629 246.84746 c
447.11224 247.04085 446.6499 247.20947 446.18585 247.34245 c
445.72195 247.47546 445.25638 247.57266 444.80243 247.62392 c
444.34854 247.67528 443.9064 247.68051 443.49112 247.63251 c
443.07578 247.5847 442.68753 247.48352 442.34055 247.32719 c
441.99344 247.1711 441.68787 246.95981 441.43423 246.69803 c
441.18039 246.43646 440.97861 246.12453 440.83325 245.77278 c
440.68765 245.42117 440.59848 245.02997 440.56348 244.61337 c
440.52826 244.19679 440.54709 243.75505 440.6124 243.30295 c
440.67758 242.85078 440.78906 242.38843 440.93628 241.92882 c
441.0835 241.4691 441.26627 241.01218 441.47339 240.56766 c
441.6806 240.12302 441.91208 239.69077 442.15771 239.27693 c
442.40341 238.86298 442.66327 238.46738 442.92908 238.09302 c
443.19495 237.71857 443.46677 237.36531 443.73853 237.03381 c
444.01038 236.70227 444.28217 236.39246 444.5498 236.10345 c
444.81754 235.81442 445.08115 235.54617 445.3381 235.29698 c
445.59509 235.04779 445.87131 234.79257 446.16846 234.53387 c
446.46555 234.27524 446.78357 234.01311 447.12332 233.7516 c
447.46301 233.49016 447.82446 233.22932 448.20691 232.9751 c
448.58926 232.72095 448.99268 232.47339 449.414 232.24052 c
449.83521 232.00774 450.27438 231.78967 450.72519 231.59625 c
451.17584 231.40288 451.63818 231.23424 452.10223 231.10126 c
452.56613 230.96826 453.03171 230.87105 453.48566 230.81979 c
453.93954 230.76843 454.38168 230.7632 454.79697 230.8112 c
455.21228 230.85901 455.60056 230.96019 455.94754 231.11653 c
456.29465 231.27263 456.60022 231.4839 456.85385 231.74568 c
S
437.32141 245.8808 m
472.23563 262.74084 l
455.09274 226.23973 l
S
1.4173229 w
1 0 0 -1 -68.093819 362.78183 cm
100.25502 286.31619 m
68.901459 291.11075 l
S
95.290298 279.96902 m
73.86618 297.45792 l
S
90.341629 273.93878 m
78.814857 303.48819 l
S
74.664665 276.3349 m
94.491814 301.09207 l
S
82.36026 275.06451 m
86.796227 302.36243 l
S
71.648903 283.80981 m
97.507576 293.61713 l
S
0.91094005 0.70545441 0.33410352 sc
CM
25.456381 74.068367 m
25.457031 75.242897 25.223505 76.416908 24.773432 77.501785 c
24.324558 78.587158 23.659533 79.582443 22.828556 80.412498 c
21.998497 81.243477 21.003214 81.908501 19.917843 82.357376 c
18.832966 82.807449 17.658951 83.040977 16.484423 83.040329 c
15.309893 83.040977 14.135877 82.807449 13.051002 82.357376 c
11.96563 81.908501 10.970347 81.243477 10.140288 80.412498 c
9.3093119 79.582443 8.6442852 78.587158 8.1954117 77.501785 c
7.7453394 76.416908 7.5118132 75.242897 7.5124621 74.068367 c
7.5118132 72.893837 7.7453394 71.719826 8.1954117 70.634949 c
8.6442852 69.549576 9.3093119 68.554291 10.140288 67.724236 c
10.970347 66.893257 11.96563 66.228233 13.051002 65.779358 c
14.135877 65.329285 15.309893 65.095757 16.484423 65.096405 c
17.658951 65.095757 18.832966 65.329285 19.917843 65.779358 c
21.003214 66.228233 21.998497 66.893257 22.828556 67.724236 c
23.659533 68.554291 24.324558 69.549576 24.773432 70.634949 c
25.223505 71.719826 25.457031 72.893837 25.456381 74.068367 c
h
25.456381 74.068367 m
f
2.5815804 w
0 0 0 sc
1 0 0 -1 -68.093819 362.78183 cm
93.550201 288.71347 m
93.55085 287.53894 93.317322 286.36493 92.867249 285.28006 c
92.418373 284.19467 91.753349 283.1994 90.922371 282.36935 c
90.092316 281.53836 89.097031 280.87335 88.011658 280.42447 c
86.926788 279.9744 85.752769 279.74088 84.578239 279.74152 c
83.403709 279.74088 82.229698 279.9744 81.144821 280.42447 c
80.059448 280.87335 79.064163 281.53836 78.234108 282.36935 c
77.40313 283.1994 76.738106 284.19467 76.28923 285.28006 c
75.839157 286.36493 75.605629 287.53894 75.606277 288.71347 c
75.605629 289.888 75.839157 291.06201 76.28923 292.14688 c
76.738106 293.23227 77.40313 294.22754 78.234108 295.05762 c
79.064163 295.88858 80.059448 296.55362 81.144821 297.00247 c
82.229698 297.45255 83.403709 297.6861 84.578239 297.68542 c
85.752769 297.6861 86.926788 297.45255 88.011658 297.00247 c
89.097031 296.55362 90.092316 295.88858 90.922371 295.05762 c
91.753349 294.22754 92.418373 293.23227 92.867249 292.14688 c
93.317322 291.06201 93.55085 289.888 93.550201 288.71347 c
h
93.550201 288.71347 m
S
1.4173229 w
0.0031433066 0.65237671 0.31543767 sc
338.71872 330.45712 m
434.05826 300.9213 l
S
CM
269.52109 33.934967 m
271.08319 32.372871 271.08319 29.84021 269.52109 28.278112 c
267.95901 26.716015 265.42633 26.716015 263.86426 28.278112 c
262.30215 29.84021 262.30215 32.372871 263.86426 33.934967 c
265.42633 35.497063 267.95901 35.497063 269.52109 33.934967 c
372.72513 65.907166 m
374.2872 64.34507 374.2872 61.812408 372.72513 60.250313 c
371.16302 58.688213 368.63037 58.688213 367.06827 60.250313 c
365.50616 61.812408 365.50616 64.34507 367.06827 65.907166 c
368.63037 67.469261 371.16302 67.469261 372.72513 65.907166 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
337.61493 328.84686 m
339.177 330.40897 339.177 332.94162 337.61493 334.50372 c
336.05283 336.06583 333.52017 336.06583 331.95807 334.50372 c
330.39597 332.94162 330.39597 330.40897 331.95807 328.84686 c
333.52017 327.28479 336.05283 327.28479 337.61493 328.84686 c
440.81894 296.87466 m
442.38104 298.43677 442.38104 300.96942 440.81894 302.53152 c
439.25684 304.09363 436.72418 304.09363 435.16208 302.53152 c
433.59998 300.96942 433.59998 298.43677 435.16208 296.87466 c
436.72418 295.31259 439.25684 295.31259 440.81894 296.87466 c
S
1.4173229 w
0.43921569 0.43921569 0.43921569 sc
219.26826 293.91055 m
223.06355 295.17383 l
S
226.85884 296.43707 m
230.65413 297.70035 l
S
234.4494 298.96359 m
238.24469 300.22684 l
S
242.03998 301.49011 m
245.83527 302.75336 l
S
249.63054 304.01663 m
253.42583 305.27988 l
S
257.2211 306.54312 m
261.01639 307.8064 l
S
264.81168 309.06964 m
268.60696 310.33292 l
S
272.40225 311.59616 m
276.19754 312.85944 l
S
279.99283 314.12268 m
283.78809 315.38593 l
S
287.58337 316.6492 m
291.37866 317.91245 l
S
295.17395 319.17572 m
298.96924 320.43896 l
S
302.76453 321.70221 m
306.55981 322.96548 l
S
310.35507 324.22873 m
314.15036 325.492 l
S
317.94565 326.75525 m
321.74094 328.01852 l
S
325.53622 329.28177 m
329.33151 330.54501 l
S
333.1268 331.80829 m
334.25162 332.18268 l
S
1 0.50256407 0.50031406 sc
219.79385 293.82043 m
248.77548 338.69937 l
S
CM
185.7433 23.452682 m
187.3054 21.890585 187.3054 19.357925 185.7433 17.795828 c
184.18121 16.23373 181.64854 16.23373 180.08646 17.795828 c
178.52435 19.357925 178.52435 21.890585 180.08646 23.452682 c
181.64854 25.01478 184.18121 25.01478 185.7433 23.452682 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
253.83713 339.32916 m
255.39922 340.89127 255.39922 343.42392 253.83713 344.98602 c
252.27502 346.5481 249.74237 346.5481 248.18027 344.98602 c
246.61818 343.42392 246.61818 340.89127 248.18027 339.32916 c
249.74237 337.76706 252.27502 337.76706 253.83713 339.32916 c
S
1.4173229 w
0.82889348 0.11954721 0.14389059 sc
120.41858 324.58646 m
215.75812 295.05063 l
S
CM
51.220947 39.805622 m
52.783047 38.243526 52.783047 35.710865 51.220947 34.148769 c
49.658852 32.586674 47.12619 32.586674 45.564095 34.148769 c
44.001995 35.710865 44.001995 38.243526 45.564095 39.805622 c
47.12619 41.367722 49.658852 41.367722 51.220947 39.805622 c
154.42497 71.777824 m
155.98706 70.215729 155.98706 67.683067 154.42497 66.120972 c
152.86287 64.558868 150.33022 64.558868 148.76811 66.120972 c
147.20601 67.683067 147.20601 70.215729 148.76811 71.777824 c
150.33022 73.33992 152.86287 73.33992 154.42497 71.777824 c
f
0.35433072 w
1 0 0 -1 -68.093819 362.78183 cm
119.31477 322.97623 m
120.87686 324.53833 120.87686 327.07098 119.31477 328.63309 c
117.75267 330.19516 115.22001 330.19516 113.65791 328.63309 c
112.09582 327.07098 112.09582 324.53833 113.65791 322.97623 c
115.22001 321.41412 117.75267 321.41412 119.31477 322.97623 c
222.51878 291.00403 m
224.08089 292.56613 224.08089 295.09879 222.51878 296.66089 c
220.95668 298.22296 218.42403 298.22296 216.86192 296.66089 c
215.29984 295.09879 215.29984 292.56613 216.86192 291.00403 c
218.42403 289.44193 220.95668 289.44193 222.51878 291.00403 c
S
0 0 0 sc
0 i
/F1.1[ 18 0 0 -18 0 0]sf
112.72337 270.41608 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
119.01633 275.41608 m
(!)s
/F1.1[ 18 0 0 -18 0 0]sf
433.84195 242.21681 m
(")s
/F2.1[ 12 0 0 -12 0 0]sf
441.22476 247.21681 m
(!)s
/F1.1[ 18 0 0 -18 0 0]sf
332.40054 273.26251 m
(")s
/F2.1[ 12 0 0 -12 0 0]sf
339.78336 278.26251 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
212.99255 241.26518 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
219.28552 246.26518 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
324.80939 227.91521 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
331.10236 232.91521 m
(#)s
/F1.1[ 18 0 0 -18 0 0]sf
112.72337 347.94595 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
119.01633 352.94595 m
(!)s
/F1.1[ 18 0 0 -18 0 0]sf
209.11606 318.79504 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
215.40903 323.79504 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
332.40054 350.79236 m
(")s
/F2.1[ 12 0 0 -12 0 0]sf
339.78336 355.79236 m
(")s
/F1.1[ 18 0 0 -18 0 0]sf
433.84195 319.74667 m
(")s
/F2.1[ 12 0 0 -12 0 0]sf
441.22476 324.74667 m
(!)s
/F2.1[ 18 0 0 -18 0 0]sf
177.35054 198.75732 m
($)s
/F2.1[ 14 0 0 -14 0 0]sf
187.36128 204.75732 m
(!%)[ 7.786133 0.000000 ] xS
/F2.1[ 18 0 0 -18 0 0]sf
199.03706 198.75732 m
(&%'\(\)*\)+\),,,-)[ 10.511719 5.000977 5.994141 10.010742 5.000977 10.010742 5.000977 9.000000 5.000977 5.000977 5.000977 5.000977 0.000000 ] xS
179.52567 280.16898 m
($)s
/F2.1[ 14 0 0 -14 0 0]sf
189.53641 286.16898 m
("%)[ 7.786133 0.000000 ] xS
/F2.1[ 18 0 0 -18 0 0]sf
201.21219 280.16898 m
(&%'\(\)*\).\),,,-)[ 10.511719 5.000977 5.994141 10.010742 5.000977 10.010742 5.000977 10.010742 5.000977 5.000977 5.000977 5.000977 0.000000 ] xS
ep
end
%%Trailer
%%EOF
